GAS LISTING /tmp/ccM3nXtL.s 			page 1


   1              		.file	"riscv.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN5Riscv10popSppSpieEv
   9              	_ZN5Riscv10popSppSpieEv:
  10              	.LFB57:
  11              		.file 1 "src/riscv.cpp"
   1:src/riscv.cpp **** //
   2:src/riscv.cpp **** // Created by os on 5/16/24.
   3:src/riscv.cpp **** //
   4:src/riscv.cpp **** #include "../h/riscv.hpp"
   5:src/riscv.cpp **** 
   6:src/riscv.cpp **** void Riscv::popSppSpie()
   7:src/riscv.cpp **** {
  12              		.loc 1 7 1
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23348100 		sd	s0,8(sp)
  17              		.cfi_offset 8, -8
  18 0008 13040101 		addi	s0,sp,16
  19              		.cfi_def_cfa 8, 0
   8:src/riscv.cpp ****     Riscv::mc_sstatus(Riscv::SSTATUS_SPP);
  20              		.loc 1 8 5
  21              	.LVL0:
  22              	.LBB49:
  23              	.LBB50:
  24              		.file 2 "src/../h/riscv.hpp"
   1:src/../h/riscv.hpp **** //
   2:src/../h/riscv.hpp **** // Created by os on 5/16/24.
   3:src/../h/riscv.hpp **** //
   4:src/../h/riscv.hpp **** 
   5:src/../h/riscv.hpp **** #ifndef PROJECT_BASE_RISCV_HPP
   6:src/../h/riscv.hpp **** #define PROJECT_BASE_RISCV_HPP
   7:src/../h/riscv.hpp **** // preuzeta sa Teamsa
   8:src/../h/riscv.hpp **** #include "../lib/hw.h"
   9:src/../h/riscv.hpp **** #include "tipovi.hpp"
  10:src/../h/riscv.hpp **** #include "Allocator.hpp"
  11:src/../h/riscv.hpp **** #include "../h/print.hpp"
  12:src/../h/riscv.hpp **** #include "../h/kConsole.hpp"
  13:src/../h/riscv.hpp **** 
  14:src/../h/riscv.hpp **** class Riscv
  15:src/../h/riscv.hpp **** {
  16:src/../h/riscv.hpp **** public:
  17:src/../h/riscv.hpp ****     static void kernelEnd(void* arg);
  18:src/../h/riscv.hpp **** 
  19:src/../h/riscv.hpp ****     // pop sstatus.spp and sstatus.spie bits (has to be a non inline function)
  20:src/../h/riscv.hpp ****     static void popSppSpie();
  21:src/../h/riscv.hpp **** 
  22:src/../h/riscv.hpp ****     // read register scause
  23:src/../h/riscv.hpp ****     static uint64 r_scause();
  24:src/../h/riscv.hpp **** 
  25:src/../h/riscv.hpp ****     // write register scause
  26:src/../h/riscv.hpp ****     static void w_scause(uint64 scause);
GAS LISTING /tmp/ccM3nXtL.s 			page 2


  27:src/../h/riscv.hpp **** 
  28:src/../h/riscv.hpp ****     // read register sepc
  29:src/../h/riscv.hpp ****     static uint64 r_sepc();
  30:src/../h/riscv.hpp **** 
  31:src/../h/riscv.hpp ****     // write register sepc
  32:src/../h/riscv.hpp ****     static void w_sepc(uint64 sepc);
  33:src/../h/riscv.hpp **** 
  34:src/../h/riscv.hpp ****     // read register stvec
  35:src/../h/riscv.hpp ****     static uint64 r_stvec();
  36:src/../h/riscv.hpp **** 
  37:src/../h/riscv.hpp ****     // write register stvec
  38:src/../h/riscv.hpp ****     static void w_stvec(uint64 stvec);
  39:src/../h/riscv.hpp **** 
  40:src/../h/riscv.hpp ****     // read register stval
  41:src/../h/riscv.hpp ****     static uint64 r_stval();
  42:src/../h/riscv.hpp **** 
  43:src/../h/riscv.hpp ****     // write register stval
  44:src/../h/riscv.hpp ****     static void w_stval(uint64 stval);
  45:src/../h/riscv.hpp **** 
  46:src/../h/riscv.hpp ****     enum BitMaskSip
  47:src/../h/riscv.hpp ****     {
  48:src/../h/riscv.hpp ****         SIP_SSIP = (1 << 1),
  49:src/../h/riscv.hpp ****         SIP_STIP = (1 << 5),
  50:src/../h/riscv.hpp ****         SIP_SEIP = (1 << 9),
  51:src/../h/riscv.hpp ****     };
  52:src/../h/riscv.hpp **** 
  53:src/../h/riscv.hpp ****     // mask set register sip
  54:src/../h/riscv.hpp ****     static void ms_sip(uint64 mask);
  55:src/../h/riscv.hpp **** 
  56:src/../h/riscv.hpp ****     // mask clear register sip
  57:src/../h/riscv.hpp ****     static void mc_sip(uint64 mask);
  58:src/../h/riscv.hpp **** 
  59:src/../h/riscv.hpp ****     // read register sip
  60:src/../h/riscv.hpp ****     static uint64 r_sip();
  61:src/../h/riscv.hpp **** 
  62:src/../h/riscv.hpp ****     // write register sip
  63:src/../h/riscv.hpp ****     static void w_sip(uint64 sip);
  64:src/../h/riscv.hpp **** 
  65:src/../h/riscv.hpp ****     enum BitMaskSstatus
  66:src/../h/riscv.hpp ****     {
  67:src/../h/riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  68:src/../h/riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  69:src/../h/riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  70:src/../h/riscv.hpp ****     };
  71:src/../h/riscv.hpp **** 
  72:src/../h/riscv.hpp ****     static uint64 r_ra();
  73:src/../h/riscv.hpp ****     // mask set register sstatus
  74:src/../h/riscv.hpp ****     static void ms_sstatus(uint64 mask);
  75:src/../h/riscv.hpp **** 
  76:src/../h/riscv.hpp ****     // mask clear register sstatus
  77:src/../h/riscv.hpp ****     static void mc_sstatus(uint64 mask);
  78:src/../h/riscv.hpp **** 
  79:src/../h/riscv.hpp ****     // read register sstatus
  80:src/../h/riscv.hpp ****     static uint64 r_sstatus();
  81:src/../h/riscv.hpp **** 
  82:src/../h/riscv.hpp ****     // write register sstatus
  83:src/../h/riscv.hpp ****     static void w_sstatus(uint64 sstatus);
GAS LISTING /tmp/ccM3nXtL.s 			page 3


  84:src/../h/riscv.hpp **** 
  85:src/../h/riscv.hpp ****     // supervisor trap
  86:src/../h/riscv.hpp ****     static void supervisorTrap();
  87:src/../h/riscv.hpp **** 
  88:src/../h/riscv.hpp **** private:
  89:src/../h/riscv.hpp ****     // supervisor trap handler
  90:src/../h/riscv.hpp ****     static void handleSupervisorTrap();
  91:src/../h/riscv.hpp **** 
  92:src/../h/riscv.hpp **** };
  93:src/../h/riscv.hpp **** 
  94:src/../h/riscv.hpp **** inline uint64 Riscv::r_scause()
  95:src/../h/riscv.hpp **** {
  96:src/../h/riscv.hpp ****     uint64 volatile scause;
  97:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
  98:src/../h/riscv.hpp ****     return scause;
  99:src/../h/riscv.hpp **** }
 100:src/../h/riscv.hpp **** 
 101:src/../h/riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
 102:src/../h/riscv.hpp **** {
 103:src/../h/riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
 104:src/../h/riscv.hpp **** }
 105:src/../h/riscv.hpp **** 
 106:src/../h/riscv.hpp **** inline uint64 Riscv::r_sepc()
 107:src/../h/riscv.hpp **** {
 108:src/../h/riscv.hpp ****     uint64 volatile sepc;
 109:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 110:src/../h/riscv.hpp ****     return sepc;
 111:src/../h/riscv.hpp **** }
 112:src/../h/riscv.hpp **** 
 113:src/../h/riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 114:src/../h/riscv.hpp **** {
 115:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 116:src/../h/riscv.hpp **** }
 117:src/../h/riscv.hpp **** 
 118:src/../h/riscv.hpp **** inline uint64 Riscv::r_stvec()
 119:src/../h/riscv.hpp **** {
 120:src/../h/riscv.hpp ****     uint64 volatile stvec;
 121:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 122:src/../h/riscv.hpp ****     return stvec;
 123:src/../h/riscv.hpp **** }
 124:src/../h/riscv.hpp **** 
 125:src/../h/riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 126:src/../h/riscv.hpp **** {
 127:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
 128:src/../h/riscv.hpp **** }
 129:src/../h/riscv.hpp **** 
 130:src/../h/riscv.hpp **** inline uint64 Riscv::r_stval()
 131:src/../h/riscv.hpp **** {
 132:src/../h/riscv.hpp ****     uint64 volatile stval;
 133:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 134:src/../h/riscv.hpp ****     return stval;
 135:src/../h/riscv.hpp **** 
 136:src/../h/riscv.hpp **** }
 137:src/../h/riscv.hpp **** 
 138:src/../h/riscv.hpp **** inline uint64 Riscv::r_ra()
 139:src/../h/riscv.hpp **** {
 140:src/../h/riscv.hpp ****     uint64 volatile ra;
GAS LISTING /tmp/ccM3nXtL.s 			page 4


 141:src/../h/riscv.hpp ****     __asm__ volatile ("mv %[ra], ra" : [ra] "=r"(ra));
 142:src/../h/riscv.hpp ****     return ra;
 143:src/../h/riscv.hpp **** }
 144:src/../h/riscv.hpp **** 
 145:src/../h/riscv.hpp **** inline void Riscv::w_stval(uint64 stval)
 146:src/../h/riscv.hpp **** {
 147:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
 148:src/../h/riscv.hpp **** }
 149:src/../h/riscv.hpp **** 
 150:src/../h/riscv.hpp **** inline void Riscv::ms_sip(uint64 mask)
 151:src/../h/riscv.hpp **** {
 152:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 153:src/../h/riscv.hpp **** }
 154:src/../h/riscv.hpp **** 
 155:src/../h/riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
 156:src/../h/riscv.hpp **** {
 157:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 158:src/../h/riscv.hpp **** }
 159:src/../h/riscv.hpp **** 
 160:src/../h/riscv.hpp **** inline uint64 Riscv::r_sip()
 161:src/../h/riscv.hpp **** {
 162:src/../h/riscv.hpp ****     uint64 volatile sip;
 163:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 164:src/../h/riscv.hpp ****     return sip;
 165:src/../h/riscv.hpp **** }
 166:src/../h/riscv.hpp **** 
 167:src/../h/riscv.hpp **** inline void Riscv::w_sip(uint64 sip)
 168:src/../h/riscv.hpp **** {
 169:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 170:src/../h/riscv.hpp **** }
 171:src/../h/riscv.hpp **** 
 172:src/../h/riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask)
 173:src/../h/riscv.hpp **** {
 174:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
 175:src/../h/riscv.hpp **** }
 176:src/../h/riscv.hpp **** 
 177:src/../h/riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask)
 178:src/../h/riscv.hpp **** {
 179:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sstatus, %[mask]" : : [mask] "r"(mask));
  25              		.loc 2 179 5
  26              		.loc 2 179 68 is_stmt 0
  27 000c 93070010 		li	a5,256
  28              	#APP
  29              	# 179 "src/../h/riscv.hpp" 1
 180              	}
  30              		csrc sstatus, a5
  31              	# 0 "" 2
  32              	.LVL1:
  33              	#NO_APP
  34              	.LBE50:
  35              	.LBE49:
   9:src/riscv.cpp ****     __asm__ volatile("csrw sepc, ra");
  36              		.loc 1 9 5 is_stmt 1
  37              		.loc 1 9 38 is_stmt 0
  38              	#APP
  39              	# 9 "src/riscv.cpp" 1
  10              	    __asm__ volatile("sret");
GAS LISTING /tmp/ccM3nXtL.s 			page 5


  40              		csrw sepc, ra
  41              	# 0 "" 2
  42              		.loc 1 10 5 is_stmt 1
  43              		.loc 1 10 29 is_stmt 0
  44              	# 10 "src/riscv.cpp" 1
  11              	}
  45              		sret
  46              	# 0 "" 2
  47              		.loc 1 11 1
  48              	#NO_APP
  49 001c 03348100 		ld	s0,8(sp)
  50              		.cfi_restore 8
  51              		.cfi_def_cfa 2, 16
  52 0020 13010101 		addi	sp,sp,16
  53              		.cfi_def_cfa_offset 0
  54 0024 67800000 		jr	ra
  55              		.cfi_endproc
  56              	.LFE57:
  58              		.align	2
  59              		.globl	_ZN5Riscv9kernelEndEPv
  61              	_ZN5Riscv9kernelEndEPv:
  62              	.LFB58:
  12:src/riscv.cpp **** 
  13:src/riscv.cpp **** void Riscv::kernelEnd(void *arg) {
  63              		.loc 1 13 34 is_stmt 1
  64              		.cfi_startproc
  65              	.LVL2:
  66 0028 130101FF 		addi	sp,sp,-16
  67              		.cfi_def_cfa_offset 16
  68 002c 23348100 		sd	s0,8(sp)
  69              		.cfi_offset 8, -8
  70 0030 13040101 		addi	s0,sp,16
  71              		.cfi_def_cfa 8, 0
  14:src/riscv.cpp ****     __asm__ volatile("mv a0, %0" :: "r"(0x100));
  72              		.loc 1 14 5
  73              		.loc 1 14 48 is_stmt 0
  74 0034 93070010 		li	a5,256
  75              	#APP
  76              	# 14 "src/riscv.cpp" 1
  15              	    __asm__ volatile("ecall");
  77              		mv a0, a5
  78              	# 0 "" 2
  79              		.loc 1 15 5 is_stmt 1
  80              		.loc 1 15 30 is_stmt 0
  81              	# 15 "src/riscv.cpp" 1
  16              	    return;
  82              		ecall
  83              	# 0 "" 2
  84              		.loc 1 16 5 is_stmt 1
  17:src/riscv.cpp **** }
  85              		.loc 1 17 1 is_stmt 0
  86              	#NO_APP
  87 0040 03348100 		ld	s0,8(sp)
  88              		.cfi_restore 8
  89              		.cfi_def_cfa 2, 16
  90 0044 13010101 		addi	sp,sp,16
  91              		.cfi_def_cfa_offset 0
GAS LISTING /tmp/ccM3nXtL.s 			page 6


  92 0048 67800000 		jr	ra
  93              		.cfi_endproc
  94              	.LFE58:
  96              		.section	.rodata.str1.8,"aMS",@progbits,1
  97              		.align	3
  98              	.LC0:
  99 0000 496C6C65 		.string	"Illegal insturction!!!\n"
  99      67616C20 
  99      696E7374 
  99      75726374 
  99      696F6E21 
 100              		.text
 101              		.align	2
 102              		.globl	_ZN5Riscv20handleSupervisorTrapEv
 104              	_ZN5Riscv20handleSupervisorTrapEv:
 105              	.LFB59:
  18:src/riscv.cpp **** 
  19:src/riscv.cpp **** void Riscv::handleSupervisorTrap()
  20:src/riscv.cpp **** {
 106              		.loc 1 20 1 is_stmt 1
 107              		.cfi_startproc
 108 004c 130101F2 		addi	sp,sp,-224
 109              		.cfi_def_cfa_offset 224
 110 0050 233C110C 		sd	ra,216(sp)
 111 0054 2338810C 		sd	s0,208(sp)
 112 0058 2334910C 		sd	s1,200(sp)
 113 005c 2330210D 		sd	s2,192(sp)
 114 0060 233C310B 		sd	s3,184(sp)
 115 0064 2338410B 		sd	s4,176(sp)
 116 0068 2334510B 		sd	s5,168(sp)
 117 006c 2330610B 		sd	s6,160(sp)
 118 0070 233C7109 		sd	s7,152(sp)
 119 0074 23388109 		sd	s8,144(sp)
 120              		.cfi_offset 1, -8
 121              		.cfi_offset 8, -16
 122              		.cfi_offset 9, -24
 123              		.cfi_offset 18, -32
 124              		.cfi_offset 19, -40
 125              		.cfi_offset 20, -48
 126              		.cfi_offset 21, -56
 127              		.cfi_offset 22, -64
 128              		.cfi_offset 23, -72
 129              		.cfi_offset 24, -80
 130 0078 1304010E 		addi	s0,sp,224
 131              		.cfi_def_cfa 8, 0
  21:src/riscv.cpp ****     uint64 volatile razlog, p1,p2,p3,p4;
 132              		.loc 1 21 5
  22:src/riscv.cpp ****     __asm__ volatile("mv %[razlog], a0" : [razlog]"=r"(razlog));
 133              		.loc 1 22 5
 134              		.loc 1 22 64 is_stmt 0
 135              	#APP
 136              	# 22 "src/riscv.cpp" 1
  23              	    __asm__ volatile("mv %[p1], a1" : [p1] "=r"(p1));
 137              		mv a5, a0
 138              	# 0 "" 2
 139              	#NO_APP
 140 0080 2334F4FA 		sd	a5,-88(s0)
GAS LISTING /tmp/ccM3nXtL.s 			page 7


 141              		.loc 1 23 5 is_stmt 1
 142              		.loc 1 23 53 is_stmt 0
 143              	#APP
 144              	# 23 "src/riscv.cpp" 1
  24              	    __asm__ volatile("mv %[p2], a2" : [p2] "=r"(p2));
 145              		mv a5, a1
 146              	# 0 "" 2
 147              	#NO_APP
 148 0088 2330F4FA 		sd	a5,-96(s0)
 149              		.loc 1 24 5 is_stmt 1
 150              		.loc 1 24 53 is_stmt 0
 151              	#APP
 152              	# 24 "src/riscv.cpp" 1
  25              	    __asm__ volatile("mv %[p3], a3" : [p3] "=r"(p3));
 153              		mv a5, a2
 154              	# 0 "" 2
 155              	#NO_APP
 156 0090 233CF4F8 		sd	a5,-104(s0)
 157              		.loc 1 25 5 is_stmt 1
 158              		.loc 1 25 53 is_stmt 0
 159              	#APP
 160              	# 25 "src/riscv.cpp" 1
  26              	    __asm__ volatile("mv %[p4], a4" : [p4] "=r"(p4));
 161              		mv a5, a3
 162              	# 0 "" 2
 163              	#NO_APP
 164 0098 2338F4F8 		sd	a5,-112(s0)
 165              		.loc 1 26 5 is_stmt 1
 166              		.loc 1 26 53 is_stmt 0
 167              	#APP
 168              	# 26 "src/riscv.cpp" 1
  27              	    //__asm__ volatile("mv %[p5], a5" : [p5] "=r"(p5));
 169              		mv a5, a4
 170              	# 0 "" 2
 171              	#NO_APP
 172 00a0 2334F4F8 		sd	a5,-120(s0)
  28:src/riscv.cpp **** 
  29:src/riscv.cpp ****     //printString("usao1\n");
  30:src/riscv.cpp ****     uint64 volatile scause = r_scause();
 173              		.loc 1 30 5 is_stmt 1
 174              	.LBB107:
 175              	.LBB108:
  96:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
 176              		.loc 2 96 5
  97:src/../h/riscv.hpp ****     return scause;
 177              		.loc 2 97 5
  97:src/../h/riscv.hpp ****     return scause;
 178              		.loc 2 97 72 is_stmt 0
 179              	#APP
 180              	# 97 "src/../h/riscv.hpp" 1
 181              		csrr a5, scause
 182              	# 0 "" 2
 183              	#NO_APP
 184 00a8 233CF4F4 		sd	a5,-168(s0)
  98:src/../h/riscv.hpp **** }
 185              		.loc 2 98 5 is_stmt 1
  98:src/../h/riscv.hpp **** }
GAS LISTING /tmp/ccM3nXtL.s 			page 8


 186              		.loc 2 98 12 is_stmt 0
 187 00ac 833784F5 		ld	a5,-168(s0)
 188              	.LBE108:
 189              	.LBE107:
 190              		.loc 1 30 39
 191 00b0 2330F4F8 		sd	a5,-128(s0)
  31:src/riscv.cpp ****     if (scause == 0x0000000000000008UL || scause == 0x0000000000000009UL){
 192              		.loc 1 31 5 is_stmt 1
 193              	.LBB109:
 194              		.loc 1 31 16 is_stmt 0
 195 00b4 033704F8 		ld	a4,-128(s0)
 196              		.loc 1 31 40
 197 00b8 93078000 		li	a5,8
 198 00bc 630CF704 		beq	a4,a5,.L6
 199              		.loc 1 31 50 discriminator 2
 200 00c0 033704F8 		ld	a4,-128(s0)
 201              		.loc 1 31 40 discriminator 2
 202 00c4 93079000 		li	a5,9
 203 00c8 6306F704 		beq	a4,a5,.L6
 204              	.LBE109:
  32:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() + 4;
  33:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
  34:src/riscv.cpp ****         int volatile ret;
  35:src/riscv.cpp ****         void volatile *ptr;
  36:src/riscv.cpp ****         char volatile retchar; // !!!!!!!!!!!!!!!!!!!!!!!!!!dodatko ako ne bude radilo
  37:src/riscv.cpp ****         switch (razlog) {
  38:src/riscv.cpp ****             //ALOKATOR
  39:src/riscv.cpp ****             case MEM_ALLOC:
  40:src/riscv.cpp ****                 //printString("Sistem Malloc\n");
  41:src/riscv.cpp ****                 ptr = Allocator::_malloc(((size_t) p1) * MEM_BLOCK_SIZE);
  42:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" : : "r"(ptr));
  43:src/riscv.cpp ****                 __asm__ volatile ("sw t0, 80(x8)");
  44:src/riscv.cpp ****                 break;
  45:src/riscv.cpp ****             case MEM_FREE:
  46:src/riscv.cpp ****                 Allocator::_mem_free((void*) p1);
  47:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" : : "r"(ret));
  48:src/riscv.cpp ****                 __asm__ volatile ("sw t0, 80(x8)");
  49:src/riscv.cpp ****                 break;
  50:src/riscv.cpp ****             //NITI
  51:src/riscv.cpp ****             case THREAD_CREATE:
  52:src/riscv.cpp ****                 if (!(TCB::thread_create((TCB**)p1,(TCB::Body)p2,(void*)p3,(uint64*)p4))) {
  53:src/riscv.cpp ****                     if (TCB::running != nullptr)
  54:src/riscv.cpp ****                     {TCB::running->retVal = 0;}
  55:src/riscv.cpp ****                 }
  56:src/riscv.cpp ****                 else {
  57:src/riscv.cpp ****                     if (TCB::running != nullptr){
  58:src/riscv.cpp ****                     TCB::running->retVal = -1;}
  59:src/riscv.cpp ****                 }
  60:src/riscv.cpp ****                 break;
  61:src/riscv.cpp **** 
  62:src/riscv.cpp ****             case THREAD_EXIT:
  63:src/riscv.cpp ****                 TCB::running->setFinished(true);
  64:src/riscv.cpp ****                 TCB::dispatch();
  65:src/riscv.cpp ****                 break;
  66:src/riscv.cpp **** 
  67:src/riscv.cpp ****             case THREAD_DISPATCH:
  68:src/riscv.cpp ****                 TCB::timeSliceCounter = 0;
GAS LISTING /tmp/ccM3nXtL.s 			page 9


  69:src/riscv.cpp ****                 TCB::dispatch();
  70:src/riscv.cpp ****                 break;
  71:src/riscv.cpp ****             case TIME_SLEEP:
  72:src/riscv.cpp ****                 TCB::putToSleep((time_t) p1);
  73:src/riscv.cpp ****                 break;
  74:src/riscv.cpp ****             //NITI KRAJ
  75:src/riscv.cpp **** 
  76:src/riscv.cpp ****             //SEMAFORI POCETAK
  77:src/riscv.cpp ****             case SEM_OPEN:
  78:src/riscv.cpp ****                 //printString("otvoren\n");
  79:src/riscv.cpp ****                 if (!kSemaphore::openSem((kSemaphore**)p1, (uint64) p2)) {
  80:src/riscv.cpp ****                     if (TCB::running != nullptr)
  81:src/riscv.cpp ****                     {TCB::running->retVal = 0;}
  82:src/riscv.cpp ****                 }
  83:src/riscv.cpp ****                 else{
  84:src/riscv.cpp ****                     if (TCB::running != nullptr)
  85:src/riscv.cpp ****                     {TCB::running->retVal = -1;}
  86:src/riscv.cpp ****                 }
  87:src/riscv.cpp ****                 break;
  88:src/riscv.cpp ****             case SEM_CLOSE:
  89:src/riscv.cpp ****                 //printString("zatovren\n");
  90:src/riscv.cpp ****                 if (!((kSemaphore*)p1)->closeSem()) {
  91:src/riscv.cpp ****                     if (TCB::running != nullptr)
  92:src/riscv.cpp ****                     {TCB::running->retVal = 0;}
  93:src/riscv.cpp ****                 }
  94:src/riscv.cpp ****                 else {
  95:src/riscv.cpp ****                     if (TCB::running != nullptr)
  96:src/riscv.cpp ****                     {TCB::running->retVal = -1;}
  97:src/riscv.cpp ****                 }
  98:src/riscv.cpp ****                 break;
  99:src/riscv.cpp ****             case SEM_WAIT:
 100:src/riscv.cpp ****                 //printString("wait\n");
 101:src/riscv.cpp ****                 if (!((kSemaphore*)p1)->wait()){
 102:src/riscv.cpp ****                     if (TCB::running != nullptr)
 103:src/riscv.cpp ****                     {TCB::running->retVal = 0;}
 104:src/riscv.cpp ****                 }
 105:src/riscv.cpp ****                 else{
 106:src/riscv.cpp ****                     if (TCB::running != nullptr)
 107:src/riscv.cpp ****                     {TCB::running->retVal = -1;}
 108:src/riscv.cpp ****                 }
 109:src/riscv.cpp ****                 break;
 110:src/riscv.cpp ****             case SEM_SIGNAL:
 111:src/riscv.cpp ****                 //printString("signal\n");
 112:src/riscv.cpp ****                 if (!((kSemaphore*)p1)->signal()){
 113:src/riscv.cpp ****                     if (TCB::running != nullptr)
 114:src/riscv.cpp ****                     {TCB::running->retVal = 0;}
 115:src/riscv.cpp ****                 }
 116:src/riscv.cpp ****                 else{
 117:src/riscv.cpp ****                     if (TCB::running != nullptr)
 118:src/riscv.cpp ****                     {TCB::running->retVal = -1;}
 119:src/riscv.cpp ****                 }
 120:src/riscv.cpp ****                 break;
 121:src/riscv.cpp ****             case SEM_TRYWAIT:
 122:src/riscv.cpp ****                 ret = ((kSemaphore*)p1)->tryWait();
 123:src/riscv.cpp ****                 if (!ret) {
 124:src/riscv.cpp ****                     if (TCB::running != nullptr) {
 125:src/riscv.cpp ****                         TCB::running->retVal = 0;
GAS LISTING /tmp/ccM3nXtL.s 			page 10


 126:src/riscv.cpp ****                     }
 127:src/riscv.cpp ****                 }
 128:src/riscv.cpp ****                 else{
 129:src/riscv.cpp ****                     if (TCB::running != nullptr) {
 130:src/riscv.cpp ****                         if (ret == 1) {
 131:src/riscv.cpp ****                             TCB::running->retVal = 1;
 132:src/riscv.cpp ****                         }
 133:src/riscv.cpp ****                         if (ret == -1) {
 134:src/riscv.cpp ****                             TCB::running->retVal = -1;
 135:src/riscv.cpp ****                         }
 136:src/riscv.cpp ****                     }
 137:src/riscv.cpp ****                 }
 138:src/riscv.cpp ****                 break;
 139:src/riscv.cpp ****             case SEM_TIMEDWAIT:
 140:src/riscv.cpp ****                 ret = ((kSemaphore*)p1)->timedWait((time_t) p2);
 141:src/riscv.cpp ****                 if (!ret) {
 142:src/riscv.cpp ****                     if (TCB::running != nullptr) {
 143:src/riscv.cpp ****                         TCB::running->retVal = 0;
 144:src/riscv.cpp ****                     }
 145:src/riscv.cpp ****                 }
 146:src/riscv.cpp ****                 else {
 147:src/riscv.cpp ****                     if (TCB::running != nullptr) {
 148:src/riscv.cpp ****                         if (ret == -1) {
 149:src/riscv.cpp ****                             TCB::running->retVal = -1;
 150:src/riscv.cpp ****                         }
 151:src/riscv.cpp ****                         if (ret == -2) {
 152:src/riscv.cpp ****                             TCB::running->retVal = -2;
 153:src/riscv.cpp ****                         }
 154:src/riscv.cpp ****                     }
 155:src/riscv.cpp ****                 }
 156:src/riscv.cpp ****                 break;
 157:src/riscv.cpp ****             //SEMAFORI KRAJ
 158:src/riscv.cpp ****             case PUTC:
 159:src/riscv.cpp ****                 kConsole::kputc((char)p1);
 160:src/riscv.cpp ****                 if ((char) p1 == '\r') {
 161:src/riscv.cpp ****                     kConsole::kputc('\n');
 162:src/riscv.cpp ****                 }
 163:src/riscv.cpp ****                 break;
 164:src/riscv.cpp ****             case GETC:
 165:src/riscv.cpp ****                 retchar =(char) kConsole::kgetc();
 166:src/riscv.cpp ****                 TCB::running->getcRetVal = retchar;
 167:src/riscv.cpp ****                 break;
 168:src/riscv.cpp ****             case 0x100:
 169:src/riscv.cpp ****                 while ((*((char *) CONSOLE_STATUS) & CONSOLE_TX_STATUS_BIT))
 170:src/riscv.cpp ****                 {
 171:src/riscv.cpp ****                     if (kConsole::getOutputSize() <= 0) {break;}
 172:src/riscv.cpp ****                     *((char*) CONSOLE_TX_DATA) = kConsole::putOutputBuffer();
 173:src/riscv.cpp ****                 }
 174:src/riscv.cpp ****                 break;
 175:src/riscv.cpp ****             default:
 176:src/riscv.cpp ****                 TCB::timeSliceCounter = 0;
 177:src/riscv.cpp ****                 TCB::dispatch();
 178:src/riscv.cpp ****                 break;
 179:src/riscv.cpp ****         }
 180:src/riscv.cpp ****         w_sstatus(sstatus);
 181:src/riscv.cpp ****         w_sepc(sepc);
 182:src/riscv.cpp ****     }
GAS LISTING /tmp/ccM3nXtL.s 			page 11


 183:src/riscv.cpp ****     else if (scause == 0x8000000000000001UL)
 205              		.loc 1 183 10 is_stmt 1
 206              	.LBB176:
 207              	.LBB110:
 208              		.loc 1 183 21 is_stmt 0
 209 00cc 033704F8 		ld	a4,-128(s0)
 210              		.loc 1 183 10
 211 00d0 9307F0FF 		li	a5,-1
 212 00d4 9397F703 		slli	a5,a5,63
 213 00d8 93871700 		addi	a5,a5,1
 214 00dc 6300F746 		beq	a4,a5,.L7
 215              	.LBE110:
 216              	.LBE176:
 184:src/riscv.cpp ****     {
 185:src/riscv.cpp ****         while ((*((char *) CONSOLE_STATUS) & CONSOLE_TX_STATUS_BIT))
 186:src/riscv.cpp ****         {
 187:src/riscv.cpp ****             if (kConsole::getOutputSize() <= 0) {break;}
 188:src/riscv.cpp ****             *((char*) CONSOLE_TX_DATA) = kConsole::putOutputBuffer();
 189:src/riscv.cpp ****         }
 190:src/riscv.cpp ****         mc_sip(SIP_SSIP);
 191:src/riscv.cpp **** 
 192:src/riscv.cpp ****         //LISTA SLEEPING PREULAZNCAVANJE
 193:src/riscv.cpp ****         List<TCB>::Elem *element = (TCB::sleeping).head;
 194:src/riscv.cpp ****         /*while (element) {
 195:src/riscv.cpp ****             (element->data->timeToSleep)--;
 196:src/riscv.cpp ****             element = element->next;
 197:src/riscv.cpp ****         }
 198:src/riscv.cpp ****         element = (TCB::sleeping).head;*/
 199:src/riscv.cpp **** 
 200:src/riscv.cpp ****         List<TCB>::Elem *prev = nullptr;
 201:src/riscv.cpp ****         while (element) {
 202:src/riscv.cpp ****             (element->data->timeToSleep)--;
 203:src/riscv.cpp ****             List<TCB>::Elem *next = element->next;
 204:src/riscv.cpp **** 
 205:src/riscv.cpp ****             if (element->data->timeToSleep == 0) {
 206:src/riscv.cpp ****                 element->data->isSleeping = false;
 207:src/riscv.cpp ****                 Scheduler::put(element->data);
 208:src/riscv.cpp **** 
 209:src/riscv.cpp ****                 TCB::sleeping.deleteElement(element);
 210:src/riscv.cpp **** 
 211:src/riscv.cpp ****                 if (prev) {
 212:src/riscv.cpp ****                     prev->next = next;
 213:src/riscv.cpp ****                 } else {
 214:src/riscv.cpp ****                     TCB::sleeping.head = next;
 215:src/riscv.cpp ****                 }
 216:src/riscv.cpp ****                 if (!next) {
 217:src/riscv.cpp ****                     TCB::sleeping.tail = prev;
 218:src/riscv.cpp ****                 }
 219:src/riscv.cpp ****             } else {
 220:src/riscv.cpp ****                 prev = element;
 221:src/riscv.cpp ****             }
 222:src/riscv.cpp ****             element = next;;
 223:src/riscv.cpp ****         }
 224:src/riscv.cpp ****         //LISTA SLEEPING PREULANCAVANJE
 225:src/riscv.cpp **** 
 226:src/riscv.cpp ****         //LISTA ZA TIMEDWAIT SEMAPHORE!!!!!!!!!
 227:src/riscv.cpp **** 
GAS LISTING /tmp/ccM3nXtL.s 			page 12


 228:src/riscv.cpp ****         element = (kSemaphore::blockedTimedWait).head;
 229:src/riscv.cpp ****         /*
 230:src/riscv.cpp ****         while (element) {
 231:src/riscv.cpp ****             (element->data->timeToWaitSem)--;
 232:src/riscv.cpp ****             element = element->next;
 233:src/riscv.cpp ****         }
 234:src/riscv.cpp ****         element = (kSemaphore::blockedTimedWait).head;
 235:src/riscv.cpp ****         */
 236:src/riscv.cpp ****         prev = nullptr;
 237:src/riscv.cpp **** 
 238:src/riscv.cpp ****         while (element) {
 239:src/riscv.cpp ****             (element->data->timeToWaitSem)--;
 240:src/riscv.cpp ****             List<TCB>::Elem *next = element->next;
 241:src/riscv.cpp **** 
 242:src/riscv.cpp ****             if (element->data->timeToWaitSem == 0) {
 243:src/riscv.cpp ****                 element->data->blocked = false;
 244:src/riscv.cpp **** 
 245:src/riscv.cpp ****                 kSemaphore::blockedTimedWait.deleteElement(element);
 246:src/riscv.cpp **** 
 247:src/riscv.cpp ****                 List<TCB> *headSemList = &(element->data->blockedOnWhichSem->blocked);
 248:src/riscv.cpp ****                 headSemList->deleteNodes(element->data);
 249:src/riscv.cpp **** 
 250:src/riscv.cpp ****                 element->data->blockedOnWhichSem = nullptr;
 251:src/riscv.cpp ****                 element->data->regularlyFinishedWait = false;
 252:src/riscv.cpp **** 
 253:src/riscv.cpp ****                 Scheduler::put(element->data);
 254:src/riscv.cpp **** 
 255:src/riscv.cpp ****                 if (prev) {
 256:src/riscv.cpp ****                     prev->next = next;
 257:src/riscv.cpp ****                 } else {
 258:src/riscv.cpp ****                     kSemaphore::blockedTimedWait.head = next;
 259:src/riscv.cpp ****                 }
 260:src/riscv.cpp ****                 if (!next) {
 261:src/riscv.cpp ****                     kSemaphore::blockedTimedWait.tail = prev;
 262:src/riscv.cpp ****                 }
 263:src/riscv.cpp ****             } else {
 264:src/riscv.cpp ****                 prev = element;
 265:src/riscv.cpp ****             }
 266:src/riscv.cpp ****             element = next;
 267:src/riscv.cpp ****         }
 268:src/riscv.cpp **** 
 269:src/riscv.cpp ****         //LISTA ZA TIMEDWAIT SEMAPHORE!!!!!!!!!
 270:src/riscv.cpp **** 
 271:src/riscv.cpp ****         // OVO JE ZA PROMJENU KONTKESTA KAD STIGNE TAJMER
 272:src/riscv.cpp **** 
 273:src/riscv.cpp ****         TCB::timeSliceCounter++;
 274:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 275:src/riscv.cpp ****         {
 276:src/riscv.cpp ****             uint64 volatile sepc = r_sepc();
 277:src/riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
 278:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
 279:src/riscv.cpp ****             TCB::dispatch();
 280:src/riscv.cpp ****             w_sstatus(sstatus);
 281:src/riscv.cpp ****             w_sepc(sepc);
 282:src/riscv.cpp ****         }
 283:src/riscv.cpp ****         // OVO JE ZA PROMJENU KONTKESTA KAD STIGNE TAJMER
 284:src/riscv.cpp ****     }
GAS LISTING /tmp/ccM3nXtL.s 			page 13


 285:src/riscv.cpp ****     else if (scause == 0x8000000000000009UL)
 217              		.loc 1 285 10 is_stmt 1
 218              	.LBB177:
 219              	.LBB162:
 220              	.LBB111:
 221              		.loc 1 285 21 is_stmt 0
 222 00e0 033704F8 		ld	a4,-128(s0)
 223              		.loc 1 285 10
 224 00e4 9307F0FF 		li	a5,-1
 225 00e8 9397F703 		slli	a5,a5,63
 226 00ec 93879700 		addi	a5,a5,9
 227 00f0 6308F778 		beq	a4,a5,.L77
 286:src/riscv.cpp ****     {
 287:src/riscv.cpp ****         volatile uint64 plic = plic_claim();
 288:src/riscv.cpp **** 
 289:src/riscv.cpp ****         if (plic == 0x0a) {
 290:src/riscv.cpp ****             while ((*((char *) CONSOLE_STATUS) & CONSOLE_RX_STATUS_BIT)) {
 291:src/riscv.cpp ****                 if (kConsole::getInputSize() > 274) {
 292:src/riscv.cpp ****                     break;
 293:src/riscv.cpp ****                 }
 294:src/riscv.cpp ****                 kConsole::putInputBuffer(*((char *) CONSOLE_RX_DATA));
 295:src/riscv.cpp ****             }
 296:src/riscv.cpp ****             plic_complete(CONSOLE_IRQ);
 297:src/riscv.cpp ****         }
 298:src/riscv.cpp ****         //console_handler();
 299:src/riscv.cpp ****     }
 300:src/riscv.cpp ****     else {
 301:src/riscv.cpp ****         if (scause == 2UL) {
 228              		.loc 1 301 9 is_stmt 1
 229              		.loc 1 301 20 is_stmt 0
 230 00f4 033704F8 		ld	a4,-128(s0)
 231              		.loc 1 301 9
 232 00f8 93072000 		li	a5,2
 233 00fc 631EF70C 		bne	a4,a5,.L5
 302:src/riscv.cpp ****             //printStringMoj("MIRANNNN BUDIIDIDI");
 303:src/riscv.cpp ****             //kConsole::kputc('A');
 304:src/riscv.cpp ****             printStringMoj("Illegal insturction!!!\n");
 234              		.loc 1 304 13 is_stmt 1
 235              		.loc 1 304 27 is_stmt 0
 236 0100 17050000 		lla	a0,.LC0
 236      13050500 
 237 0108 97000000 		call	_Z14printStringMojPKc@plt
 237      E7800000 
 238              	.LVL3:
 239 0110 6F00407F 		j	.L70
 240              	.L6:
 241              	.LBE111:
 242              	.LBE162:
 243              	.LBB163:
  32:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 244              		.loc 1 32 9 is_stmt 1
 245              	.LBB164:
 246              	.LBB165:
 108:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 247              		.loc 2 108 5
 109:src/../h/riscv.hpp ****     return sepc;
 248              		.loc 2 109 5
GAS LISTING /tmp/ccM3nXtL.s 			page 14


 109:src/../h/riscv.hpp ****     return sepc;
 249              		.loc 2 109 64 is_stmt 0
 250              	#APP
 251              	# 109 "src/../h/riscv.hpp" 1
 252              		csrr a5, sepc
 253              	# 0 "" 2
 254              	#NO_APP
 255 0118 2334F4F6 		sd	a5,-152(s0)
 110:src/../h/riscv.hpp **** }
 256              		.loc 2 110 5 is_stmt 1
 110:src/../h/riscv.hpp **** }
 257              		.loc 2 110 12 is_stmt 0
 258 011c 833784F6 		ld	a5,-152(s0)
 259              	.LBE165:
 260              	.LBE164:
  32:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 261              		.loc 1 32 41
 262 0120 93874700 		addi	a5,a5,4
  32:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 263              		.loc 1 32 43
 264 0124 2338F4F2 		sd	a5,-208(s0)
  33:src/riscv.cpp ****         int volatile ret;
 265              		.loc 1 33 9 is_stmt 1
 266              	.LBB166:
 267              	.LBB167:
 181:src/../h/riscv.hpp **** 
 182:src/../h/riscv.hpp **** inline uint64 Riscv::r_sstatus()
 183:src/../h/riscv.hpp **** {
 184:src/../h/riscv.hpp ****     uint64 volatile sstatus;
 268              		.loc 2 184 5
 185:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 269              		.loc 2 185 5
 270              		.loc 2 185 76 is_stmt 0
 271              	#APP
 272              	# 185 "src/../h/riscv.hpp" 1
 186              	    return sstatus;
 273              		csrr a5, sstatus
 274              	# 0 "" 2
 275              	#NO_APP
 276 012c 2330F4F6 		sd	a5,-160(s0)
 277              		.loc 2 186 5 is_stmt 1
 278              		.loc 2 186 12 is_stmt 0
 279 0130 833704F6 		ld	a5,-160(s0)
 280              	.LBE167:
 281              	.LBE166:
  33:src/riscv.cpp ****         int volatile ret;
 282              		.loc 1 33 45
 283 0134 233CF4F2 		sd	a5,-200(s0)
  34:src/riscv.cpp ****         void volatile *ptr;
 284              		.loc 1 34 9 is_stmt 1
  35:src/riscv.cpp ****         char volatile retchar; // !!!!!!!!!!!!!!!!!!!!!!!!!!dodatko ako ne bude radilo
 285              		.loc 1 35 9
  36:src/riscv.cpp ****         switch (razlog) {
 286              		.loc 1 36 9
  37:src/riscv.cpp ****             //ALOKATOR
 287              		.loc 1 37 9
  37:src/riscv.cpp ****             //ALOKATOR
GAS LISTING /tmp/ccM3nXtL.s 			page 15


 288              		.loc 1 37 17 is_stmt 0
 289 0138 833784FA 		ld	a5,-88(s0)
  37:src/riscv.cpp ****             //ALOKATOR
 290              		.loc 1 37 9
 291 013c 13072004 		li	a4,66
 292 0140 6364F702 		bgtu	a5,a4,.L9
 293 0144 6380073E 		beqz	a5,.L10
 294 0148 636EF73C 		bgtu	a5,a4,.L10
 295 014c 93972700 		slli	a5,a5,2
 296 0150 17070000 		lla	a4,.L12
 296      13070700 
 297 0158 B387E700 		add	a5,a5,a4
 298 015c 83A70700 		lw	a5,0(a5)
 299 0160 B387E700 		add	a5,a5,a4
 300 0164 67800700 		jr	a5
 301              		.section	.rodata
 302              		.align	2
 303              		.align	2
 304              	.L12:
 305 0000 00000000 		.word	.L10-.L12
 306 0004 00000000 		.word	.L25-.L12
 307 0008 00000000 		.word	.L24-.L12
 308 000c 00000000 		.word	.L10-.L12
 309 0010 00000000 		.word	.L10-.L12
 310 0014 00000000 		.word	.L10-.L12
 311 0018 00000000 		.word	.L10-.L12
 312 001c 00000000 		.word	.L10-.L12
 313 0020 00000000 		.word	.L10-.L12
 314 0024 00000000 		.word	.L10-.L12
 315 0028 00000000 		.word	.L10-.L12
 316 002c 00000000 		.word	.L10-.L12
 317 0030 00000000 		.word	.L10-.L12
 318 0034 00000000 		.word	.L10-.L12
 319 0038 00000000 		.word	.L10-.L12
 320 003c 00000000 		.word	.L10-.L12
 321 0040 00000000 		.word	.L10-.L12
 322 0044 00000000 		.word	.L23-.L12
 323 0048 00000000 		.word	.L22-.L12
 324 004c 00000000 		.word	.L21-.L12
 325 0050 00000000 		.word	.L10-.L12
 326 0054 00000000 		.word	.L10-.L12
 327 0058 00000000 		.word	.L10-.L12
 328 005c 00000000 		.word	.L10-.L12
 329 0060 00000000 		.word	.L10-.L12
 330 0064 00000000 		.word	.L10-.L12
 331 0068 00000000 		.word	.L10-.L12
 332 006c 00000000 		.word	.L10-.L12
 333 0070 00000000 		.word	.L10-.L12
 334 0074 00000000 		.word	.L10-.L12
 335 0078 00000000 		.word	.L10-.L12
 336 007c 00000000 		.word	.L10-.L12
 337 0080 00000000 		.word	.L10-.L12
 338 0084 00000000 		.word	.L20-.L12
 339 0088 00000000 		.word	.L19-.L12
 340 008c 00000000 		.word	.L18-.L12
 341 0090 00000000 		.word	.L17-.L12
 342 0094 00000000 		.word	.L16-.L12
GAS LISTING /tmp/ccM3nXtL.s 			page 16


 343 0098 00000000 		.word	.L15-.L12
 344 009c 00000000 		.word	.L10-.L12
 345 00a0 00000000 		.word	.L10-.L12
 346 00a4 00000000 		.word	.L10-.L12
 347 00a8 00000000 		.word	.L10-.L12
 348 00ac 00000000 		.word	.L10-.L12
 349 00b0 00000000 		.word	.L10-.L12
 350 00b4 00000000 		.word	.L10-.L12
 351 00b8 00000000 		.word	.L10-.L12
 352 00bc 00000000 		.word	.L10-.L12
 353 00c0 00000000 		.word	.L10-.L12
 354 00c4 00000000 		.word	.L14-.L12
 355 00c8 00000000 		.word	.L10-.L12
 356 00cc 00000000 		.word	.L10-.L12
 357 00d0 00000000 		.word	.L10-.L12
 358 00d4 00000000 		.word	.L10-.L12
 359 00d8 00000000 		.word	.L10-.L12
 360 00dc 00000000 		.word	.L10-.L12
 361 00e0 00000000 		.word	.L10-.L12
 362 00e4 00000000 		.word	.L10-.L12
 363 00e8 00000000 		.word	.L10-.L12
 364 00ec 00000000 		.word	.L10-.L12
 365 00f0 00000000 		.word	.L10-.L12
 366 00f4 00000000 		.word	.L10-.L12
 367 00f8 00000000 		.word	.L10-.L12
 368 00fc 00000000 		.word	.L10-.L12
 369 0100 00000000 		.word	.L10-.L12
 370 0104 00000000 		.word	.L13-.L12
 371 0108 00000000 		.word	.L11-.L12
 372              		.text
 373              	.L9:
 374 0168 13070010 		li	a4,256
 375 016c 639CE73A 		bne	a5,a4,.L10
 376              	.L26:
 168:src/riscv.cpp ****                 while ((*((char *) CONSOLE_STATUS) & CONSOLE_TX_STATUS_BIT))
 377              		.loc 1 168 13 is_stmt 1
 169:src/riscv.cpp ****                 {
 378              		.loc 1 169 17
 169:src/riscv.cpp ****                 {
 379              		.loc 1 169 75
 169:src/riscv.cpp ****                 {
 380              		.loc 1 169 25 is_stmt 0
 381 0170 97070000 		la	a5,CONSOLE_STATUS
 381      83B70700 
 382 0178 83B70700 		ld	a5,0(a5)
 383 017c 83C70700 		lbu	a5,0(a5)
 169:src/riscv.cpp ****                 {
 384              		.loc 1 169 75
 385 0180 93F70702 		andi	a5,a5,32
 386 0184 63820704 		beqz	a5,.L27
 171:src/riscv.cpp ****                     *((char*) CONSOLE_TX_DATA) = kConsole::putOutputBuffer();
 387              		.loc 1 171 21 is_stmt 1
 171:src/riscv.cpp ****                     *((char*) CONSOLE_TX_DATA) = kConsole::putOutputBuffer();
 388              		.loc 1 171 48 is_stmt 0
 389 0188 97000000 		call	_ZN8kConsole13getOutputSizeEv@plt
 389      E7800000 
 390              	.LVL4:
GAS LISTING /tmp/ccM3nXtL.s 			page 17


 171:src/riscv.cpp ****                     *((char*) CONSOLE_TX_DATA) = kConsole::putOutputBuffer();
 391              		.loc 1 171 21
 392 0190 635CA002 		blez	a0,.L27
 172:src/riscv.cpp ****                 }
 393              		.loc 1 172 21 is_stmt 1
 394 0194 97070000 		la	a5,CONSOLE_TX_DATA
 394      83B70700 
 395 019c 83B40700 		ld	s1,0(a5)
 172:src/riscv.cpp ****                 }
 396              		.loc 1 172 75 is_stmt 0
 397 01a0 97000000 		call	_ZN8kConsole15putOutputBufferEv@plt
 397      E7800000 
 398              	.LVL5:
 172:src/riscv.cpp ****                 }
 399              		.loc 1 172 48
 400 01a8 2380A400 		sb	a0,0(s1)
 169:src/riscv.cpp ****                 {
 401              		.loc 1 169 17
 402 01ac 6FF05FFC 		j	.L26
 403              	.L25:
  39:src/riscv.cpp ****                 //printString("Sistem Malloc\n");
 404              		.loc 1 39 13 is_stmt 1
  41:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" : : "r"(ptr));
 405              		.loc 1 41 17
  41:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" : : "r"(ptr));
 406              		.loc 1 41 43 is_stmt 0
 407 01b0 033504FA 		ld	a0,-96(s0)
  41:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" : : "r"(ptr));
 408              		.loc 1 41 41
 409 01b4 13156500 		slli	a0,a0,6
 410 01b8 97000000 		call	_ZN9Allocator7_mallocEm@plt
 410      E7800000 
 411              	.LVL6:
  42:src/riscv.cpp ****                 __asm__ volatile ("sw t0, 80(x8)");
 412              		.loc 1 42 17 is_stmt 1
  42:src/riscv.cpp ****                 __asm__ volatile ("sw t0, 80(x8)");
 413              		.loc 1 42 59 is_stmt 0
 414              	#APP
 415              	# 42 "src/riscv.cpp" 1
  43:src/riscv.cpp ****                 break;
 416              		mv t0, a0
 417              	# 0 "" 2
 418              		.loc 1 43 17 is_stmt 1
  43:src/riscv.cpp ****                 break;
 419              		.loc 1 43 51 is_stmt 0
 420              	# 43 "src/riscv.cpp" 1
  44:src/riscv.cpp ****             case MEM_FREE:
 421              		sw t0, 80(x8)
 422              	# 0 "" 2
 423              		.loc 1 44 17 is_stmt 1
 424              	.LVL7:
 425              	#NO_APP
 426              	.L27:
 180:src/riscv.cpp ****         w_sepc(sepc);
 427              		.loc 1 180 9
 180:src/riscv.cpp ****         w_sepc(sepc);
 428              		.loc 1 180 18 is_stmt 0
GAS LISTING /tmp/ccM3nXtL.s 			page 18


 429 01c8 833784F3 		ld	a5,-200(s0)
 430              	.LVL8:
 431              	.LBB168:
 432              	.LBB169:
 187:src/../h/riscv.hpp **** }
 188:src/../h/riscv.hpp **** 
 189:src/../h/riscv.hpp **** inline void Riscv::w_sstatus(uint64 sstatus)
 190:src/../h/riscv.hpp **** {
 191:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sstatus, %[sstatus]" : : [sstatus] "r"(sstatus));
 433              		.loc 2 191 5 is_stmt 1
 434              		.loc 2 191 77 is_stmt 0
 435              	#APP
 436              	# 191 "src/../h/riscv.hpp" 1
 192              	}
 437              		csrw sstatus, a5
 438              	# 0 "" 2
 439              	.LVL9:
 440              	#NO_APP
 441              	.LBE169:
 442              	.LBE168:
 181:src/riscv.cpp ****     }
 443              		.loc 1 181 9 is_stmt 1
 181:src/riscv.cpp ****     }
 444              		.loc 1 181 15 is_stmt 0
 445 01d0 833704F3 		ld	a5,-208(s0)
 446              	.LVL10:
 447              	.LBB170:
 448              	.LBB171:
 115:src/../h/riscv.hpp **** }
 449              		.loc 2 115 5 is_stmt 1
 115:src/../h/riscv.hpp **** }
 450              		.loc 2 115 65 is_stmt 0
 451              	#APP
 452              	# 115 "src/../h/riscv.hpp" 1
 453              		csrw sepc, a5
 454              	# 0 "" 2
 455              	.LVL11:
 456              	#NO_APP
 457              	.L5:
 458              	.LBE171:
 459              	.LBE170:
 460              	.LBE163:
 461              	.LBE177:
 305:src/riscv.cpp ****             while ((*((char *) CONSOLE_STATUS) & CONSOLE_TX_STATUS_BIT))
 306:src/riscv.cpp ****             {
 307:src/riscv.cpp ****                 if (kConsole::getOutputSize() <= 0) {break;}
 308:src/riscv.cpp ****                 *((char*) CONSOLE_TX_DATA) = kConsole::putOutputBuffer();
 309:src/riscv.cpp ****             }
 310:src/riscv.cpp ****             __asm__ volatile ("li t0, 0x5555");
 311:src/riscv.cpp ****             __asm__ volatile ("li t1, 0x100000");
 312:src/riscv.cpp ****             __asm__ volatile ("sw t0, 0(t1)");
 313:src/riscv.cpp ****         }
 314:src/riscv.cpp ****     }
 315:src/riscv.cpp ****     //printString("izasao iz handlera");
 316:src/riscv.cpp **** }...
 462              		.loc 1 316 1
 463 01d8 8330810D 		ld	ra,216(sp)
GAS LISTING /tmp/ccM3nXtL.s 			page 19


 464              		.cfi_remember_state
 465              		.cfi_restore 1
 466 01dc 0334010D 		ld	s0,208(sp)
 467              		.cfi_restore 8
 468              		.cfi_def_cfa 2, 224
 469 01e0 8334810C 		ld	s1,200(sp)
 470              		.cfi_restore 9
 471 01e4 0339010C 		ld	s2,192(sp)
 472              		.cfi_restore 18
 473 01e8 8339810B 		ld	s3,184(sp)
 474              		.cfi_restore 19
 475 01ec 033A010B 		ld	s4,176(sp)
 476              		.cfi_restore 20
 477 01f0 833A810A 		ld	s5,168(sp)
 478              		.cfi_restore 21
 479 01f4 033B010A 		ld	s6,160(sp)
 480              		.cfi_restore 22
 481 01f8 833B8109 		ld	s7,152(sp)
 482              		.cfi_restore 23
 483 01fc 033C0109 		ld	s8,144(sp)
 484              		.cfi_restore 24
 485 0200 1301010E 		addi	sp,sp,224
 486              		.cfi_def_cfa_offset 0
 487 0204 67800000 		jr	ra
 488              	.L24:
 489              		.cfi_restore_state
 490              	.LBB178:
 491              	.LBB174:
  45:src/riscv.cpp ****             case MEM_FREE:
 492              		.loc 1 45 13 is_stmt 1
  46:src/riscv.cpp ****                 Allocator::_mem_free((void*) p1);
 493              		.loc 1 46 17
  46:src/riscv.cpp ****                 Allocator::_mem_free((void*) p1);
 494              		.loc 1 46 37 is_stmt 0
 495 0208 033504FA 		ld	a0,-96(s0)
 496 020c 97000000 		call	_ZN9Allocator9_mem_freeEPv@plt
 496      E7800000 
 497              	.LVL12:
  47:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" : : "r"(ret));
 498              		.loc 1 47 17 is_stmt 1
  47:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" : : "r"(ret));
 499              		.loc 1 47 54 is_stmt 0
 500 0214 8327C4F2 		lw	a5,-212(s0)
  47:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" : : "r"(ret));
 501              		.loc 1 47 59
 502              	#APP
 503              	# 47 "src/riscv.cpp" 1
  48:src/riscv.cpp ****                 __asm__ volatile ("sw t0, 80(x8)");
 504              		mv t0, a5
 505              	# 0 "" 2
 506              		.loc 1 48 17 is_stmt 1
  48:src/riscv.cpp ****                 __asm__ volatile ("sw t0, 80(x8)");
 507              		.loc 1 48 51 is_stmt 0
 508              	# 48 "src/riscv.cpp" 1
  49:src/riscv.cpp ****                 break;
 509              		sw t0, 80(x8)
 510              	# 0 "" 2
GAS LISTING /tmp/ccM3nXtL.s 			page 20


 511              		.loc 1 49 17 is_stmt 1
 512              	#NO_APP
 513 0220 6FF09FFA 		j	.L27
 514              	.L23:
  51:src/riscv.cpp ****             case THREAD_CREATE:
 515              		.loc 1 51 13
  52:src/riscv.cpp ****                 if (!(TCB::thread_create((TCB**)p1,(TCB::Body)p2,(void*)p3,(uint64*)p4))) {
 516              		.loc 1 52 17
  52:src/riscv.cpp ****                 if (!(TCB::thread_create((TCB**)p1,(TCB::Body)p2,(void*)p3,(uint64*)p4))) {
 517              		.loc 1 52 41 is_stmt 0
 518 0224 033504FA 		ld	a0,-96(s0)
 519 0228 833584F9 		ld	a1,-104(s0)
 520 022c 033604F9 		ld	a2,-112(s0)
 521 0230 833684F8 		ld	a3,-120(s0)
 522 0234 97000000 		call	_ZN3TCB13thread_createEPPS_PFvPvES2_Pm@plt
 522      E7800000 
 523              	.LVL13:
  52:src/riscv.cpp ****                 if (!(TCB::thread_create((TCB**)p1,(TCB::Body)p2,(void*)p3,(uint64*)p4))) {
 524              		.loc 1 52 17
 525 023c 631E0500 		bnez	a0,.L28
  53:src/riscv.cpp ****                     if (TCB::running != nullptr)
 526              		.loc 1 53 21 is_stmt 1
  53:src/riscv.cpp ****                     if (TCB::running != nullptr)
 527              		.loc 1 53 38 is_stmt 0
 528 0240 97070000 		la	a5,_ZN3TCB7runningE
 528      83B70700 
 529 0248 83B70700 		ld	a5,0(a5)
  53:src/riscv.cpp ****                     if (TCB::running != nullptr)
 530              		.loc 1 53 21
 531 024c E38E07F6 		beqz	a5,.L27
  54:src/riscv.cpp ****                     {TCB::running->retVal = 0;}
 532              		.loc 1 54 22 is_stmt 1
  54:src/riscv.cpp ****                     {TCB::running->retVal = 0;}
 533              		.loc 1 54 43 is_stmt 0
 534 0250 23A40706 		sw	zero,104(a5)
 535 0254 6FF05FF7 		j	.L27
 536              	.L28:
  57:src/riscv.cpp ****                     if (TCB::running != nullptr){
 537              		.loc 1 57 21 is_stmt 1
  57:src/riscv.cpp ****                     if (TCB::running != nullptr){
 538              		.loc 1 57 38 is_stmt 0
 539 0258 97070000 		la	a5,_ZN3TCB7runningE
 539      83B70700 
 540 0260 83B70700 		ld	a5,0(a5)
  57:src/riscv.cpp ****                     if (TCB::running != nullptr){
 541              		.loc 1 57 21
 542 0264 E38207F6 		beqz	a5,.L27
  58:src/riscv.cpp ****                     TCB::running->retVal = -1;}
 543              		.loc 1 58 21 is_stmt 1
  58:src/riscv.cpp ****                     TCB::running->retVal = -1;}
 544              		.loc 1 58 42 is_stmt 0
 545 0268 1307F0FF 		li	a4,-1
 546 026c 23A4E706 		sw	a4,104(a5)
 547 0270 6FF09FF5 		j	.L27
 548              	.L22:
  62:src/riscv.cpp ****             case THREAD_EXIT:
 549              		.loc 1 62 13 is_stmt 1
GAS LISTING /tmp/ccM3nXtL.s 			page 21


  63:src/riscv.cpp ****                 TCB::running->setFinished(true);
 550              		.loc 1 63 17
  63:src/riscv.cpp ****                 TCB::running->setFinished(true);
 551              		.loc 1 63 42 is_stmt 0
 552 0274 97070000 		la	a5,_ZN3TCB7runningE
 552      83B70700 
 553 027c 83B70700 		ld	a5,0(a5)
 554              	.LVL14:
 555              	.LBB172:
 556              	.LBB173:
 557              		.file 3 "src/../h/../h/../h/../h/../h/tcb.hpp"
   1:src/../h/../h/../h/../h/../h/tcb.hpp **** //
   2:src/../h/../h/../h/../h/../h/tcb.hpp **** // Created by os on 5/15/24.
   3:src/../h/../h/../h/../h/../h/tcb.hpp **** //
   4:src/../h/../h/../h/../h/../h/tcb.hpp **** 
   5:src/../h/../h/../h/../h/../h/tcb.hpp **** #ifndef PROJECT_BASE_TCB_HPP
   6:src/../h/../h/../h/../h/../h/tcb.hpp **** #define PROJECT_BASE_TCB_HPP
   7:src/../h/../h/../h/../h/../h/tcb.hpp **** #include "../lib/hw.h"
   8:src/../h/../h/../h/../h/../h/tcb.hpp **** #include "../h/scheduler.hpp"
   9:src/../h/../h/../h/../h/../h/tcb.hpp **** #include "../h/tipovi.hpp"
  10:src/../h/../h/../h/../h/../h/tcb.hpp **** #include "../h/sem.hpp"
  11:src/../h/../h/../h/../h/../h/tcb.hpp **** #include "../h/Allocator.hpp"
  12:src/../h/../h/../h/../h/../h/tcb.hpp **** // dio preuzet sa Teamsa
  13:src/../h/../h/../h/../h/../h/tcb.hpp **** class TCB
  14:src/../h/../h/../h/../h/../h/tcb.hpp **** {
  15:src/../h/../h/../h/../h/../h/tcb.hpp **** public:
  16:src/../h/../h/../h/../h/../h/tcb.hpp ****     static int putcP;
  17:src/../h/../h/../h/../h/../h/tcb.hpp **** 
  18:src/../h/../h/../h/../h/../h/tcb.hpp ****     bool isFinished() const { return finished; }
  19:src/../h/../h/../h/../h/../h/tcb.hpp **** 
  20:src/../h/../h/../h/../h/../h/tcb.hpp ****     void setFinished(bool value) { finished = value; }
 558              		.loc 3 20 36 is_stmt 1
 559              		.loc 3 20 45 is_stmt 0
 560 0280 13071000 		li	a4,1
 561 0284 2384E702 		sb	a4,40(a5)
 562              	.LVL15:
 563              	.LBE173:
 564              	.LBE172:
  64:src/riscv.cpp ****                 TCB::dispatch();
 565              		.loc 1 64 17 is_stmt 1
  64:src/riscv.cpp ****                 TCB::dispatch();
 566              		.loc 1 64 30 is_stmt 0
 567 0288 97000000 		call	_ZN3TCB8dispatchEv@plt
 567      E7800000 
 568              	.LVL16:
  65:src/riscv.cpp ****                 break;
 569              		.loc 1 65 17 is_stmt 1
 570 0290 6FF09FF3 		j	.L27
 571              	.L21:
  67:src/riscv.cpp ****             case THREAD_DISPATCH:
 572              		.loc 1 67 13
  68:src/riscv.cpp ****                 TCB::timeSliceCounter = 0;
 573              		.loc 1 68 17
  68:src/riscv.cpp ****                 TCB::timeSliceCounter = 0;
 574              		.loc 1 68 39 is_stmt 0
 575 0294 97070000 		la	a5,_ZN3TCB16timeSliceCounterE
 575      83B70700 
GAS LISTING /tmp/ccM3nXtL.s 			page 22


 576 029c 23B00700 		sd	zero,0(a5)
  69:src/riscv.cpp ****                 TCB::dispatch();
 577              		.loc 1 69 17 is_stmt 1
  69:src/riscv.cpp ****                 TCB::dispatch();
 578              		.loc 1 69 30 is_stmt 0
 579 02a0 97000000 		call	_ZN3TCB8dispatchEv@plt
 579      E7800000 
 580              	.LVL17:
  70:src/riscv.cpp ****                 break;
 581              		.loc 1 70 17 is_stmt 1
 582 02a8 6FF01FF2 		j	.L27
 583              	.L14:
  71:src/riscv.cpp ****             case TIME_SLEEP:
 584              		.loc 1 71 13
  72:src/riscv.cpp ****                 TCB::putToSleep((time_t) p1);
 585              		.loc 1 72 17
  72:src/riscv.cpp ****                 TCB::putToSleep((time_t) p1);
 586              		.loc 1 72 32 is_stmt 0
 587 02ac 033504FA 		ld	a0,-96(s0)
 588 02b0 97000000 		call	_ZN3TCB10putToSleepEm@plt
 588      E7800000 
 589              	.LVL18:
  73:src/riscv.cpp ****                 break;
 590              		.loc 1 73 17 is_stmt 1
 591 02b8 6FF01FF1 		j	.L27
 592              	.L20:
  77:src/riscv.cpp ****             case SEM_OPEN:
 593              		.loc 1 77 13
  79:src/riscv.cpp ****                 if (!kSemaphore::openSem((kSemaphore**)p1, (uint64) p2)) {
 594              		.loc 1 79 17
  79:src/riscv.cpp ****                 if (!kSemaphore::openSem((kSemaphore**)p1, (uint64) p2)) {
 595              		.loc 1 79 41 is_stmt 0
 596 02bc 033504FA 		ld	a0,-96(s0)
 597 02c0 833584F9 		ld	a1,-104(s0)
 598 02c4 9B850500 		sext.w	a1,a1
 599 02c8 97000000 		call	_ZN10kSemaphore7openSemEPPS_j@plt
 599      E7800000 
 600              	.LVL19:
  79:src/riscv.cpp ****                 if (!kSemaphore::openSem((kSemaphore**)p1, (uint64) p2)) {
 601              		.loc 1 79 17
 602 02d0 631E0500 		bnez	a0,.L29
  80:src/riscv.cpp ****                     if (TCB::running != nullptr)
 603              		.loc 1 80 21 is_stmt 1
  80:src/riscv.cpp ****                     if (TCB::running != nullptr)
 604              		.loc 1 80 38 is_stmt 0
 605 02d4 97070000 		la	a5,_ZN3TCB7runningE
 605      83B70700 
 606 02dc 83B70700 		ld	a5,0(a5)
  80:src/riscv.cpp ****                     if (TCB::running != nullptr)
 607              		.loc 1 80 21
 608 02e0 E38407EE 		beqz	a5,.L27
  81:src/riscv.cpp ****                     {TCB::running->retVal = 0;}
 609              		.loc 1 81 22 is_stmt 1
  81:src/riscv.cpp ****                     {TCB::running->retVal = 0;}
 610              		.loc 1 81 43 is_stmt 0
 611 02e4 23A40706 		sw	zero,104(a5)
 612 02e8 6FF01FEE 		j	.L27
GAS LISTING /tmp/ccM3nXtL.s 			page 23


 613              	.L29:
  84:src/riscv.cpp ****                     if (TCB::running != nullptr)
 614              		.loc 1 84 21 is_stmt 1
  84:src/riscv.cpp ****                     if (TCB::running != nullptr)
 615              		.loc 1 84 38 is_stmt 0
 616 02ec 97070000 		la	a5,_ZN3TCB7runningE
 616      83B70700 
 617 02f4 83B70700 		ld	a5,0(a5)
  84:src/riscv.cpp ****                     if (TCB::running != nullptr)
 618              		.loc 1 84 21
 619 02f8 E38807EC 		beqz	a5,.L27
  85:src/riscv.cpp ****                     {TCB::running->retVal = -1;}
 620              		.loc 1 85 22 is_stmt 1
  85:src/riscv.cpp ****                     {TCB::running->retVal = -1;}
 621              		.loc 1 85 43 is_stmt 0
 622 02fc 1307F0FF 		li	a4,-1
 623 0300 23A4E706 		sw	a4,104(a5)
 624 0304 6FF05FEC 		j	.L27
 625              	.L19:
  88:src/riscv.cpp ****             case SEM_CLOSE:
 626              		.loc 1 88 13 is_stmt 1
  90:src/riscv.cpp ****                 if (!((kSemaphore*)p1)->closeSem()) {
 627              		.loc 1 90 17
  90:src/riscv.cpp ****                 if (!((kSemaphore*)p1)->closeSem()) {
 628              		.loc 1 90 49 is_stmt 0
 629 0308 033504FA 		ld	a0,-96(s0)
 630 030c 97000000 		call	_ZN10kSemaphore8closeSemEv@plt
 630      E7800000 
 631              	.LVL20:
  90:src/riscv.cpp ****                 if (!((kSemaphore*)p1)->closeSem()) {
 632              		.loc 1 90 17
 633 0314 631E0500 		bnez	a0,.L30
  91:src/riscv.cpp ****                     if (TCB::running != nullptr)
 634              		.loc 1 91 21 is_stmt 1
  91:src/riscv.cpp ****                     if (TCB::running != nullptr)
 635              		.loc 1 91 38 is_stmt 0
 636 0318 97070000 		la	a5,_ZN3TCB7runningE
 636      83B70700 
 637 0320 83B70700 		ld	a5,0(a5)
  91:src/riscv.cpp ****                     if (TCB::running != nullptr)
 638              		.loc 1 91 21
 639 0324 E38207EA 		beqz	a5,.L27
  92:src/riscv.cpp ****                     {TCB::running->retVal = 0;}
 640              		.loc 1 92 22 is_stmt 1
  92:src/riscv.cpp ****                     {TCB::running->retVal = 0;}
 641              		.loc 1 92 43 is_stmt 0
 642 0328 23A40706 		sw	zero,104(a5)
 643 032c 6FF0DFE9 		j	.L27
 644              	.L30:
  95:src/riscv.cpp ****                     if (TCB::running != nullptr)
 645              		.loc 1 95 21 is_stmt 1
  95:src/riscv.cpp ****                     if (TCB::running != nullptr)
 646              		.loc 1 95 38 is_stmt 0
 647 0330 97070000 		la	a5,_ZN3TCB7runningE
 647      83B70700 
 648 0338 83B70700 		ld	a5,0(a5)
  95:src/riscv.cpp ****                     if (TCB::running != nullptr)
GAS LISTING /tmp/ccM3nXtL.s 			page 24


 649              		.loc 1 95 21
 650 033c E38607E8 		beqz	a5,.L27
  96:src/riscv.cpp ****                     {TCB::running->retVal = -1;}
 651              		.loc 1 96 22 is_stmt 1
  96:src/riscv.cpp ****                     {TCB::running->retVal = -1;}
 652              		.loc 1 96 43 is_stmt 0
 653 0340 1307F0FF 		li	a4,-1
 654 0344 23A4E706 		sw	a4,104(a5)
 655 0348 6FF01FE8 		j	.L27
 656              	.L18:
  99:src/riscv.cpp ****             case SEM_WAIT:
 657              		.loc 1 99 13 is_stmt 1
 101:src/riscv.cpp ****                 if (!((kSemaphore*)p1)->wait()){
 658              		.loc 1 101 17
 101:src/riscv.cpp ****                 if (!((kSemaphore*)p1)->wait()){
 659              		.loc 1 101 45 is_stmt 0
 660 034c 033504FA 		ld	a0,-96(s0)
 661 0350 97000000 		call	_ZN10kSemaphore4waitEv@plt
 661      E7800000 
 662              	.LVL21:
 101:src/riscv.cpp ****                 if (!((kSemaphore*)p1)->wait()){
 663              		.loc 1 101 17
 664 0358 631E0500 		bnez	a0,.L31
 102:src/riscv.cpp ****                     if (TCB::running != nullptr)
 665              		.loc 1 102 21 is_stmt 1
 102:src/riscv.cpp ****                     if (TCB::running != nullptr)
 666              		.loc 1 102 38 is_stmt 0
 667 035c 97070000 		la	a5,_ZN3TCB7runningE
 667      83B70700 
 668 0364 83B70700 		ld	a5,0(a5)
 102:src/riscv.cpp ****                     if (TCB::running != nullptr)
 669              		.loc 1 102 21
 670 0368 E38007E6 		beqz	a5,.L27
 103:src/riscv.cpp ****                     {TCB::running->retVal = 0;}
 671              		.loc 1 103 22 is_stmt 1
 103:src/riscv.cpp ****                     {TCB::running->retVal = 0;}
 672              		.loc 1 103 43 is_stmt 0
 673 036c 23A40706 		sw	zero,104(a5)
 674 0370 6FF09FE5 		j	.L27
 675              	.L31:
 106:src/riscv.cpp ****                     if (TCB::running != nullptr)
 676              		.loc 1 106 21 is_stmt 1
 106:src/riscv.cpp ****                     if (TCB::running != nullptr)
 677              		.loc 1 106 38 is_stmt 0
 678 0374 97070000 		la	a5,_ZN3TCB7runningE
 678      83B70700 
 679 037c 83B70700 		ld	a5,0(a5)
 106:src/riscv.cpp ****                     if (TCB::running != nullptr)
 680              		.loc 1 106 21
 681 0380 E38407E4 		beqz	a5,.L27
 107:src/riscv.cpp ****                     {TCB::running->retVal = -1;}
 682              		.loc 1 107 22 is_stmt 1
 107:src/riscv.cpp ****                     {TCB::running->retVal = -1;}
 683              		.loc 1 107 43 is_stmt 0
 684 0384 1307F0FF 		li	a4,-1
 685 0388 23A4E706 		sw	a4,104(a5)
 686 038c 6FF0DFE3 		j	.L27
GAS LISTING /tmp/ccM3nXtL.s 			page 25


 687              	.L17:
 110:src/riscv.cpp ****             case SEM_SIGNAL:
 688              		.loc 1 110 13 is_stmt 1
 112:src/riscv.cpp ****                 if (!((kSemaphore*)p1)->signal()){
 689              		.loc 1 112 17
 112:src/riscv.cpp ****                 if (!((kSemaphore*)p1)->signal()){
 690              		.loc 1 112 47 is_stmt 0
 691 0390 033504FA 		ld	a0,-96(s0)
 692 0394 97000000 		call	_ZN10kSemaphore6signalEv@plt
 692      E7800000 
 693              	.LVL22:
 112:src/riscv.cpp ****                 if (!((kSemaphore*)p1)->signal()){
 694              		.loc 1 112 17
 695 039c 631E0500 		bnez	a0,.L32
 113:src/riscv.cpp ****                     if (TCB::running != nullptr)
 696              		.loc 1 113 21 is_stmt 1
 113:src/riscv.cpp ****                     if (TCB::running != nullptr)
 697              		.loc 1 113 38 is_stmt 0
 698 03a0 97070000 		la	a5,_ZN3TCB7runningE
 698      83B70700 
 699 03a8 83B70700 		ld	a5,0(a5)
 113:src/riscv.cpp ****                     if (TCB::running != nullptr)
 700              		.loc 1 113 21
 701 03ac E38E07E0 		beqz	a5,.L27
 114:src/riscv.cpp ****                     {TCB::running->retVal = 0;}
 702              		.loc 1 114 22 is_stmt 1
 114:src/riscv.cpp ****                     {TCB::running->retVal = 0;}
 703              		.loc 1 114 43 is_stmt 0
 704 03b0 23A40706 		sw	zero,104(a5)
 705 03b4 6FF05FE1 		j	.L27
 706              	.L32:
 117:src/riscv.cpp ****                     if (TCB::running != nullptr)
 707              		.loc 1 117 21 is_stmt 1
 117:src/riscv.cpp ****                     if (TCB::running != nullptr)
 708              		.loc 1 117 38 is_stmt 0
 709 03b8 97070000 		la	a5,_ZN3TCB7runningE
 709      83B70700 
 710 03c0 83B70700 		ld	a5,0(a5)
 117:src/riscv.cpp ****                     if (TCB::running != nullptr)
 711              		.loc 1 117 21
 712 03c4 E38207E0 		beqz	a5,.L27
 118:src/riscv.cpp ****                     {TCB::running->retVal = -1;}
 713              		.loc 1 118 22 is_stmt 1
 118:src/riscv.cpp ****                     {TCB::running->retVal = -1;}
 714              		.loc 1 118 43 is_stmt 0
 715 03c8 1307F0FF 		li	a4,-1
 716 03cc 23A4E706 		sw	a4,104(a5)
 717 03d0 6FF09FDF 		j	.L27
 718              	.L15:
 121:src/riscv.cpp ****             case SEM_TRYWAIT:
 719              		.loc 1 121 13 is_stmt 1
 122:src/riscv.cpp ****                 ret = ((kSemaphore*)p1)->tryWait();
 720              		.loc 1 122 17
 122:src/riscv.cpp ****                 ret = ((kSemaphore*)p1)->tryWait();
 721              		.loc 1 122 49 is_stmt 0
 722 03d4 033504FA 		ld	a0,-96(s0)
 723 03d8 97000000 		call	_ZN10kSemaphore7tryWaitEv@plt
GAS LISTING /tmp/ccM3nXtL.s 			page 26


 723      E7800000 
 724              	.LVL23:
 122:src/riscv.cpp ****                 ret = ((kSemaphore*)p1)->tryWait();
 725              		.loc 1 122 21
 726 03e0 2326A4F2 		sw	a0,-212(s0)
 123:src/riscv.cpp ****                 if (!ret) {
 727              		.loc 1 123 17 is_stmt 1
 123:src/riscv.cpp ****                 if (!ret) {
 728              		.loc 1 123 21 is_stmt 0
 729 03e4 8327C4F2 		lw	a5,-212(s0)
 730 03e8 9B870700 		sext.w	a5,a5
 123:src/riscv.cpp ****                 if (!ret) {
 731              		.loc 1 123 17
 732 03ec 639E0700 		bnez	a5,.L33
 124:src/riscv.cpp ****                     if (TCB::running != nullptr) {
 733              		.loc 1 124 21 is_stmt 1
 124:src/riscv.cpp ****                     if (TCB::running != nullptr) {
 734              		.loc 1 124 38 is_stmt 0
 735 03f0 97070000 		la	a5,_ZN3TCB7runningE
 735      83B70700 
 736 03f8 83B70700 		ld	a5,0(a5)
 124:src/riscv.cpp ****                     if (TCB::running != nullptr) {
 737              		.loc 1 124 21
 738 03fc E38607DC 		beqz	a5,.L27
 125:src/riscv.cpp ****                         TCB::running->retVal = 0;
 739              		.loc 1 125 25 is_stmt 1
 125:src/riscv.cpp ****                         TCB::running->retVal = 0;
 740              		.loc 1 125 46 is_stmt 0
 741 0400 23A40706 		sw	zero,104(a5)
 742 0404 6FF05FDC 		j	.L27
 743              	.L33:
 129:src/riscv.cpp ****                     if (TCB::running != nullptr) {
 744              		.loc 1 129 21 is_stmt 1
 129:src/riscv.cpp ****                     if (TCB::running != nullptr) {
 745              		.loc 1 129 38 is_stmt 0
 746 0408 97070000 		la	a5,_ZN3TCB7runningE
 746      83B70700 
 747 0410 03B70700 		ld	a4,0(a5)
 129:src/riscv.cpp ****                     if (TCB::running != nullptr) {
 748              		.loc 1 129 21
 749 0414 E30A07DA 		beqz	a4,.L27
 130:src/riscv.cpp ****                         if (ret == 1) {
 750              		.loc 1 130 25 is_stmt 1
 130:src/riscv.cpp ****                         if (ret == 1) {
 751              		.loc 1 130 33 is_stmt 0
 752 0418 8327C4F2 		lw	a5,-212(s0)
 753 041c 9B870700 		sext.w	a5,a5
 130:src/riscv.cpp ****                         if (ret == 1) {
 754              		.loc 1 130 25
 755 0420 93061000 		li	a3,1
 756 0424 6380D702 		beq	a5,a3,.L78
 757              	.L34:
 133:src/riscv.cpp ****                         if (ret == -1) {
 758              		.loc 1 133 25 is_stmt 1
 133:src/riscv.cpp ****                         if (ret == -1) {
 759              		.loc 1 133 33 is_stmt 0
 760 0428 8327C4F2 		lw	a5,-212(s0)
GAS LISTING /tmp/ccM3nXtL.s 			page 27


 761 042c 9B870700 		sext.w	a5,a5
 133:src/riscv.cpp ****                         if (ret == -1) {
 762              		.loc 1 133 25
 763 0430 9306F0FF 		li	a3,-1
 764 0434 E39AD7D8 		bne	a5,a3,.L27
 134:src/riscv.cpp ****                             TCB::running->retVal = -1;
 765              		.loc 1 134 29 is_stmt 1
 134:src/riscv.cpp ****                             TCB::running->retVal = -1;
 766              		.loc 1 134 50 is_stmt 0
 767 0438 9307F0FF 		li	a5,-1
 768 043c 2324F706 		sw	a5,104(a4)
 769 0440 6FF09FD8 		j	.L27
 770              	.L78:
 131:src/riscv.cpp ****                             TCB::running->retVal = 1;
 771              		.loc 1 131 29 is_stmt 1
 131:src/riscv.cpp ****                             TCB::running->retVal = 1;
 772              		.loc 1 131 50 is_stmt 0
 773 0444 93071000 		li	a5,1
 774 0448 2324F706 		sw	a5,104(a4)
 775 044c 6FF0DFFD 		j	.L34
 776              	.L16:
 139:src/riscv.cpp ****             case SEM_TIMEDWAIT:
 777              		.loc 1 139 13 is_stmt 1
 140:src/riscv.cpp ****                 ret = ((kSemaphore*)p1)->timedWait((time_t) p2);
 778              		.loc 1 140 17
 140:src/riscv.cpp ****                 ret = ((kSemaphore*)p1)->timedWait((time_t) p2);
 779              		.loc 1 140 51 is_stmt 0
 780 0450 033504FA 		ld	a0,-96(s0)
 781 0454 833584F9 		ld	a1,-104(s0)
 782 0458 97000000 		call	_ZN10kSemaphore9timedWaitEm@plt
 782      E7800000 
 783              	.LVL24:
 140:src/riscv.cpp ****                 ret = ((kSemaphore*)p1)->timedWait((time_t) p2);
 784              		.loc 1 140 21
 785 0460 2326A4F2 		sw	a0,-212(s0)
 141:src/riscv.cpp ****                 if (!ret) {
 786              		.loc 1 141 17 is_stmt 1
 141:src/riscv.cpp ****                 if (!ret) {
 787              		.loc 1 141 21 is_stmt 0
 788 0464 8327C4F2 		lw	a5,-212(s0)
 789 0468 9B870700 		sext.w	a5,a5
 141:src/riscv.cpp ****                 if (!ret) {
 790              		.loc 1 141 17
 791 046c 639E0700 		bnez	a5,.L35
 142:src/riscv.cpp ****                     if (TCB::running != nullptr) {
 792              		.loc 1 142 21 is_stmt 1
 142:src/riscv.cpp ****                     if (TCB::running != nullptr) {
 793              		.loc 1 142 38 is_stmt 0
 794 0470 97070000 		la	a5,_ZN3TCB7runningE
 794      83B70700 
 795 0478 83B70700 		ld	a5,0(a5)
 142:src/riscv.cpp ****                     if (TCB::running != nullptr) {
 796              		.loc 1 142 21
 797 047c E38607D4 		beqz	a5,.L27
 143:src/riscv.cpp ****                         TCB::running->retVal = 0;
 798              		.loc 1 143 25 is_stmt 1
 143:src/riscv.cpp ****                         TCB::running->retVal = 0;
GAS LISTING /tmp/ccM3nXtL.s 			page 28


 799              		.loc 1 143 46 is_stmt 0
 800 0480 23A40706 		sw	zero,104(a5)
 801 0484 6FF05FD4 		j	.L27
 802              	.L35:
 147:src/riscv.cpp ****                     if (TCB::running != nullptr) {
 803              		.loc 1 147 21 is_stmt 1
 147:src/riscv.cpp ****                     if (TCB::running != nullptr) {
 804              		.loc 1 147 38 is_stmt 0
 805 0488 97070000 		la	a5,_ZN3TCB7runningE
 805      83B70700 
 806 0490 03B70700 		ld	a4,0(a5)
 147:src/riscv.cpp ****                     if (TCB::running != nullptr) {
 807              		.loc 1 147 21
 808 0494 E30A07D2 		beqz	a4,.L27
 148:src/riscv.cpp ****                         if (ret == -1) {
 809              		.loc 1 148 25 is_stmt 1
 148:src/riscv.cpp ****                         if (ret == -1) {
 810              		.loc 1 148 33 is_stmt 0
 811 0498 8327C4F2 		lw	a5,-212(s0)
 812 049c 9B870700 		sext.w	a5,a5
 148:src/riscv.cpp ****                         if (ret == -1) {
 813              		.loc 1 148 25
 814 04a0 9306F0FF 		li	a3,-1
 815 04a4 6380D702 		beq	a5,a3,.L79
 816              	.L36:
 151:src/riscv.cpp ****                         if (ret == -2) {
 817              		.loc 1 151 25 is_stmt 1
 151:src/riscv.cpp ****                         if (ret == -2) {
 818              		.loc 1 151 33 is_stmt 0
 819 04a8 8327C4F2 		lw	a5,-212(s0)
 820 04ac 9B870700 		sext.w	a5,a5
 151:src/riscv.cpp ****                         if (ret == -2) {
 821              		.loc 1 151 25
 822 04b0 9306E0FF 		li	a3,-2
 823 04b4 E39AD7D0 		bne	a5,a3,.L27
 152:src/riscv.cpp ****                             TCB::running->retVal = -2;
 824              		.loc 1 152 29 is_stmt 1
 152:src/riscv.cpp ****                             TCB::running->retVal = -2;
 825              		.loc 1 152 50 is_stmt 0
 826 04b8 9307E0FF 		li	a5,-2
 827 04bc 2324F706 		sw	a5,104(a4)
 828 04c0 6FF09FD0 		j	.L27
 829              	.L79:
 149:src/riscv.cpp ****                             TCB::running->retVal = -1;
 830              		.loc 1 149 29 is_stmt 1
 149:src/riscv.cpp ****                             TCB::running->retVal = -1;
 831              		.loc 1 149 50 is_stmt 0
 832 04c4 9307F0FF 		li	a5,-1
 833 04c8 2324F706 		sw	a5,104(a4)
 834 04cc 6FF0DFFD 		j	.L36
 835              	.L11:
 158:src/riscv.cpp ****             case PUTC:
 836              		.loc 1 158 13 is_stmt 1
 159:src/riscv.cpp ****                 kConsole::kputc((char)p1);
 837              		.loc 1 159 17
 159:src/riscv.cpp ****                 kConsole::kputc((char)p1);
 838              		.loc 1 159 32 is_stmt 0
GAS LISTING /tmp/ccM3nXtL.s 			page 29


 839 04d0 033504FA 		ld	a0,-96(s0)
 840 04d4 1375F50F 		andi	a0,a0,0xff
 841 04d8 97000000 		call	_ZN8kConsole5kputcEc@plt
 841      E7800000 
 842              	.LVL25:
 160:src/riscv.cpp ****                 if ((char) p1 == '\r') {
 843              		.loc 1 160 17 is_stmt 1
 160:src/riscv.cpp ****                 if ((char) p1 == '\r') {
 844              		.loc 1 160 31 is_stmt 0
 845 04e0 833704FA 		ld	a5,-96(s0)
 846 04e4 93F7F70F 		andi	a5,a5,0xff
 160:src/riscv.cpp ****                 if ((char) p1 == '\r') {
 847              		.loc 1 160 17
 848 04e8 1307D000 		li	a4,13
 849 04ec E39EE7CC 		bne	a5,a4,.L27
 161:src/riscv.cpp ****                     kConsole::kputc('\n');
 850              		.loc 1 161 21 is_stmt 1
 161:src/riscv.cpp ****                     kConsole::kputc('\n');
 851              		.loc 1 161 36 is_stmt 0
 852 04f0 1305A000 		li	a0,10
 853 04f4 97000000 		call	_ZN8kConsole5kputcEc@plt
 853      E7800000 
 854              	.LVL26:
 855 04fc 6FF0DFCC 		j	.L27
 856              	.L13:
 164:src/riscv.cpp ****             case GETC:
 857              		.loc 1 164 13 is_stmt 1
 165:src/riscv.cpp ****                 retchar =(char) kConsole::kgetc();
 858              		.loc 1 165 17
 165:src/riscv.cpp ****                 retchar =(char) kConsole::kgetc();
 859              		.loc 1 165 48 is_stmt 0
 860 0500 97000000 		call	_ZN8kConsole5kgetcEv@plt
 860      E7800000 
 861              	.LVL27:
 165:src/riscv.cpp ****                 retchar =(char) kConsole::kgetc();
 862              		.loc 1 165 25
 863 0508 A305A4F2 		sb	a0,-213(s0)
 166:src/riscv.cpp ****                 TCB::running->getcRetVal = retchar;
 864              		.loc 1 166 17 is_stmt 1
 166:src/riscv.cpp ****                 TCB::running->getcRetVal = retchar;
 865              		.loc 1 166 31 is_stmt 0
 866 050c 97070000 		la	a5,_ZN3TCB7runningE
 866      83B70700 
 867 0514 83B70700 		ld	a5,0(a5)
 166:src/riscv.cpp ****                 TCB::running->getcRetVal = retchar;
 868              		.loc 1 166 42
 869 0518 0347B4F2 		lbu	a4,-213(s0)
 870 051c 2386E706 		sb	a4,108(a5)
 167:src/riscv.cpp ****                 break;
 871              		.loc 1 167 17 is_stmt 1
 872 0520 6FF09FCA 		j	.L27
 873              	.L10:
 175:src/riscv.cpp ****             default:
 874              		.loc 1 175 13
 176:src/riscv.cpp ****                 TCB::timeSliceCounter = 0;
 875              		.loc 1 176 17
 176:src/riscv.cpp ****                 TCB::timeSliceCounter = 0;
GAS LISTING /tmp/ccM3nXtL.s 			page 30


 876              		.loc 1 176 39 is_stmt 0
 877 0524 97070000 		la	a5,_ZN3TCB16timeSliceCounterE
 877      83B70700 
 878 052c 23B00700 		sd	zero,0(a5)
 177:src/riscv.cpp ****                 TCB::dispatch();
 879              		.loc 1 177 17 is_stmt 1
 177:src/riscv.cpp ****                 TCB::dispatch();
 880              		.loc 1 177 30 is_stmt 0
 881 0530 97000000 		call	_ZN3TCB8dispatchEv@plt
 881      E7800000 
 882              	.LVL28:
 178:src/riscv.cpp ****                 break;
 883              		.loc 1 178 17 is_stmt 1
 884 0538 6FF01FC9 		j	.L27
 885              	.L7:
 886              	.LBE174:
 887              	.LBB175:
 888              	.LBB113:
 185:src/riscv.cpp ****         while ((*((char *) CONSOLE_STATUS) & CONSOLE_TX_STATUS_BIT))
 889              		.loc 1 185 9
 185:src/riscv.cpp ****         while ((*((char *) CONSOLE_STATUS) & CONSOLE_TX_STATUS_BIT))
 890              		.loc 1 185 67
 185:src/riscv.cpp ****         while ((*((char *) CONSOLE_STATUS) & CONSOLE_TX_STATUS_BIT))
 891              		.loc 1 185 17 is_stmt 0
 892 053c 97070000 		la	a5,CONSOLE_STATUS
 892      83B70700 
 893 0544 83B70700 		ld	a5,0(a5)
 894 0548 83C70700 		lbu	a5,0(a5)
 185:src/riscv.cpp ****         while ((*((char *) CONSOLE_STATUS) & CONSOLE_TX_STATUS_BIT))
 895              		.loc 1 185 67
 896 054c 93F70702 		andi	a5,a5,32
 897 0550 63860702 		beqz	a5,.L38
 187:src/riscv.cpp ****             if (kConsole::getOutputSize() <= 0) {break;}
 898              		.loc 1 187 13 is_stmt 1
 187:src/riscv.cpp ****             if (kConsole::getOutputSize() <= 0) {break;}
 899              		.loc 1 187 40 is_stmt 0
 900 0554 97000000 		call	_ZN8kConsole13getOutputSizeEv@plt
 900      E7800000 
 901              	.LVL29:
 187:src/riscv.cpp ****             if (kConsole::getOutputSize() <= 0) {break;}
 902              		.loc 1 187 13
 903 055c 6350A002 		blez	a0,.L38
 188:src/riscv.cpp ****             *((char*) CONSOLE_TX_DATA) = kConsole::putOutputBuffer();
 904              		.loc 1 188 13 is_stmt 1
 905 0560 97070000 		la	a5,CONSOLE_TX_DATA
 905      83B70700 
 906 0568 83B40700 		ld	s1,0(a5)
 188:src/riscv.cpp ****             *((char*) CONSOLE_TX_DATA) = kConsole::putOutputBuffer();
 907              		.loc 1 188 67 is_stmt 0
 908 056c 97000000 		call	_ZN8kConsole15putOutputBufferEv@plt
 908      E7800000 
 909              	.LVL30:
 188:src/riscv.cpp ****             *((char*) CONSOLE_TX_DATA) = kConsole::putOutputBuffer();
 910              		.loc 1 188 40
 911 0574 2380A400 		sb	a0,0(s1)
 185:src/riscv.cpp ****         while ((*((char *) CONSOLE_STATUS) & CONSOLE_TX_STATUS_BIT))
 912              		.loc 1 185 9
GAS LISTING /tmp/ccM3nXtL.s 			page 31


 913 0578 6FF05FFC 		j	.L7
 914              	.L38:
 190:src/riscv.cpp ****         mc_sip(SIP_SSIP);
 915              		.loc 1 190 9 is_stmt 1
 916              	.LVL31:
 917              	.LBB114:
 918              	.LBB115:
 157:src/../h/riscv.hpp **** }
 919              		.loc 2 157 5
 157:src/../h/riscv.hpp **** }
 920              		.loc 2 157 64 is_stmt 0
 921 057c 93072000 		li	a5,2
 922              	#APP
 923              	# 157 "src/../h/riscv.hpp" 1
 924              		csrc sip, a5
 925              	# 0 "" 2
 926              	.LVL32:
 927              	#NO_APP
 928              	.LBE115:
 929              	.LBE114:
 193:src/riscv.cpp ****         List<TCB>::Elem *element = (TCB::sleeping).head;
 930              		.loc 1 193 9 is_stmt 1
 193:src/riscv.cpp ****         List<TCB>::Elem *element = (TCB::sleeping).head;
 931              		.loc 1 193 26 is_stmt 0
 932 0584 97070000 		la	a5,_ZN3TCB8sleepingE
 932      83B70700 
 933 058c 03B90700 		ld	s2,0(a5)
 934              	.LVL33:
 200:src/riscv.cpp ****         List<TCB>::Elem *prev = nullptr;
 935              		.loc 1 200 9 is_stmt 1
 200:src/riscv.cpp ****         List<TCB>::Elem *prev = nullptr;
 936              		.loc 1 200 26 is_stmt 0
 937 0590 93090000 		li	s3,0
 938 0594 6F00C000 		j	.L39
 939              	.LVL34:
 940              	.L71:
 941              	.LBB116:
 220:src/riscv.cpp ****                 prev = element;
 942              		.loc 1 220 22
 943 0598 93090900 		mv	s3,s2
 944              	.LVL35:
 945              	.L41:
 946 059c 13890400 		mv	s2,s1
 947              	.LVL36:
 948              	.L39:
 949              	.LBE116:
 201:src/riscv.cpp ****         while (element) {
 950              		.loc 1 201 9 is_stmt 1
 201:src/riscv.cpp ****         while (element) {
 951              		.loc 1 201 16
 952 05a0 6306090E 		beqz	s2,.L40
 953              	.LBB128:
 202:src/riscv.cpp ****             (element->data->timeToSleep)--;
 954              		.loc 1 202 13
 202:src/riscv.cpp ****             (element->data->timeToSleep)--;
 955              		.loc 1 202 23 is_stmt 0
 956 05a4 03370900 		ld	a4,0(s2)
GAS LISTING /tmp/ccM3nXtL.s 			page 32


 202:src/riscv.cpp ****             (element->data->timeToSleep)--;
 957              		.loc 1 202 29
 958 05a8 83378703 		ld	a5,56(a4)
 202:src/riscv.cpp ****             (element->data->timeToSleep)--;
 959              		.loc 1 202 41
 960 05ac 9387F7FF 		addi	a5,a5,-1
 961 05b0 233CF702 		sd	a5,56(a4)
 203:src/riscv.cpp ****             List<TCB>::Elem *next = element->next;
 962              		.loc 1 203 13 is_stmt 1
 203:src/riscv.cpp ****             List<TCB>::Elem *next = element->next;
 963              		.loc 1 203 30 is_stmt 0
 964 05b4 83348900 		ld	s1,8(s2)
 965              	.LVL37:
 205:src/riscv.cpp ****             if (element->data->timeToSleep == 0) {
 966              		.loc 1 205 13 is_stmt 1
 205:src/riscv.cpp ****             if (element->data->timeToSleep == 0) {
 967              		.loc 1 205 26 is_stmt 0
 968 05b8 83370900 		ld	a5,0(s2)
 205:src/riscv.cpp ****             if (element->data->timeToSleep == 0) {
 969              		.loc 1 205 32
 970 05bc 03B78703 		ld	a4,56(a5)
 205:src/riscv.cpp ****             if (element->data->timeToSleep == 0) {
 971              		.loc 1 205 13
 972 05c0 E31C07FC 		bnez	a4,.L71
 206:src/riscv.cpp ****                 element->data->isSleeping = false;
 973              		.loc 1 206 17 is_stmt 1
 206:src/riscv.cpp ****                 element->data->isSleeping = false;
 974              		.loc 1 206 43 is_stmt 0
 975 05c4 23800704 		sb	zero,64(a5)
 207:src/riscv.cpp ****                 Scheduler::put(element->data);
 976              		.loc 1 207 17 is_stmt 1
 207:src/riscv.cpp ****                 Scheduler::put(element->data);
 977              		.loc 1 207 31 is_stmt 0
 978 05c8 03350900 		ld	a0,0(s2)
 979 05cc 97000000 		call	_ZN9Scheduler3putEP3TCB@plt
 979      E7800000 
 980              	.LVL38:
 209:src/riscv.cpp ****                 TCB::sleeping.deleteElement(element);
 981              		.loc 1 209 17 is_stmt 1
 982              	.LBB117:
 983              	.LBB118:
 984              		.file 4 "src/../h/../h/../h/../h/../h/../h/../h/list.hpp"
   1:src/../h/../h/../h/../h/../h/../h/../h/list.hpp **** //
   2:src/../h/../h/../h/../h/../h/../h/../h/list.hpp **** // Created by os on 5/16/24.
   3:src/../h/../h/../h/../h/../h/../h/../h/list.hpp **** //
   4:src/../h/../h/../h/../h/../h/../h/../h/list.hpp **** 
   5:src/../h/../h/../h/../h/../h/../h/../h/list.hpp **** #ifndef PROJECT_BASE_LIST_HPP
   6:src/../h/../h/../h/../h/../h/../h/../h/list.hpp **** #define PROJECT_BASE_LIST_HPP
   7:src/../h/../h/../h/../h/../h/../h/../h/list.hpp **** 
   8:src/../h/../h/../h/../h/../h/../h/../h/list.hpp **** #include "../h/Allocator.hpp"
   9:src/../h/../h/../h/../h/../h/../h/../h/list.hpp **** //Lista preuzeta sa teamsa
  10:src/../h/../h/../h/../h/../h/../h/../h/list.hpp **** 
  11:src/../h/../h/../h/../h/../h/../h/../h/list.hpp **** template<typename T>
  12:src/../h/../h/../h/../h/../h/../h/../h/list.hpp **** class List
  13:src/../h/../h/../h/../h/../h/../h/../h/list.hpp **** {
  14:src/../h/../h/../h/../h/../h/../h/../h/list.hpp **** private:
  15:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****     struct Elem
GAS LISTING /tmp/ccM3nXtL.s 			page 33


  16:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****     {
  17:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****         T *data;
  18:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****         Elem *next;
  19:src/../h/../h/../h/../h/../h/../h/../h/list.hpp **** 
  20:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****         Elem(T *data, Elem *next) : data(data), next(next) {}
  21:src/../h/../h/../h/../h/../h/../h/../h/list.hpp **** 
  22:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****         void* operator new(size_t size) {
  23:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****             return Allocator::_malloc(size);
  24:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****         }
  25:src/../h/../h/../h/../h/../h/../h/../h/list.hpp **** 
  26:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****         void operator delete(void* ptr) {
  27:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****             Allocator::_mem_free(ptr);
  28:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****         }
  29:src/../h/../h/../h/../h/../h/../h/../h/list.hpp **** 
  30:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****         void* operator new[](size_t size) {
  31:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****             return Allocator::_malloc(size);
  32:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****         }
  33:src/../h/../h/../h/../h/../h/../h/../h/list.hpp **** 
  34:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****         void operator delete[](void* ptr) {
  35:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****             Allocator::_mem_free(ptr);
  36:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****         }
  37:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****     };
  38:src/../h/../h/../h/../h/../h/../h/../h/list.hpp **** 
  39:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****     Elem *head, *tail;
  40:src/../h/../h/../h/../h/../h/../h/../h/list.hpp **** 
  41:src/../h/../h/../h/../h/../h/../h/../h/list.hpp **** public:
  42:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****     friend class TCB;
  43:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****     friend class Riscv;
  44:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****     friend class kSemaphore;
  45:src/../h/../h/../h/../h/../h/../h/../h/list.hpp **** 
  46:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****     List() : head(0), tail(0) {}
  47:src/../h/../h/../h/../h/../h/../h/../h/list.hpp **** 
  48:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****     List(const List<T> &) = delete;
  49:src/../h/../h/../h/../h/../h/../h/../h/list.hpp **** 
  50:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****     List<T> &operator=(const List<T> &) = delete;
  51:src/../h/../h/../h/../h/../h/../h/../h/list.hpp **** 
  52:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****     void addFirst(T *data)
  53:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****     {
  54:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****         Elem *elem = new Elem(data, head);
  55:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****         head = elem;
  56:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****         if (!tail) { tail = head; }
  57:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****     }
  58:src/../h/../h/../h/../h/../h/../h/../h/list.hpp **** 
  59:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****     void addLast(T *data)
  60:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****     {
  61:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****         Elem *elem = new Elem(data, 0);
  62:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****         if (tail)
  63:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****         {
  64:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****             tail->next = elem;
  65:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****             tail = elem;
  66:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****         } else
  67:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****         {
  68:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****             head = tail = elem;
  69:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****         }
  70:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****     }
  71:src/../h/../h/../h/../h/../h/../h/../h/list.hpp **** 
  72:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****     T *removeFirst()
GAS LISTING /tmp/ccM3nXtL.s 			page 34


  73:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****     {
  74:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****         if (!head) { return 0; }
  75:src/../h/../h/../h/../h/../h/../h/../h/list.hpp **** 
  76:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****         Elem *elem = head;
  77:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****         head = head->next;
  78:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****         if (!head) { tail = 0; }
  79:src/../h/../h/../h/../h/../h/../h/../h/list.hpp **** 
  80:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****         T *ret = elem->data;
  81:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****         delete elem;
  82:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****         return ret;
  83:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****     }
  84:src/../h/../h/../h/../h/../h/../h/../h/list.hpp **** 
  85:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****     T *peekFirst()
  86:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****     {
  87:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****         if (!head) { return 0; }
  88:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****         return head->data;
  89:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****     }
  90:src/../h/../h/../h/../h/../h/../h/../h/list.hpp **** 
  91:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****     T *removeLast()
  92:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****     {
  93:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****         if (!head) { return 0; }
  94:src/../h/../h/../h/../h/../h/../h/../h/list.hpp **** 
  95:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****         Elem *prev = 0;
  96:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****         for (Elem *curr = head; curr && curr != tail; curr = curr->next)
  97:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****         {
  98:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****             prev = curr;
  99:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****         }
 100:src/../h/../h/../h/../h/../h/../h/../h/list.hpp **** 
 101:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****         Elem *elem = tail;
 102:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****         if (prev) { prev->next = 0; }
 103:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****         else { head = 0; }
 104:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****         tail = prev;
 105:src/../h/../h/../h/../h/../h/../h/../h/list.hpp **** 
 106:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****         T *ret = elem->data;
 107:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****         delete elem;
 108:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****         return ret;
 109:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****     }
 110:src/../h/../h/../h/../h/../h/../h/../h/list.hpp **** 
 111:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****     T *peekLast()
 112:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****     {
 113:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****         if (!tail) { return 0; }
 114:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****         return tail->data;
 115:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****     }
 116:src/../h/../h/../h/../h/../h/../h/../h/list.hpp **** 
 117:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****     void deleteElement(Elem *elementToDelete)
 118:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****     {
 119:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****         if (!elementToDelete) { return; }
 985              		.loc 4 119 9 is_stmt 0
 986 05d4 630E0906 		beqz	s2,.L42
 120:src/../h/../h/../h/../h/../h/../h/../h/list.hpp **** 
 121:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****         if (head == elementToDelete)
 987              		.loc 4 121 13
 988 05d8 97070000 		la	a5,_ZN3TCB8sleepingE
 988      83B70700 
 989 05e0 83B70700 		ld	a5,0(a5)
 990              		.loc 4 121 9
 991 05e4 630EF900 		beq	s2,a5,.L80
GAS LISTING /tmp/ccM3nXtL.s 			page 35


 122:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****         {
 123:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****             head = head->next;
 124:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****             if (!head) { tail = nullptr; }
 125:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****             delete elementToDelete;
 126:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****             return;
 127:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****         }
 128:src/../h/../h/../h/../h/../h/../h/../h/list.hpp **** 
 129:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****         Elem *prev = nullptr;
 992              		.loc 4 129 15
 993 05e8 13070000 		li	a4,0
 994              	.L43:
 995              	.LVL39:
 996              	.LBB119:
 130:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****         for (Elem *curr = head; curr; curr = curr->next)
 997              		.loc 4 130 9 is_stmt 1
 998 05ec 63820706 		beqz	a5,.L42
 131:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****         {
 132:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****             if (curr == elementToDelete)
 999              		.loc 4 132 13 is_stmt 0
 1000 05f0 630EF902 		beq	s2,a5,.L81
 1001              	.LVL40:
 130:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****         for (Elem *curr = head; curr; curr = curr->next)
 1002              		.loc 4 130 9 is_stmt 1
 133:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****             {
 134:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****                 prev->next = curr->next;
 135:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****                 if (curr == tail) { tail = prev; }
 136:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****                 delete elementToDelete;
 137:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****                 return;
 138:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****             }
 139:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****             prev = curr;
 1003              		.loc 4 139 13 is_stmt 0
 1004 05f4 13870700 		mv	a4,a5
 130:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****         {
 1005              		.loc 4 130 9
 1006 05f8 83B78700 		ld	a5,8(a5)
 1007              	.LVL41:
 1008 05fc 6FF01FFF 		j	.L43
 1009              	.LVL42:
 1010              	.L80:
 1011              	.LBE119:
 123:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****             if (!head) { tail = nullptr; }
 1012              		.loc 4 123 26
 1013 0600 83B78700 		ld	a5,8(a5)
 123:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****             if (!head) { tail = nullptr; }
 1014              		.loc 4 123 13
 1015 0604 17070000 		la	a4,_ZN3TCB8sleepingE
 1015      03370700 
 1016 060c 2330F700 		sd	a5,0(a4)
 124:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****             delete elementToDelete;
 1017              		.loc 4 124 13
 1018 0610 638A0700 		beqz	a5,.L82
 1019              	.L44:
 1020              	.LVL43:
 1021              	.LBB122:
 1022              	.LBB123:
  27:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****         }
 1023              		.loc 4 27 33
GAS LISTING /tmp/ccM3nXtL.s 			page 36


 1024 0614 13050900 		mv	a0,s2
 1025 0618 97000000 		call	_ZN9Allocator9_mem_freeEPv@plt
 1025      E7800000 
 1026              	.LVL44:
 1027              	.LBE123:
 1028              	.LBE122:
 126:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****         }
 1029              		.loc 4 126 13
 1030 0620 6F000003 		j	.L42
 1031              	.L82:
 124:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****             delete elementToDelete;
 1032              		.loc 4 124 26
 1033 0624 23340700 		sd	zero,8(a4)
 1034 0628 6FF0DFFE 		j	.L44
 1035              	.LVL45:
 1036              	.L81:
 1037              	.LBB124:
 134:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****                 if (curr == tail) { tail = prev; }
 1038              		.loc 4 134 36
 1039 062c 83B68700 		ld	a3,8(a5)
 134:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****                 if (curr == tail) { tail = prev; }
 1040              		.loc 4 134 17
 1041 0630 2334D700 		sd	a3,8(a4)
 135:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****                 delete elementToDelete;
 1042              		.loc 4 135 29
 1043 0634 97060000 		la	a3,_ZN3TCB8sleepingE
 1043      83B60600 
 1044 063c 83B68600 		ld	a3,8(a3)
 135:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****                 delete elementToDelete;
 1045              		.loc 4 135 17
 1046 0640 6386D702 		beq	a5,a3,.L83
 1047              	.LVL46:
 1048              	.L46:
 1049              	.LBB120:
 1050              	.LBB121:
  27:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****         }
 1051              		.loc 4 27 33
 1052 0644 13050900 		mv	a0,s2
 1053 0648 97000000 		call	_ZN9Allocator9_mem_freeEPv@plt
 1053      E7800000 
 1054              	.LVL47:
 1055              	.L42:
 1056              	.LBE121:
 1057              	.LBE120:
 1058              	.LBE124:
 1059              	.LBE118:
 1060              	.LBE117:
 211:src/riscv.cpp ****                 if (prev) {
 1061              		.loc 1 211 17 is_stmt 1
 1062 0650 63860902 		beqz	s3,.L47
 212:src/riscv.cpp ****                     prev->next = next;
 1063              		.loc 1 212 21
 212:src/riscv.cpp ****                     prev->next = next;
 1064              		.loc 1 212 32 is_stmt 0
 1065 0654 23B49900 		sd	s1,8(s3)
 1066              	.L48:
 216:src/riscv.cpp ****                 if (!next) {
GAS LISTING /tmp/ccM3nXtL.s 			page 37


 1067              		.loc 1 216 17 is_stmt 1
 1068 0658 E39204F4 		bnez	s1,.L41
 217:src/riscv.cpp ****                     TCB::sleeping.tail = prev;
 1069              		.loc 1 217 21
 217:src/riscv.cpp ****                     TCB::sleeping.tail = prev;
 1070              		.loc 1 217 40 is_stmt 0
 1071 065c 97070000 		la	a5,_ZN3TCB8sleepingE
 1071      83B70700 
 1072 0664 23B43701 		sd	s3,8(a5)
 1073 0668 6FF05FF3 		j	.L41
 1074              	.LVL48:
 1075              	.L83:
 1076              	.LBB127:
 1077              	.LBB126:
 1078              	.LBB125:
 135:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****                 delete elementToDelete;
 1079              		.loc 4 135 37
 1080 066c 97070000 		la	a5,_ZN3TCB8sleepingE
 1080      83B70700 
 1081              	.LVL49:
 1082 0674 23B4E700 		sd	a4,8(a5)
 1083 0678 6FF0DFFC 		j	.L46
 1084              	.LVL50:
 1085              	.L47:
 1086              	.LBE125:
 1087              	.LBE126:
 1088              	.LBE127:
 214:src/riscv.cpp ****                     TCB::sleeping.head = next;
 1089              		.loc 1 214 21 is_stmt 1
 214:src/riscv.cpp ****                     TCB::sleeping.head = next;
 1090              		.loc 1 214 40 is_stmt 0
 1091 067c 97070000 		la	a5,_ZN3TCB8sleepingE
 1091      83B70700 
 1092 0684 23B09700 		sd	s1,0(a5)
 1093 0688 6FF01FFD 		j	.L48
 1094              	.LVL51:
 1095              	.L40:
 1096              	.LBE128:
 228:src/riscv.cpp ****         element = (kSemaphore::blockedTimedWait).head;
 1097              		.loc 1 228 9 is_stmt 1
 228:src/riscv.cpp ****         element = (kSemaphore::blockedTimedWait).head;
 1098              		.loc 1 228 17 is_stmt 0
 1099 068c 97070000 		la	a5,_ZN10kSemaphore16blockedTimedWaitE
 1099      83B70700 
 1100 0694 83B40700 		ld	s1,0(a5)
 1101              	.LVL52:
 236:src/riscv.cpp ****         prev = nullptr;
 1102              		.loc 1 236 9 is_stmt 1
 236:src/riscv.cpp ****         prev = nullptr;
 1103              		.loc 1 236 14 is_stmt 0
 1104 0698 130B0900 		mv	s6,s2
 1105 069c 6F00C000 		j	.L49
 1106              	.LVL53:
 1107              	.L73:
 1108              	.LBB129:
 1109              	.LBB130:
 264:src/riscv.cpp ****                 prev = element;
GAS LISTING /tmp/ccM3nXtL.s 			page 38


 1110              		.loc 1 264 22
 1111 06a0 138B0400 		mv	s6,s1
 1112              	.LVL54:
 1113              	.L51:
 1114 06a4 93840A00 		mv	s1,s5
 1115              	.LVL55:
 1116              	.L49:
 1117              	.LBE130:
 1118              	.LBE129:
 238:src/riscv.cpp ****         while (element) {
 1119              		.loc 1 238 9 is_stmt 1
 238:src/riscv.cpp ****         while (element) {
 1120              		.loc 1 238 16
 1121 06a8 63840416 		beqz	s1,.L50
 1122              	.LBB148:
 239:src/riscv.cpp ****             (element->data->timeToWaitSem)--;
 1123              		.loc 1 239 13
 239:src/riscv.cpp ****             (element->data->timeToWaitSem)--;
 1124              		.loc 1 239 23 is_stmt 0
 1125 06ac 03B70400 		ld	a4,0(s1)
 239:src/riscv.cpp ****             (element->data->timeToWaitSem)--;
 1126              		.loc 1 239 29
 1127 06b0 83378704 		ld	a5,72(a4)
 239:src/riscv.cpp ****             (element->data->timeToWaitSem)--;
 1128              		.loc 1 239 43
 1129 06b4 9387F7FF 		addi	a5,a5,-1
 1130 06b8 2334F704 		sd	a5,72(a4)
 240:src/riscv.cpp ****             List<TCB>::Elem *next = element->next;
 1131              		.loc 1 240 13 is_stmt 1
 240:src/riscv.cpp ****             List<TCB>::Elem *next = element->next;
 1132              		.loc 1 240 30 is_stmt 0
 1133 06bc 83BA8400 		ld	s5,8(s1)
 1134              	.LVL56:
 242:src/riscv.cpp ****             if (element->data->timeToWaitSem == 0) {
 1135              		.loc 1 242 13 is_stmt 1
 1136              	.LBB147:
 242:src/riscv.cpp ****             if (element->data->timeToWaitSem == 0) {
 1137              		.loc 1 242 26 is_stmt 0
 1138 06c0 83B70400 		ld	a5,0(s1)
 242:src/riscv.cpp ****             if (element->data->timeToWaitSem == 0) {
 1139              		.loc 1 242 32
 1140 06c4 03B78704 		ld	a4,72(a5)
 242:src/riscv.cpp ****             if (element->data->timeToWaitSem == 0) {
 1141              		.loc 1 242 13
 1142 06c8 E31C07FC 		bnez	a4,.L73
 1143              	.LBB131:
 243:src/riscv.cpp ****                 element->data->blocked = false;
 1144              		.loc 1 243 17 is_stmt 1
 243:src/riscv.cpp ****                 element->data->blocked = false;
 1145              		.loc 1 243 40 is_stmt 0
 1146 06cc A3800704 		sb	zero,65(a5)
 245:src/riscv.cpp ****                 kSemaphore::blockedTimedWait.deleteElement(element);
 1147              		.loc 1 245 17 is_stmt 1
 1148              	.LVL57:
 1149              	.LBB132:
 1150              	.LBB133:
 119:src/../h/../h/../h/../h/../h/../h/../h/list.hpp **** 
GAS LISTING /tmp/ccM3nXtL.s 			page 39


 1151              		.loc 4 119 9 is_stmt 0
 1152 06d0 63860408 		beqz	s1,.L52
 121:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****         {
 1153              		.loc 4 121 13
 1154 06d4 97070000 		la	a5,_ZN10kSemaphore16blockedTimedWaitE
 1154      83B70700 
 1155 06dc 83B70700 		ld	a5,0(a5)
 121:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****         {
 1156              		.loc 4 121 9
 1157 06e0 6386F400 		beq	s1,a5,.L84
 129:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****         for (Elem *curr = head; curr; curr = curr->next)
 1158              		.loc 4 129 15
 1159 06e4 13070900 		mv	a4,s2
 1160 06e8 6F008004 		j	.L53
 1161              	.L84:
 123:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****             if (!head) { tail = nullptr; }
 1162              		.loc 4 123 26
 1163 06ec 83B78700 		ld	a5,8(a5)
 123:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****             if (!head) { tail = nullptr; }
 1164              		.loc 4 123 13
 1165 06f0 17070000 		la	a4,_ZN10kSemaphore16blockedTimedWaitE
 1165      03370700 
 1166 06f8 2330F700 		sd	a5,0(a4)
 124:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****             delete elementToDelete;
 1167              		.loc 4 124 13
 1168 06fc 638A0700 		beqz	a5,.L85
 1169              	.L54:
 1170              	.LVL58:
 1171              	.LBB134:
 1172              	.LBB135:
  27:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****         }
 1173              		.loc 4 27 33
 1174 0700 13850400 		mv	a0,s1
 1175 0704 97000000 		call	_ZN9Allocator9_mem_freeEPv@plt
 1175      E7800000 
 1176              	.LVL59:
 1177              	.LBE135:
 1178              	.LBE134:
 126:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****         }
 1179              		.loc 4 126 13
 1180 070c 6F000005 		j	.L52
 1181              	.L85:
 124:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****             delete elementToDelete;
 1182              		.loc 4 124 26
 1183 0710 23340700 		sd	zero,8(a4)
 1184 0714 6FF0DFFE 		j	.L54
 1185              	.LVL60:
 1186              	.L86:
 1187              	.LBB136:
 135:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****                 delete elementToDelete;
 1188              		.loc 4 135 37
 1189 0718 97070000 		la	a5,_ZN10kSemaphore16blockedTimedWaitE
 1189      83B70700 
 1190              	.LVL61:
 1191 0720 23B4E700 		sd	a4,8(a5)
 1192 0724 6F00C002 		j	.L56
 1193              	.LVL62:
GAS LISTING /tmp/ccM3nXtL.s 			page 40


 1194              	.L55:
 130:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****         {
 1195              		.loc 4 130 9 is_stmt 1
 1196              		.loc 4 139 13 is_stmt 0
 1197 0728 13870700 		mv	a4,a5
 130:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****         {
 1198              		.loc 4 130 9
 1199 072c 83B78700 		ld	a5,8(a5)
 1200              	.LVL63:
 1201              	.L53:
 130:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****         {
 1202              		.loc 4 130 9 is_stmt 1
 1203 0730 63860702 		beqz	a5,.L52
 132:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****             {
 1204              		.loc 4 132 13 is_stmt 0
 1205 0734 E39AF4FE 		bne	s1,a5,.L55
 134:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****                 if (curr == tail) { tail = prev; }
 1206              		.loc 4 134 36
 1207 0738 83B68700 		ld	a3,8(a5)
 134:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****                 if (curr == tail) { tail = prev; }
 1208              		.loc 4 134 17
 1209 073c 2334D700 		sd	a3,8(a4)
 135:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****                 delete elementToDelete;
 1210              		.loc 4 135 29
 1211 0740 97060000 		la	a3,_ZN10kSemaphore16blockedTimedWaitE
 1211      83B60600 
 1212 0748 83B68600 		ld	a3,8(a3)
 135:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****                 delete elementToDelete;
 1213              		.loc 4 135 17
 1214 074c E386D7FC 		beq	a5,a3,.L86
 1215              	.LVL64:
 1216              	.L56:
 1217              	.LBB137:
 1218              	.LBB138:
  27:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****         }
 1219              		.loc 4 27 33
 1220 0750 13850400 		mv	a0,s1
 1221 0754 97000000 		call	_ZN9Allocator9_mem_freeEPv@plt
 1221      E7800000 
 1222              	.LVL65:
 1223              	.L52:
 1224              	.LBE138:
 1225              	.LBE137:
 1226              	.LBE136:
 1227              	.LBE133:
 1228              	.LBE132:
 247:src/riscv.cpp ****                 List<TCB> *headSemList = &(element->data->blockedOnWhichSem->blocked);
 1229              		.loc 1 247 17 is_stmt 1
 247:src/riscv.cpp ****                 List<TCB> *headSemList = &(element->data->blockedOnWhichSem->blocked);
 1230              		.loc 1 247 53 is_stmt 0
 1231 075c 83BB0400 		ld	s7,0(s1)
 247:src/riscv.cpp ****                 List<TCB> *headSemList = &(element->data->blockedOnWhichSem->blocked);
 1232              		.loc 1 247 59
 1233 0760 83B70B05 		ld	a5,80(s7)
 247:src/riscv.cpp ****                 List<TCB> *headSemList = &(element->data->blockedOnWhichSem->blocked);
 1234              		.loc 1 247 28
 1235 0764 138C8700 		addi	s8,a5,8
GAS LISTING /tmp/ccM3nXtL.s 			page 41


 1236              	.LVL66:
 248:src/riscv.cpp ****                 headSemList->deleteNodes(element->data);
 1237              		.loc 1 248 17 is_stmt 1
 1238              	.LBB139:
 1239              	.LBB140:
 140:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****         }
 141:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****     }
 142:src/../h/../h/../h/../h/../h/../h/../h/list.hpp **** 
 143:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****     void deleteNodes(T* objectToDelete) {
 144:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****         Elem* current = head;
 1240              		.loc 4 144 15 is_stmt 0
 1241 0768 03B58700 		ld	a0,8(a5)
 1242              	.LVL67:
 145:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****         Elem* previous = nullptr;
 1243              		.loc 4 145 15
 1244 076c 130A0900 		mv	s4,s2
 1245 0770 6F00C002 		j	.L57
 1246              	.LVL68:
 1247              	.L89:
 1248              	.LBB141:
 1249              	.LBB142:
 146:src/../h/../h/../h/../h/../h/../h/../h/list.hpp **** 
 147:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****         while (current != nullptr) {
 148:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****             if (current->data == objectToDelete) {
 149:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****                 Elem* temp = current;
 150:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****                 if (previous == nullptr) {
 1250              		.loc 4 150 17
 1251 0774 63000A04 		beqz	s4,.L87
 151:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****                     head = current->next;
 152:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****                 } else {
 153:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****                     previous->next = current->next;
 1252              		.loc 4 153 47
 1253 0778 83378500 		ld	a5,8(a0)
 1254              		.loc 4 153 21
 1255 077c 2334FA00 		sd	a5,8(s4)
 1256              	.L61:
 154:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****                 }
 155:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****                 if (current == tail) {
 1257              		.loc 4 155 32
 1258 0780 83378C00 		ld	a5,8(s8)
 1259              		.loc 4 155 17
 1260 0784 630EF502 		beq	a0,a5,.L88
 1261              	.L62:
 156:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****                     tail = previous;
 157:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****                 }
 158:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****                 current = current->next;
 1262              		.loc 4 158 17
 1263 0788 83398500 		ld	s3,8(a0)
 1264              	.LVL69:
 159:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****                 delete temp;
 1265              		.loc 4 159 17
 1266 078c 63060500 		beqz	a0,.L63
 1267              	.LVL70:
 1268              	.LBB143:
 1269              	.LBB144:
  27:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****         }
 1270              		.loc 4 27 33
GAS LISTING /tmp/ccM3nXtL.s 			page 42


 1271 0790 97000000 		call	_ZN9Allocator9_mem_freeEPv@plt
 1271      E7800000 
 1272              	.LVL71:
 1273              	.L63:
 1274              	.LBE144:
 1275              	.LBE143:
 1276              	.LBE142:
 1277              	.LBE141:
 145:src/../h/../h/../h/../h/../h/../h/../h/list.hpp **** 
 1278              		.loc 4 145 15
 1279 0798 13850900 		mv	a0,s3
 1280              	.LVL72:
 1281              	.L57:
 147:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****             if (current->data == objectToDelete) {
 1282              		.loc 4 147 24 is_stmt 1
 1283 079c 63060502 		beqz	a0,.L58
 1284              	.LBB146:
 148:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****                 Elem* temp = current;
 1285              		.loc 4 148 26 is_stmt 0
 1286 07a0 83370500 		ld	a5,0(a0)
 148:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****                 Elem* temp = current;
 1287              		.loc 4 148 13
 1288 07a4 E388FBFC 		beq	s7,a5,.L89
 1289              	.LVL73:
 160:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****             } else {
 161:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****                 previous = current;
 162:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****                 current = current->next;
 1290              		.loc 4 162 17
 1291 07a8 83398500 		ld	s3,8(a0)
 1292              	.LVL74:
 161:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****                 current = current->next;
 1293              		.loc 4 161 17
 1294 07ac 130A0500 		mv	s4,a0
 1295 07b0 6FF09FFE 		j	.L63
 1296              	.LVL75:
 1297              	.L87:
 1298              	.LBB145:
 151:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****                 } else {
 1299              		.loc 4 151 37
 1300 07b4 83378500 		ld	a5,8(a0)
 151:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****                 } else {
 1301              		.loc 4 151 21
 1302 07b8 2330FC00 		sd	a5,0(s8)
 1303 07bc 6FF05FFC 		j	.L61
 1304              	.L88:
 156:src/../h/../h/../h/../h/../h/../h/../h/list.hpp ****                 }
 1305              		.loc 4 156 21
 1306 07c0 23344C01 		sd	s4,8(s8)
 1307 07c4 6FF05FFC 		j	.L62
 1308              	.LVL76:
 1309              	.L58:
 1310              	.LBE145:
 1311              	.LBE146:
 1312              	.LBE140:
 1313              	.LBE139:
 250:src/riscv.cpp ****                 element->data->blockedOnWhichSem = nullptr;
 1314              		.loc 1 250 17 is_stmt 1
GAS LISTING /tmp/ccM3nXtL.s 			page 43


 250:src/riscv.cpp ****                 element->data->blockedOnWhichSem = nullptr;
 1315              		.loc 1 250 26 is_stmt 0
 1316 07c8 83B70400 		ld	a5,0(s1)
 250:src/riscv.cpp ****                 element->data->blockedOnWhichSem = nullptr;
 1317              		.loc 1 250 50
 1318 07cc 23B80704 		sd	zero,80(a5)
 251:src/riscv.cpp ****                 element->data->regularlyFinishedWait = false;
 1319              		.loc 1 251 17 is_stmt 1
 251:src/riscv.cpp ****                 element->data->regularlyFinishedWait = false;
 1320              		.loc 1 251 26 is_stmt 0
 1321 07d0 83B70400 		ld	a5,0(s1)
 251:src/riscv.cpp ****                 element->data->regularlyFinishedWait = false;
 1322              		.loc 1 251 54
 1323 07d4 238C0704 		sb	zero,88(a5)
 253:src/riscv.cpp ****                 Scheduler::put(element->data);
 1324              		.loc 1 253 17 is_stmt 1
 253:src/riscv.cpp ****                 Scheduler::put(element->data);
 1325              		.loc 1 253 31 is_stmt 0
 1326 07d8 03B50400 		ld	a0,0(s1)
 1327 07dc 97000000 		call	_ZN9Scheduler3putEP3TCB@plt
 1327      E7800000 
 1328              	.LVL77:
 255:src/riscv.cpp ****                 if (prev) {
 1329              		.loc 1 255 17 is_stmt 1
 1330 07e4 630E0B00 		beqz	s6,.L64
 256:src/riscv.cpp ****                     prev->next = next;
 1331              		.loc 1 256 21
 256:src/riscv.cpp ****                     prev->next = next;
 1332              		.loc 1 256 32 is_stmt 0
 1333 07e8 23345B01 		sd	s5,8(s6)
 1334              	.L65:
 260:src/riscv.cpp ****                 if (!next) {
 1335              		.loc 1 260 17 is_stmt 1
 1336 07ec E39C0AEA 		bnez	s5,.L51
 261:src/riscv.cpp ****                     kSemaphore::blockedTimedWait.tail = prev;
 1337              		.loc 1 261 21
 261:src/riscv.cpp ****                     kSemaphore::blockedTimedWait.tail = prev;
 1338              		.loc 1 261 55 is_stmt 0
 1339 07f0 97070000 		la	a5,_ZN10kSemaphore16blockedTimedWaitE
 1339      83B70700 
 1340 07f8 23B46701 		sd	s6,8(a5)
 1341 07fc 6FF09FEA 		j	.L51
 1342              	.L64:
 258:src/riscv.cpp ****                     kSemaphore::blockedTimedWait.head = next;
 1343              		.loc 1 258 21 is_stmt 1
 258:src/riscv.cpp ****                     kSemaphore::blockedTimedWait.head = next;
 1344              		.loc 1 258 55 is_stmt 0
 1345 0800 97070000 		la	a5,_ZN10kSemaphore16blockedTimedWaitE
 1345      83B70700 
 1346 0808 23B05701 		sd	s5,0(a5)
 1347 080c 6FF01FFE 		j	.L65
 1348              	.LVL78:
 1349              	.L50:
 1350              	.LBE131:
 1351              	.LBE147:
 1352              	.LBE148:
 273:src/riscv.cpp ****         TCB::timeSliceCounter++;
GAS LISTING /tmp/ccM3nXtL.s 			page 44


 1353              		.loc 1 273 9 is_stmt 1
 273:src/riscv.cpp ****         TCB::timeSliceCounter++;
 1354              		.loc 1 273 30 is_stmt 0
 1355 0810 17070000 		la	a4,_ZN3TCB16timeSliceCounterE
 1355      03370700 
 1356 0818 83370700 		ld	a5,0(a4)
 1357 081c 93871700 		addi	a5,a5,1
 1358 0820 2330F700 		sd	a5,0(a4)
 274:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 1359              		.loc 1 274 9 is_stmt 1
 1360              	.LBB149:
 274:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 1361              		.loc 1 274 64 is_stmt 0
 1362 0824 17070000 		la	a4,_ZN3TCB7runningE
 1362      03370700 
 1363 082c 03370700 		ld	a4,0(a4)
 1364              	.LVL79:
 1365              	.LBB150:
 1366              	.LBB151:
  21:src/../h/../h/../h/../h/../h/tcb.hpp **** 
  22:src/../h/../h/../h/../h/../h/tcb.hpp ****     uint64 getTimeSlice() const { return timeSlice; }
 1367              		.loc 3 22 35 is_stmt 1
 1368              		.loc 3 22 42 is_stmt 0
 1369 0830 03370702 		ld	a4,32(a4)
 1370              	.LVL80:
 1371              	.LBE151:
 1372              	.LBE150:
 274:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 1373              		.loc 1 274 9
 1374 0834 E3E2E79A 		bltu	a5,a4,.L5
 1375              	.LBB152:
 276:src/riscv.cpp ****             uint64 volatile sepc = r_sepc();
 1376              		.loc 1 276 13 is_stmt 1
 1377              	.LBB153:
 1378              	.LBB154:
 108:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 1379              		.loc 2 108 5
 109:src/../h/riscv.hpp ****     return sepc;
 1380              		.loc 2 109 5
 109:src/../h/riscv.hpp ****     return sepc;
 1381              		.loc 2 109 64 is_stmt 0
 1382              	#APP
 1383              	# 109 "src/../h/riscv.hpp" 1
 1384              		csrr a5, sepc
 1385              	# 0 "" 2
 1386              	#NO_APP
 1387 083c 233CF4F6 		sd	a5,-136(s0)
 110:src/../h/riscv.hpp **** }
 1388              		.loc 2 110 5 is_stmt 1
 110:src/../h/riscv.hpp **** }
 1389              		.loc 2 110 12 is_stmt 0
 1390 0840 833784F7 		ld	a5,-136(s0)
 1391              	.LBE154:
 1392              	.LBE153:
 276:src/riscv.cpp ****             uint64 volatile sepc = r_sepc();
 1393              		.loc 1 276 43
 1394 0844 2330F4F4 		sd	a5,-192(s0)
GAS LISTING /tmp/ccM3nXtL.s 			page 45


 277:src/riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
 1395              		.loc 1 277 13 is_stmt 1
 1396              	.LBB155:
 1397              	.LBB156:
 184:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 1398              		.loc 2 184 5
 185:src/../h/riscv.hpp ****     return sstatus;
 1399              		.loc 2 185 5
 185:src/../h/riscv.hpp ****     return sstatus;
 1400              		.loc 2 185 76 is_stmt 0
 1401              	#APP
 1402              	# 185 "src/../h/riscv.hpp" 1
 1403              		csrr a5, sstatus
 1404              	# 0 "" 2
 1405              	#NO_APP
 1406 084c 2338F4F6 		sd	a5,-144(s0)
 186:src/../h/riscv.hpp **** }
 1407              		.loc 2 186 5 is_stmt 1
 186:src/../h/riscv.hpp **** }
 1408              		.loc 2 186 12 is_stmt 0
 1409 0850 833704F7 		ld	a5,-144(s0)
 1410              	.LBE156:
 1411              	.LBE155:
 277:src/riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
 1412              		.loc 1 277 49
 1413 0854 2334F4F4 		sd	a5,-184(s0)
 278:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
 1414              		.loc 1 278 13 is_stmt 1
 278:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
 1415              		.loc 1 278 35 is_stmt 0
 1416 0858 97070000 		la	a5,_ZN3TCB16timeSliceCounterE
 1416      83B70700 
 1417 0860 23B00700 		sd	zero,0(a5)
 279:src/riscv.cpp ****             TCB::dispatch();
 1418              		.loc 1 279 13 is_stmt 1
 279:src/riscv.cpp ****             TCB::dispatch();
 1419              		.loc 1 279 26 is_stmt 0
 1420 0864 97000000 		call	_ZN3TCB8dispatchEv@plt
 1420      E7800000 
 1421              	.LVL81:
 280:src/riscv.cpp ****             w_sstatus(sstatus);
 1422              		.loc 1 280 13 is_stmt 1
 280:src/riscv.cpp ****             w_sstatus(sstatus);
 1423              		.loc 1 280 22 is_stmt 0
 1424 086c 833784F4 		ld	a5,-184(s0)
 1425              	.LVL82:
 1426              	.LBB157:
 1427              	.LBB158:
 191:src/../h/riscv.hpp **** }
 1428              		.loc 2 191 5 is_stmt 1
 191:src/../h/riscv.hpp **** }
 1429              		.loc 2 191 77 is_stmt 0
 1430              	#APP
 1431              	# 191 "src/../h/riscv.hpp" 1
 1432              		csrw sstatus, a5
 1433              	# 0 "" 2
 1434              	.LVL83:
GAS LISTING /tmp/ccM3nXtL.s 			page 46


 1435              	#NO_APP
 1436              	.LBE158:
 1437              	.LBE157:
 281:src/riscv.cpp ****             w_sepc(sepc);
 1438              		.loc 1 281 13 is_stmt 1
 281:src/riscv.cpp ****             w_sepc(sepc);
 1439              		.loc 1 281 19 is_stmt 0
 1440 0874 833704F4 		ld	a5,-192(s0)
 1441              	.LVL84:
 1442              	.LBB159:
 1443              	.LBB160:
 115:src/../h/riscv.hpp **** }
 1444              		.loc 2 115 5 is_stmt 1
 115:src/../h/riscv.hpp **** }
 1445              		.loc 2 115 65 is_stmt 0
 1446              	#APP
 1447              	# 115 "src/../h/riscv.hpp" 1
 116:src/../h/riscv.hpp **** 
 1448              		csrw sepc, a5
 1449              	# 0 "" 2
 1450              		.loc 2 116 1
 1451              	#NO_APP
 1452 087c 6FF0DF95 		j	.L5
 1453              	.LVL85:
 1454              	.L77:
 1455              	.LBE160:
 1456              	.LBE159:
 1457              	.LBE152:
 1458              	.LBE149:
 1459              	.LBE113:
 1460              	.LBB161:
 1461              	.LBB112:
 287:src/riscv.cpp ****         volatile uint64 plic = plic_claim();
 1462              		.loc 1 287 9 is_stmt 1
 287:src/riscv.cpp ****         volatile uint64 plic = plic_claim();
 1463              		.loc 1 287 42 is_stmt 0
 1464 0880 97000000 		call	plic_claim@plt
 1464      E7800000 
 1465              	.LVL86:
 287:src/riscv.cpp ****         volatile uint64 plic = plic_claim();
 1466              		.loc 1 287 43
 1467 0888 2338A4F4 		sd	a0,-176(s0)
 289:src/riscv.cpp ****         if (plic == 0x0a) {
 1468              		.loc 1 289 9 is_stmt 1
 289:src/riscv.cpp ****         if (plic == 0x0a) {
 1469              		.loc 1 289 18 is_stmt 0
 1470 088c 033704F5 		ld	a4,-176(s0)
 289:src/riscv.cpp ****         if (plic == 0x0a) {
 1471              		.loc 1 289 9
 1472 0890 9307A000 		li	a5,10
 1473 0894 E312F794 		bne	a4,a5,.L5
 1474              	.L68:
 290:src/riscv.cpp ****             while ((*((char *) CONSOLE_STATUS) & CONSOLE_RX_STATUS_BIT)) {
 1475              		.loc 1 290 13 is_stmt 1
 290:src/riscv.cpp ****             while ((*((char *) CONSOLE_STATUS) & CONSOLE_RX_STATUS_BIT)) {
 1476              		.loc 1 290 71
 290:src/riscv.cpp ****             while ((*((char *) CONSOLE_STATUS) & CONSOLE_RX_STATUS_BIT)) {
GAS LISTING /tmp/ccM3nXtL.s 			page 47


 1477              		.loc 1 290 21 is_stmt 0
 1478 0898 97070000 		la	a5,CONSOLE_STATUS
 1478      83B70700 
 1479 08a0 83B70700 		ld	a5,0(a5)
 1480 08a4 83C70700 		lbu	a5,0(a5)
 290:src/riscv.cpp ****             while ((*((char *) CONSOLE_STATUS) & CONSOLE_RX_STATUS_BIT)) {
 1481              		.loc 1 290 71
 1482 08a8 93F71700 		andi	a5,a5,1
 1483 08ac 63880702 		beqz	a5,.L67
 291:src/riscv.cpp ****                 if (kConsole::getInputSize() > 274) {
 1484              		.loc 1 291 17 is_stmt 1
 291:src/riscv.cpp ****                 if (kConsole::getInputSize() > 274) {
 1485              		.loc 1 291 43 is_stmt 0
 1486 08b0 97000000 		call	_ZN8kConsole12getInputSizeEv@plt
 1486      E7800000 
 1487              	.LVL87:
 291:src/riscv.cpp ****                 if (kConsole::getInputSize() > 274) {
 1488              		.loc 1 291 17
 1489 08b8 93072011 		li	a5,274
 1490 08bc 63C0A702 		bgt	a0,a5,.L67
 294:src/riscv.cpp ****                 kConsole::putInputBuffer(*((char *) CONSOLE_RX_DATA));
 1491              		.loc 1 294 17 is_stmt 1
 294:src/riscv.cpp ****                 kConsole::putInputBuffer(*((char *) CONSOLE_RX_DATA));
 1492              		.loc 1 294 41 is_stmt 0
 1493 08c0 97070000 		la	a5,CONSOLE_RX_DATA
 1493      83B70700 
 1494 08c8 83B70700 		ld	a5,0(a5)
 1495 08cc 03C50700 		lbu	a0,0(a5)
 1496 08d0 97000000 		call	_ZN8kConsole14putInputBufferEc@plt
 1496      E7800000 
 1497              	.LVL88:
 290:src/riscv.cpp ****             while ((*((char *) CONSOLE_STATUS) & CONSOLE_RX_STATUS_BIT)) {
 1498              		.loc 1 290 13
 1499 08d8 6FF01FFC 		j	.L68
 1500              	.L67:
 296:src/riscv.cpp ****             plic_complete(CONSOLE_IRQ);
 1501              		.loc 1 296 13 is_stmt 1
 296:src/riscv.cpp ****             plic_complete(CONSOLE_IRQ);
 1502              		.loc 1 296 26 is_stmt 0
 1503 08dc 1305A000 		li	a0,10
 1504 08e0 97000000 		call	plic_complete@plt
 1504      E7800000 
 1505              	.LVL89:
 1506 08e8 6FF01F8F 		j	.L5
 1507              	.L90:
 1508              	.LBE112:
 308:src/riscv.cpp ****                 *((char*) CONSOLE_TX_DATA) = kConsole::putOutputBuffer();
 1509              		.loc 1 308 17 is_stmt 1
 1510 08ec 97070000 		la	a5,CONSOLE_TX_DATA
 1510      83B70700 
 1511 08f4 83B40700 		ld	s1,0(a5)
 308:src/riscv.cpp ****                 *((char*) CONSOLE_TX_DATA) = kConsole::putOutputBuffer();
 1512              		.loc 1 308 71 is_stmt 0
 1513 08f8 97000000 		call	_ZN8kConsole15putOutputBufferEv@plt
 1513      E7800000 
 1514              	.LVL90:
 308:src/riscv.cpp ****                 *((char*) CONSOLE_TX_DATA) = kConsole::putOutputBuffer();
GAS LISTING /tmp/ccM3nXtL.s 			page 48


 1515              		.loc 1 308 44
 1516 0900 2380A400 		sb	a0,0(s1)
 1517              	.L70:
 305:src/riscv.cpp ****             while ((*((char *) CONSOLE_STATUS) & CONSOLE_TX_STATUS_BIT))
 1518              		.loc 1 305 13 is_stmt 1
 305:src/riscv.cpp ****             while ((*((char *) CONSOLE_STATUS) & CONSOLE_TX_STATUS_BIT))
 1519              		.loc 1 305 71
 305:src/riscv.cpp ****             while ((*((char *) CONSOLE_STATUS) & CONSOLE_TX_STATUS_BIT))
 1520              		.loc 1 305 21 is_stmt 0
 1521 0904 97070000 		la	a5,CONSOLE_STATUS
 1521      83B70700 
 1522 090c 83B70700 		ld	a5,0(a5)
 1523 0910 83C70700 		lbu	a5,0(a5)
 305:src/riscv.cpp ****             while ((*((char *) CONSOLE_STATUS) & CONSOLE_TX_STATUS_BIT))
 1524              		.loc 1 305 71
 1525 0914 93F70702 		andi	a5,a5,32
 1526 0918 63880700 		beqz	a5,.L69
 307:src/riscv.cpp ****                 if (kConsole::getOutputSize() <= 0) {break;}
 1527              		.loc 1 307 17 is_stmt 1
 307:src/riscv.cpp ****                 if (kConsole::getOutputSize() <= 0) {break;}
 1528              		.loc 1 307 44 is_stmt 0
 1529 091c 97000000 		call	_ZN8kConsole13getOutputSizeEv@plt
 1529      E7800000 
 1530              	.LVL91:
 307:src/riscv.cpp ****                 if (kConsole::getOutputSize() <= 0) {break;}
 1531              		.loc 1 307 17
 1532 0924 E344A0FC 		bgtz	a0,.L90
 1533              	.L69:
 310:src/riscv.cpp ****             __asm__ volatile ("li t0, 0x5555");
 1534              		.loc 1 310 13 is_stmt 1
 310:src/riscv.cpp ****             __asm__ volatile ("li t0, 0x5555");
 1535              		.loc 1 310 47 is_stmt 0
 1536              	#APP
 1537              	# 310 "src/riscv.cpp" 1
 311:src/riscv.cpp ****             __asm__ volatile ("li t1, 0x100000");
 1538              		li t0, 0x5555
 1539              	# 0 "" 2
 1540              		.loc 1 311 13 is_stmt 1
 311:src/riscv.cpp ****             __asm__ volatile ("li t1, 0x100000");
 1541              		.loc 1 311 49 is_stmt 0
 1542              	# 311 "src/riscv.cpp" 1
 312:src/riscv.cpp ****             __asm__ volatile ("sw t0, 0(t1)");
 1543              		li t1, 0x100000
 1544              	# 0 "" 2
 1545              		.loc 1 312 13 is_stmt 1
 312:src/riscv.cpp ****             __asm__ volatile ("sw t0, 0(t1)");
 1546              		.loc 1 312 46 is_stmt 0
 1547              	# 312 "src/riscv.cpp" 1
 1548              		sw t0, 0(t1)
 1549              	# 0 "" 2
 1550              	#NO_APP
 1551              	.LBE161:
 1552              	.LBE175:
 1553              	.LBE178:
 1554              		.loc 1 316 1
 1555 0938 6FF01F8A 		j	.L5
 1556              		.cfi_endproc
GAS LISTING /tmp/ccM3nXtL.s 			page 49


 1557              	.LFE59:
 1559              	.Letext0:
 1560              		.file 5 "src/../h/../lib/hw.h"
 1561              		.file 6 "src/../h/tipovi.hpp"
 1562              		.file 7 "src/../h/../h/../h/../h/../h/../h/sem.hpp"
 1563              		.file 8 "src/../h/Allocator.hpp"
 1564              		.file 9 "src/../h/../h/../h/../h/../h/../h/scheduler.hpp"
 1565              		.file 10 "src/../h/../h/../h/../h/kBuffer.hpp"
 1566              		.file 11 "src/../h/../h/../h/kConsole.hpp"
 1567              		.file 12 "src/../h/../h/print.hpp"
 1568              		.file 13 "src/../h/../h/../h/../h/../h/syscall_c.h"
GAS LISTING /tmp/ccM3nXtL.s 			page 50


DEFINED SYMBOLS
                            *ABS*:0000000000000000 riscv.cpp
     /tmp/ccM3nXtL.s:9      .text:0000000000000000 _ZN5Riscv10popSppSpieEv
     /tmp/ccM3nXtL.s:13     .text:0000000000000000 .L0 
     /tmp/ccM3nXtL.s:14     .text:0000000000000000 .L0 
     /tmp/ccM3nXtL.s:15     .text:0000000000000004 .L0 
     /tmp/ccM3nXtL.s:17     .text:0000000000000008 .L0 
     /tmp/ccM3nXtL.s:19     .text:000000000000000c .L0 
     /tmp/ccM3nXtL.s:25     .text:000000000000000c .L0 
     /tmp/ccM3nXtL.s:26     .text:000000000000000c .L0 
     /tmp/ccM3nXtL.s:27     .text:000000000000000c .L0 
     /tmp/ccM3nXtL.s:37     .text:0000000000000014 .L0 
       src/riscv.cpp:9      .text:0000000000000014 .L0 
     /tmp/ccM3nXtL.s:43     .text:0000000000000018 .L0 
       src/riscv.cpp:10     .text:0000000000000018 .L0 
     /tmp/ccM3nXtL.s:49     .text:000000000000001c .L0 
     /tmp/ccM3nXtL.s:50     .text:0000000000000020 .L0 
     /tmp/ccM3nXtL.s:51     .text:0000000000000020 .L0 
     /tmp/ccM3nXtL.s:53     .text:0000000000000024 .L0 
     /tmp/ccM3nXtL.s:55     .text:0000000000000028 .L0 
     /tmp/ccM3nXtL.s:61     .text:0000000000000028 _ZN5Riscv9kernelEndEPv
     /tmp/ccM3nXtL.s:64     .text:0000000000000028 .L0 
     /tmp/ccM3nXtL.s:66     .text:0000000000000028 .L0 
     /tmp/ccM3nXtL.s:67     .text:000000000000002c .L0 
     /tmp/ccM3nXtL.s:69     .text:0000000000000030 .L0 
     /tmp/ccM3nXtL.s:71     .text:0000000000000034 .L0 
     /tmp/ccM3nXtL.s:73     .text:0000000000000034 .L0 
     /tmp/ccM3nXtL.s:74     .text:0000000000000034 .L0 
     /tmp/ccM3nXtL.s:80     .text:000000000000003c .L0 
       src/riscv.cpp:15     .text:000000000000003c .L0 
     /tmp/ccM3nXtL.s:85     .text:0000000000000040 .L0 
     /tmp/ccM3nXtL.s:87     .text:0000000000000040 .L0 
     /tmp/ccM3nXtL.s:88     .text:0000000000000044 .L0 
     /tmp/ccM3nXtL.s:89     .text:0000000000000044 .L0 
     /tmp/ccM3nXtL.s:91     .text:0000000000000048 .L0 
     /tmp/ccM3nXtL.s:93     .text:000000000000004c .L0 
     /tmp/ccM3nXtL.s:104    .text:000000000000004c _ZN5Riscv20handleSupervisorTrapEv
     /tmp/ccM3nXtL.s:107    .text:000000000000004c .L0 
     /tmp/ccM3nXtL.s:108    .text:000000000000004c .L0 
     /tmp/ccM3nXtL.s:109    .text:0000000000000050 .L0 
     /tmp/ccM3nXtL.s:120    .text:0000000000000078 .L0 
     /tmp/ccM3nXtL.s:121    .text:0000000000000078 .L0 
     /tmp/ccM3nXtL.s:122    .text:0000000000000078 .L0 
     /tmp/ccM3nXtL.s:123    .text:0000000000000078 .L0 
     /tmp/ccM3nXtL.s:124    .text:0000000000000078 .L0 
     /tmp/ccM3nXtL.s:125    .text:0000000000000078 .L0 
     /tmp/ccM3nXtL.s:126    .text:0000000000000078 .L0 
     /tmp/ccM3nXtL.s:127    .text:0000000000000078 .L0 
     /tmp/ccM3nXtL.s:128    .text:0000000000000078 .L0 
     /tmp/ccM3nXtL.s:129    .text:0000000000000078 .L0 
     /tmp/ccM3nXtL.s:131    .text:000000000000007c .L0 
     /tmp/ccM3nXtL.s:133    .text:000000000000007c .L0 
     /tmp/ccM3nXtL.s:134    .text:000000000000007c .L0 
       src/riscv.cpp:22     .text:000000000000007c .L0 
     /tmp/ccM3nXtL.s:142    .text:0000000000000084 .L0 
       src/riscv.cpp:23     .text:0000000000000084 .L0 
     /tmp/ccM3nXtL.s:150    .text:000000000000008c .L0 
GAS LISTING /tmp/ccM3nXtL.s 			page 51


       src/riscv.cpp:24     .text:000000000000008c .L0 
     /tmp/ccM3nXtL.s:158    .text:0000000000000094 .L0 
       src/riscv.cpp:25     .text:0000000000000094 .L0 
     /tmp/ccM3nXtL.s:166    .text:000000000000009c .L0 
       src/riscv.cpp:26     .text:000000000000009c .L0 
     /tmp/ccM3nXtL.s:176    .text:00000000000000a4 .L0 
     /tmp/ccM3nXtL.s:177    .text:00000000000000a4 .L0 
     /tmp/ccM3nXtL.s:178    .text:00000000000000a4 .L0 
  src/../h/riscv.hpp:97     .text:00000000000000a4 .L0 
     /tmp/ccM3nXtL.s:186    .text:00000000000000ac .L0 
     /tmp/ccM3nXtL.s:187    .text:00000000000000ac .L0 
     /tmp/ccM3nXtL.s:191    .text:00000000000000b0 .L0 
     /tmp/ccM3nXtL.s:194    .text:00000000000000b4 .L0 
     /tmp/ccM3nXtL.s:195    .text:00000000000000b4 .L0 
     /tmp/ccM3nXtL.s:197    .text:00000000000000b8 .L0 
     /tmp/ccM3nXtL.s:200    .text:00000000000000c0 .L0 
     /tmp/ccM3nXtL.s:202    .text:00000000000000c4 .L0 
     /tmp/ccM3nXtL.s:208    .text:00000000000000cc .L0 
     /tmp/ccM3nXtL.s:209    .text:00000000000000cc .L0 
     /tmp/ccM3nXtL.s:211    .text:00000000000000d0 .L0 
     /tmp/ccM3nXtL.s:221    .text:00000000000000e0 .L0 
     /tmp/ccM3nXtL.s:222    .text:00000000000000e0 .L0 
     /tmp/ccM3nXtL.s:224    .text:00000000000000e4 .L0 
     /tmp/ccM3nXtL.s:229    .text:00000000000000f4 .L0 
     /tmp/ccM3nXtL.s:230    .text:00000000000000f4 .L0 
     /tmp/ccM3nXtL.s:232    .text:00000000000000f8 .L0 
     /tmp/ccM3nXtL.s:235    .text:0000000000000100 .L0 
     /tmp/ccM3nXtL.s:236    .text:0000000000000100 .L0 
     /tmp/ccM3nXtL.s:247    .text:0000000000000114 .L0 
     /tmp/ccM3nXtL.s:248    .text:0000000000000114 .L0 
     /tmp/ccM3nXtL.s:249    .text:0000000000000114 .L0 
  src/../h/riscv.hpp:109    .text:0000000000000114 .L0 
     /tmp/ccM3nXtL.s:257    .text:000000000000011c .L0 
     /tmp/ccM3nXtL.s:258    .text:000000000000011c .L0 
     /tmp/ccM3nXtL.s:262    .text:0000000000000120 .L0 
     /tmp/ccM3nXtL.s:264    .text:0000000000000124 .L0 
     /tmp/ccM3nXtL.s:268    .text:0000000000000128 .L0 
     /tmp/ccM3nXtL.s:269    .text:0000000000000128 .L0 
     /tmp/ccM3nXtL.s:270    .text:0000000000000128 .L0 
  src/../h/riscv.hpp:185    .text:0000000000000128 .L0 
     /tmp/ccM3nXtL.s:278    .text:0000000000000130 .L0 
     /tmp/ccM3nXtL.s:279    .text:0000000000000130 .L0 
     /tmp/ccM3nXtL.s:283    .text:0000000000000134 .L0 
     /tmp/ccM3nXtL.s:285    .text:0000000000000138 .L0 
     /tmp/ccM3nXtL.s:286    .text:0000000000000138 .L0 
     /tmp/ccM3nXtL.s:287    .text:0000000000000138 .L0 
     /tmp/ccM3nXtL.s:288    .text:0000000000000138 .L0 
     /tmp/ccM3nXtL.s:289    .text:0000000000000138 .L0 
     /tmp/ccM3nXtL.s:291    .text:000000000000013c .L0 
     /tmp/ccM3nXtL.s:378    .text:0000000000000170 .L0 
     /tmp/ccM3nXtL.s:379    .text:0000000000000170 .L0 
     /tmp/ccM3nXtL.s:380    .text:0000000000000170 .L0 
     /tmp/ccM3nXtL.s:381    .text:0000000000000170 .L0 
     /tmp/ccM3nXtL.s:385    .text:0000000000000180 .L0 
     /tmp/ccM3nXtL.s:388    .text:0000000000000188 .L0 
     /tmp/ccM3nXtL.s:389    .text:0000000000000188 .L0 
     /tmp/ccM3nXtL.s:392    .text:0000000000000190 .L0 
GAS LISTING /tmp/ccM3nXtL.s 			page 52


     /tmp/ccM3nXtL.s:394    .text:0000000000000194 .L0 
     /tmp/ccM3nXtL.s:397    .text:00000000000001a0 .L0 
     /tmp/ccM3nXtL.s:400    .text:00000000000001a8 .L0 
     /tmp/ccM3nXtL.s:402    .text:00000000000001ac .L0 
     /tmp/ccM3nXtL.s:405    .text:00000000000001b0 .L0 
     /tmp/ccM3nXtL.s:406    .text:00000000000001b0 .L0 
     /tmp/ccM3nXtL.s:407    .text:00000000000001b0 .L0 
     /tmp/ccM3nXtL.s:409    .text:00000000000001b4 .L0 
     /tmp/ccM3nXtL.s:413    .text:00000000000001c0 .L0 
       src/riscv.cpp:42     .text:00000000000001c0 .L0 
     /tmp/ccM3nXtL.s:419    .text:00000000000001c4 .L0 
       src/riscv.cpp:43     .text:00000000000001c4 .L0 
     /tmp/ccM3nXtL.s:427    .text:00000000000001c8 .L0 
     /tmp/ccM3nXtL.s:428    .text:00000000000001c8 .L0 
     /tmp/ccM3nXtL.s:429    .text:00000000000001c8 .L0 
     /tmp/ccM3nXtL.s:434    .text:00000000000001cc .L0 
  src/../h/riscv.hpp:191    .text:00000000000001cc .L0 
     /tmp/ccM3nXtL.s:444    .text:00000000000001d0 .L0 
     /tmp/ccM3nXtL.s:445    .text:00000000000001d0 .L0 
     /tmp/ccM3nXtL.s:450    .text:00000000000001d4 .L0 
  src/../h/riscv.hpp:115    .text:00000000000001d4 .L0 
     /tmp/ccM3nXtL.s:463    .text:00000000000001d8 .L0 
     /tmp/ccM3nXtL.s:464    .text:00000000000001dc .L0 
     /tmp/ccM3nXtL.s:465    .text:00000000000001dc .L0 
     /tmp/ccM3nXtL.s:467    .text:00000000000001e0 .L0 
     /tmp/ccM3nXtL.s:468    .text:00000000000001e0 .L0 
     /tmp/ccM3nXtL.s:470    .text:00000000000001e4 .L0 
     /tmp/ccM3nXtL.s:472    .text:00000000000001e8 .L0 
     /tmp/ccM3nXtL.s:474    .text:00000000000001ec .L0 
     /tmp/ccM3nXtL.s:476    .text:00000000000001f0 .L0 
     /tmp/ccM3nXtL.s:478    .text:00000000000001f4 .L0 
     /tmp/ccM3nXtL.s:480    .text:00000000000001f8 .L0 
     /tmp/ccM3nXtL.s:482    .text:00000000000001fc .L0 
     /tmp/ccM3nXtL.s:484    .text:0000000000000200 .L0 
     /tmp/ccM3nXtL.s:486    .text:0000000000000204 .L0 
     /tmp/ccM3nXtL.s:489    .text:0000000000000208 .L0 
     /tmp/ccM3nXtL.s:493    .text:0000000000000208 .L0 
     /tmp/ccM3nXtL.s:494    .text:0000000000000208 .L0 
     /tmp/ccM3nXtL.s:495    .text:0000000000000208 .L0 
     /tmp/ccM3nXtL.s:499    .text:0000000000000214 .L0 
     /tmp/ccM3nXtL.s:500    .text:0000000000000214 .L0 
       src/riscv.cpp:47     .text:0000000000000218 .L0 
     /tmp/ccM3nXtL.s:507    .text:000000000000021c .L0 
       src/riscv.cpp:48     .text:000000000000021c .L0 
     /tmp/ccM3nXtL.s:513    .text:0000000000000220 .L0 
     /tmp/ccM3nXtL.s:516    .text:0000000000000224 .L0 
     /tmp/ccM3nXtL.s:517    .text:0000000000000224 .L0 
     /tmp/ccM3nXtL.s:518    .text:0000000000000224 .L0 
     /tmp/ccM3nXtL.s:525    .text:000000000000023c .L0 
     /tmp/ccM3nXtL.s:527    .text:0000000000000240 .L0 
     /tmp/ccM3nXtL.s:528    .text:0000000000000240 .L0 
     /tmp/ccM3nXtL.s:531    .text:000000000000024c .L0 
     /tmp/ccM3nXtL.s:533    .text:0000000000000250 .L0 
     /tmp/ccM3nXtL.s:534    .text:0000000000000250 .L0 
     /tmp/ccM3nXtL.s:538    .text:0000000000000258 .L0 
     /tmp/ccM3nXtL.s:539    .text:0000000000000258 .L0 
     /tmp/ccM3nXtL.s:542    .text:0000000000000264 .L0 
GAS LISTING /tmp/ccM3nXtL.s 			page 53


     /tmp/ccM3nXtL.s:544    .text:0000000000000268 .L0 
     /tmp/ccM3nXtL.s:545    .text:0000000000000268 .L0 
     /tmp/ccM3nXtL.s:550    .text:0000000000000274 .L0 
     /tmp/ccM3nXtL.s:551    .text:0000000000000274 .L0 
     /tmp/ccM3nXtL.s:552    .text:0000000000000274 .L0 
     /tmp/ccM3nXtL.s:559    .text:0000000000000280 .L0 
     /tmp/ccM3nXtL.s:560    .text:0000000000000280 .L0 
     /tmp/ccM3nXtL.s:566    .text:0000000000000288 .L0 
     /tmp/ccM3nXtL.s:567    .text:0000000000000288 .L0 
     /tmp/ccM3nXtL.s:570    .text:0000000000000290 .L0 
     /tmp/ccM3nXtL.s:573    .text:0000000000000294 .L0 
     /tmp/ccM3nXtL.s:574    .text:0000000000000294 .L0 
     /tmp/ccM3nXtL.s:575    .text:0000000000000294 .L0 
     /tmp/ccM3nXtL.s:578    .text:00000000000002a0 .L0 
     /tmp/ccM3nXtL.s:579    .text:00000000000002a0 .L0 
     /tmp/ccM3nXtL.s:582    .text:00000000000002a8 .L0 
     /tmp/ccM3nXtL.s:585    .text:00000000000002ac .L0 
     /tmp/ccM3nXtL.s:586    .text:00000000000002ac .L0 
     /tmp/ccM3nXtL.s:587    .text:00000000000002ac .L0 
     /tmp/ccM3nXtL.s:591    .text:00000000000002b8 .L0 
     /tmp/ccM3nXtL.s:594    .text:00000000000002bc .L0 
     /tmp/ccM3nXtL.s:595    .text:00000000000002bc .L0 
     /tmp/ccM3nXtL.s:596    .text:00000000000002bc .L0 
     /tmp/ccM3nXtL.s:602    .text:00000000000002d0 .L0 
     /tmp/ccM3nXtL.s:604    .text:00000000000002d4 .L0 
     /tmp/ccM3nXtL.s:605    .text:00000000000002d4 .L0 
     /tmp/ccM3nXtL.s:608    .text:00000000000002e0 .L0 
     /tmp/ccM3nXtL.s:610    .text:00000000000002e4 .L0 
     /tmp/ccM3nXtL.s:611    .text:00000000000002e4 .L0 
     /tmp/ccM3nXtL.s:615    .text:00000000000002ec .L0 
     /tmp/ccM3nXtL.s:616    .text:00000000000002ec .L0 
     /tmp/ccM3nXtL.s:619    .text:00000000000002f8 .L0 
     /tmp/ccM3nXtL.s:621    .text:00000000000002fc .L0 
     /tmp/ccM3nXtL.s:622    .text:00000000000002fc .L0 
     /tmp/ccM3nXtL.s:627    .text:0000000000000308 .L0 
     /tmp/ccM3nXtL.s:628    .text:0000000000000308 .L0 
     /tmp/ccM3nXtL.s:629    .text:0000000000000308 .L0 
     /tmp/ccM3nXtL.s:633    .text:0000000000000314 .L0 
     /tmp/ccM3nXtL.s:635    .text:0000000000000318 .L0 
     /tmp/ccM3nXtL.s:636    .text:0000000000000318 .L0 
     /tmp/ccM3nXtL.s:639    .text:0000000000000324 .L0 
     /tmp/ccM3nXtL.s:641    .text:0000000000000328 .L0 
     /tmp/ccM3nXtL.s:642    .text:0000000000000328 .L0 
     /tmp/ccM3nXtL.s:646    .text:0000000000000330 .L0 
     /tmp/ccM3nXtL.s:647    .text:0000000000000330 .L0 
     /tmp/ccM3nXtL.s:650    .text:000000000000033c .L0 
     /tmp/ccM3nXtL.s:652    .text:0000000000000340 .L0 
     /tmp/ccM3nXtL.s:653    .text:0000000000000340 .L0 
     /tmp/ccM3nXtL.s:658    .text:000000000000034c .L0 
     /tmp/ccM3nXtL.s:659    .text:000000000000034c .L0 
     /tmp/ccM3nXtL.s:660    .text:000000000000034c .L0 
     /tmp/ccM3nXtL.s:664    .text:0000000000000358 .L0 
     /tmp/ccM3nXtL.s:666    .text:000000000000035c .L0 
     /tmp/ccM3nXtL.s:667    .text:000000000000035c .L0 
     /tmp/ccM3nXtL.s:670    .text:0000000000000368 .L0 
     /tmp/ccM3nXtL.s:672    .text:000000000000036c .L0 
     /tmp/ccM3nXtL.s:673    .text:000000000000036c .L0 
GAS LISTING /tmp/ccM3nXtL.s 			page 54


     /tmp/ccM3nXtL.s:677    .text:0000000000000374 .L0 
     /tmp/ccM3nXtL.s:678    .text:0000000000000374 .L0 
     /tmp/ccM3nXtL.s:681    .text:0000000000000380 .L0 
     /tmp/ccM3nXtL.s:683    .text:0000000000000384 .L0 
     /tmp/ccM3nXtL.s:684    .text:0000000000000384 .L0 
     /tmp/ccM3nXtL.s:689    .text:0000000000000390 .L0 
     /tmp/ccM3nXtL.s:690    .text:0000000000000390 .L0 
     /tmp/ccM3nXtL.s:691    .text:0000000000000390 .L0 
     /tmp/ccM3nXtL.s:695    .text:000000000000039c .L0 
     /tmp/ccM3nXtL.s:697    .text:00000000000003a0 .L0 
     /tmp/ccM3nXtL.s:698    .text:00000000000003a0 .L0 
     /tmp/ccM3nXtL.s:701    .text:00000000000003ac .L0 
     /tmp/ccM3nXtL.s:703    .text:00000000000003b0 .L0 
     /tmp/ccM3nXtL.s:704    .text:00000000000003b0 .L0 
     /tmp/ccM3nXtL.s:708    .text:00000000000003b8 .L0 
     /tmp/ccM3nXtL.s:709    .text:00000000000003b8 .L0 
     /tmp/ccM3nXtL.s:712    .text:00000000000003c4 .L0 
     /tmp/ccM3nXtL.s:714    .text:00000000000003c8 .L0 
     /tmp/ccM3nXtL.s:715    .text:00000000000003c8 .L0 
     /tmp/ccM3nXtL.s:720    .text:00000000000003d4 .L0 
     /tmp/ccM3nXtL.s:721    .text:00000000000003d4 .L0 
     /tmp/ccM3nXtL.s:722    .text:00000000000003d4 .L0 
     /tmp/ccM3nXtL.s:726    .text:00000000000003e0 .L0 
     /tmp/ccM3nXtL.s:728    .text:00000000000003e4 .L0 
     /tmp/ccM3nXtL.s:729    .text:00000000000003e4 .L0 
     /tmp/ccM3nXtL.s:732    .text:00000000000003ec .L0 
     /tmp/ccM3nXtL.s:734    .text:00000000000003f0 .L0 
     /tmp/ccM3nXtL.s:735    .text:00000000000003f0 .L0 
     /tmp/ccM3nXtL.s:738    .text:00000000000003fc .L0 
     /tmp/ccM3nXtL.s:740    .text:0000000000000400 .L0 
     /tmp/ccM3nXtL.s:741    .text:0000000000000400 .L0 
     /tmp/ccM3nXtL.s:745    .text:0000000000000408 .L0 
     /tmp/ccM3nXtL.s:746    .text:0000000000000408 .L0 
     /tmp/ccM3nXtL.s:749    .text:0000000000000414 .L0 
     /tmp/ccM3nXtL.s:751    .text:0000000000000418 .L0 
     /tmp/ccM3nXtL.s:752    .text:0000000000000418 .L0 
     /tmp/ccM3nXtL.s:755    .text:0000000000000420 .L0 
     /tmp/ccM3nXtL.s:759    .text:0000000000000428 .L0 
     /tmp/ccM3nXtL.s:760    .text:0000000000000428 .L0 
     /tmp/ccM3nXtL.s:763    .text:0000000000000430 .L0 
     /tmp/ccM3nXtL.s:766    .text:0000000000000438 .L0 
     /tmp/ccM3nXtL.s:767    .text:0000000000000438 .L0 
     /tmp/ccM3nXtL.s:772    .text:0000000000000444 .L0 
     /tmp/ccM3nXtL.s:773    .text:0000000000000444 .L0 
     /tmp/ccM3nXtL.s:778    .text:0000000000000450 .L0 
     /tmp/ccM3nXtL.s:779    .text:0000000000000450 .L0 
     /tmp/ccM3nXtL.s:780    .text:0000000000000450 .L0 
     /tmp/ccM3nXtL.s:785    .text:0000000000000460 .L0 
     /tmp/ccM3nXtL.s:787    .text:0000000000000464 .L0 
     /tmp/ccM3nXtL.s:788    .text:0000000000000464 .L0 
     /tmp/ccM3nXtL.s:791    .text:000000000000046c .L0 
     /tmp/ccM3nXtL.s:793    .text:0000000000000470 .L0 
     /tmp/ccM3nXtL.s:794    .text:0000000000000470 .L0 
     /tmp/ccM3nXtL.s:797    .text:000000000000047c .L0 
     /tmp/ccM3nXtL.s:799    .text:0000000000000480 .L0 
     /tmp/ccM3nXtL.s:800    .text:0000000000000480 .L0 
     /tmp/ccM3nXtL.s:804    .text:0000000000000488 .L0 
GAS LISTING /tmp/ccM3nXtL.s 			page 55


     /tmp/ccM3nXtL.s:805    .text:0000000000000488 .L0 
     /tmp/ccM3nXtL.s:808    .text:0000000000000494 .L0 
     /tmp/ccM3nXtL.s:810    .text:0000000000000498 .L0 
     /tmp/ccM3nXtL.s:811    .text:0000000000000498 .L0 
     /tmp/ccM3nXtL.s:814    .text:00000000000004a0 .L0 
     /tmp/ccM3nXtL.s:818    .text:00000000000004a8 .L0 
     /tmp/ccM3nXtL.s:819    .text:00000000000004a8 .L0 
     /tmp/ccM3nXtL.s:822    .text:00000000000004b0 .L0 
     /tmp/ccM3nXtL.s:825    .text:00000000000004b8 .L0 
     /tmp/ccM3nXtL.s:826    .text:00000000000004b8 .L0 
     /tmp/ccM3nXtL.s:831    .text:00000000000004c4 .L0 
     /tmp/ccM3nXtL.s:832    .text:00000000000004c4 .L0 
     /tmp/ccM3nXtL.s:837    .text:00000000000004d0 .L0 
     /tmp/ccM3nXtL.s:838    .text:00000000000004d0 .L0 
     /tmp/ccM3nXtL.s:839    .text:00000000000004d0 .L0 
     /tmp/ccM3nXtL.s:844    .text:00000000000004e0 .L0 
     /tmp/ccM3nXtL.s:845    .text:00000000000004e0 .L0 
     /tmp/ccM3nXtL.s:848    .text:00000000000004e8 .L0 
     /tmp/ccM3nXtL.s:851    .text:00000000000004f0 .L0 
     /tmp/ccM3nXtL.s:852    .text:00000000000004f0 .L0 
     /tmp/ccM3nXtL.s:858    .text:0000000000000500 .L0 
     /tmp/ccM3nXtL.s:859    .text:0000000000000500 .L0 
     /tmp/ccM3nXtL.s:860    .text:0000000000000500 .L0 
     /tmp/ccM3nXtL.s:863    .text:0000000000000508 .L0 
     /tmp/ccM3nXtL.s:865    .text:000000000000050c .L0 
     /tmp/ccM3nXtL.s:866    .text:000000000000050c .L0 
     /tmp/ccM3nXtL.s:869    .text:0000000000000518 .L0 
     /tmp/ccM3nXtL.s:872    .text:0000000000000520 .L0 
     /tmp/ccM3nXtL.s:875    .text:0000000000000524 .L0 
     /tmp/ccM3nXtL.s:876    .text:0000000000000524 .L0 
     /tmp/ccM3nXtL.s:877    .text:0000000000000524 .L0 
     /tmp/ccM3nXtL.s:880    .text:0000000000000530 .L0 
     /tmp/ccM3nXtL.s:881    .text:0000000000000530 .L0 
     /tmp/ccM3nXtL.s:884    .text:0000000000000538 .L0 
     /tmp/ccM3nXtL.s:890    .text:000000000000053c .L0 
     /tmp/ccM3nXtL.s:891    .text:000000000000053c .L0 
     /tmp/ccM3nXtL.s:892    .text:000000000000053c .L0 
     /tmp/ccM3nXtL.s:896    .text:000000000000054c .L0 
     /tmp/ccM3nXtL.s:899    .text:0000000000000554 .L0 
     /tmp/ccM3nXtL.s:900    .text:0000000000000554 .L0 
     /tmp/ccM3nXtL.s:903    .text:000000000000055c .L0 
     /tmp/ccM3nXtL.s:905    .text:0000000000000560 .L0 
     /tmp/ccM3nXtL.s:908    .text:000000000000056c .L0 
     /tmp/ccM3nXtL.s:911    .text:0000000000000574 .L0 
     /tmp/ccM3nXtL.s:913    .text:0000000000000578 .L0 
     /tmp/ccM3nXtL.s:919    .text:000000000000057c .L0 
     /tmp/ccM3nXtL.s:920    .text:000000000000057c .L0 
     /tmp/ccM3nXtL.s:921    .text:000000000000057c .L0 
     /tmp/ccM3nXtL.s:931    .text:0000000000000584 .L0 
     /tmp/ccM3nXtL.s:932    .text:0000000000000584 .L0 
     /tmp/ccM3nXtL.s:936    .text:0000000000000590 .L0 
     /tmp/ccM3nXtL.s:937    .text:0000000000000590 .L0 
     /tmp/ccM3nXtL.s:943    .text:0000000000000598 .L0 
     /tmp/ccM3nXtL.s:951    .text:00000000000005a0 .L0 
     /tmp/ccM3nXtL.s:952    .text:00000000000005a0 .L0 
     /tmp/ccM3nXtL.s:955    .text:00000000000005a4 .L0 
     /tmp/ccM3nXtL.s:956    .text:00000000000005a4 .L0 
GAS LISTING /tmp/ccM3nXtL.s 			page 56


     /tmp/ccM3nXtL.s:958    .text:00000000000005a8 .L0 
     /tmp/ccM3nXtL.s:960    .text:00000000000005ac .L0 
     /tmp/ccM3nXtL.s:963    .text:00000000000005b4 .L0 
     /tmp/ccM3nXtL.s:964    .text:00000000000005b4 .L0 
     /tmp/ccM3nXtL.s:967    .text:00000000000005b8 .L0 
     /tmp/ccM3nXtL.s:968    .text:00000000000005b8 .L0 
     /tmp/ccM3nXtL.s:970    .text:00000000000005bc .L0 
     /tmp/ccM3nXtL.s:972    .text:00000000000005c0 .L0 
     /tmp/ccM3nXtL.s:974    .text:00000000000005c4 .L0 
     /tmp/ccM3nXtL.s:975    .text:00000000000005c4 .L0 
     /tmp/ccM3nXtL.s:977    .text:00000000000005c8 .L0 
     /tmp/ccM3nXtL.s:978    .text:00000000000005c8 .L0 
     /tmp/ccM3nXtL.s:985    .text:00000000000005d4 .L0 
     /tmp/ccM3nXtL.s:986    .text:00000000000005d4 .L0 
     /tmp/ccM3nXtL.s:988    .text:00000000000005d8 .L0 
     /tmp/ccM3nXtL.s:991    .text:00000000000005e4 .L0 
     /tmp/ccM3nXtL.s:993    .text:00000000000005e8 .L0 
     /tmp/ccM3nXtL.s:998    .text:00000000000005ec .L0 
     /tmp/ccM3nXtL.s:1000   .text:00000000000005f0 .L0 
     /tmp/ccM3nXtL.s:1003   .text:00000000000005f4 .L0 
     /tmp/ccM3nXtL.s:1004   .text:00000000000005f4 .L0 
     /tmp/ccM3nXtL.s:1006   .text:00000000000005f8 .L0 
     /tmp/ccM3nXtL.s:1013   .text:0000000000000600 .L0 
     /tmp/ccM3nXtL.s:1015   .text:0000000000000604 .L0 
     /tmp/ccM3nXtL.s:1018   .text:0000000000000610 .L0 
     /tmp/ccM3nXtL.s:1024   .text:0000000000000614 .L0 
     /tmp/ccM3nXtL.s:1030   .text:0000000000000620 .L0 
     /tmp/ccM3nXtL.s:1033   .text:0000000000000624 .L0 
     /tmp/ccM3nXtL.s:1039   .text:000000000000062c .L0 
     /tmp/ccM3nXtL.s:1041   .text:0000000000000630 .L0 
     /tmp/ccM3nXtL.s:1043   .text:0000000000000634 .L0 
     /tmp/ccM3nXtL.s:1046   .text:0000000000000640 .L0 
     /tmp/ccM3nXtL.s:1052   .text:0000000000000644 .L0 
     /tmp/ccM3nXtL.s:1062   .text:0000000000000650 .L0 
     /tmp/ccM3nXtL.s:1064   .text:0000000000000654 .L0 
     /tmp/ccM3nXtL.s:1065   .text:0000000000000654 .L0 
     /tmp/ccM3nXtL.s:1068   .text:0000000000000658 .L0 
     /tmp/ccM3nXtL.s:1070   .text:000000000000065c .L0 
     /tmp/ccM3nXtL.s:1071   .text:000000000000065c .L0 
     /tmp/ccM3nXtL.s:1080   .text:000000000000066c .L0 
     /tmp/ccM3nXtL.s:1090   .text:000000000000067c .L0 
     /tmp/ccM3nXtL.s:1091   .text:000000000000067c .L0 
     /tmp/ccM3nXtL.s:1098   .text:000000000000068c .L0 
     /tmp/ccM3nXtL.s:1099   .text:000000000000068c .L0 
     /tmp/ccM3nXtL.s:1103   .text:0000000000000698 .L0 
     /tmp/ccM3nXtL.s:1104   .text:0000000000000698 .L0 
     /tmp/ccM3nXtL.s:1111   .text:00000000000006a0 .L0 
     /tmp/ccM3nXtL.s:1120   .text:00000000000006a8 .L0 
     /tmp/ccM3nXtL.s:1121   .text:00000000000006a8 .L0 
     /tmp/ccM3nXtL.s:1124   .text:00000000000006ac .L0 
     /tmp/ccM3nXtL.s:1125   .text:00000000000006ac .L0 
     /tmp/ccM3nXtL.s:1127   .text:00000000000006b0 .L0 
     /tmp/ccM3nXtL.s:1129   .text:00000000000006b4 .L0 
     /tmp/ccM3nXtL.s:1132   .text:00000000000006bc .L0 
     /tmp/ccM3nXtL.s:1133   .text:00000000000006bc .L0 
     /tmp/ccM3nXtL.s:1137   .text:00000000000006c0 .L0 
     /tmp/ccM3nXtL.s:1138   .text:00000000000006c0 .L0 
GAS LISTING /tmp/ccM3nXtL.s 			page 57


     /tmp/ccM3nXtL.s:1140   .text:00000000000006c4 .L0 
     /tmp/ccM3nXtL.s:1142   .text:00000000000006c8 .L0 
     /tmp/ccM3nXtL.s:1145   .text:00000000000006cc .L0 
     /tmp/ccM3nXtL.s:1146   .text:00000000000006cc .L0 
     /tmp/ccM3nXtL.s:1151   .text:00000000000006d0 .L0 
     /tmp/ccM3nXtL.s:1152   .text:00000000000006d0 .L0 
     /tmp/ccM3nXtL.s:1154   .text:00000000000006d4 .L0 
     /tmp/ccM3nXtL.s:1157   .text:00000000000006e0 .L0 
     /tmp/ccM3nXtL.s:1159   .text:00000000000006e4 .L0 
     /tmp/ccM3nXtL.s:1163   .text:00000000000006ec .L0 
     /tmp/ccM3nXtL.s:1165   .text:00000000000006f0 .L0 
     /tmp/ccM3nXtL.s:1168   .text:00000000000006fc .L0 
     /tmp/ccM3nXtL.s:1174   .text:0000000000000700 .L0 
     /tmp/ccM3nXtL.s:1180   .text:000000000000070c .L0 
     /tmp/ccM3nXtL.s:1183   .text:0000000000000710 .L0 
     /tmp/ccM3nXtL.s:1189   .text:0000000000000718 .L0 
     /tmp/ccM3nXtL.s:1196   .text:0000000000000728 .L0 
     /tmp/ccM3nXtL.s:1197   .text:0000000000000728 .L0 
     /tmp/ccM3nXtL.s:1199   .text:000000000000072c .L0 
     /tmp/ccM3nXtL.s:1203   .text:0000000000000730 .L0 
     /tmp/ccM3nXtL.s:1205   .text:0000000000000734 .L0 
     /tmp/ccM3nXtL.s:1207   .text:0000000000000738 .L0 
     /tmp/ccM3nXtL.s:1209   .text:000000000000073c .L0 
     /tmp/ccM3nXtL.s:1211   .text:0000000000000740 .L0 
     /tmp/ccM3nXtL.s:1214   .text:000000000000074c .L0 
     /tmp/ccM3nXtL.s:1220   .text:0000000000000750 .L0 
     /tmp/ccM3nXtL.s:1230   .text:000000000000075c .L0 
     /tmp/ccM3nXtL.s:1231   .text:000000000000075c .L0 
     /tmp/ccM3nXtL.s:1233   .text:0000000000000760 .L0 
     /tmp/ccM3nXtL.s:1235   .text:0000000000000764 .L0 
     /tmp/ccM3nXtL.s:1240   .text:0000000000000768 .L0 
     /tmp/ccM3nXtL.s:1241   .text:0000000000000768 .L0 
     /tmp/ccM3nXtL.s:1244   .text:000000000000076c .L0 
     /tmp/ccM3nXtL.s:1251   .text:0000000000000774 .L0 
     /tmp/ccM3nXtL.s:1253   .text:0000000000000778 .L0 
     /tmp/ccM3nXtL.s:1255   .text:000000000000077c .L0 
     /tmp/ccM3nXtL.s:1258   .text:0000000000000780 .L0 
     /tmp/ccM3nXtL.s:1260   .text:0000000000000784 .L0 
     /tmp/ccM3nXtL.s:1263   .text:0000000000000788 .L0 
     /tmp/ccM3nXtL.s:1266   .text:000000000000078c .L0 
     /tmp/ccM3nXtL.s:1271   .text:0000000000000790 .L0 
     /tmp/ccM3nXtL.s:1279   .text:0000000000000798 .L0 
     /tmp/ccM3nXtL.s:1283   .text:000000000000079c .L0 
     /tmp/ccM3nXtL.s:1286   .text:00000000000007a0 .L0 
     /tmp/ccM3nXtL.s:1288   .text:00000000000007a4 .L0 
     /tmp/ccM3nXtL.s:1291   .text:00000000000007a8 .L0 
     /tmp/ccM3nXtL.s:1294   .text:00000000000007ac .L0 
     /tmp/ccM3nXtL.s:1300   .text:00000000000007b4 .L0 
     /tmp/ccM3nXtL.s:1302   .text:00000000000007b8 .L0 
     /tmp/ccM3nXtL.s:1306   .text:00000000000007c0 .L0 
     /tmp/ccM3nXtL.s:1315   .text:00000000000007c8 .L0 
     /tmp/ccM3nXtL.s:1316   .text:00000000000007c8 .L0 
     /tmp/ccM3nXtL.s:1318   .text:00000000000007cc .L0 
     /tmp/ccM3nXtL.s:1320   .text:00000000000007d0 .L0 
     /tmp/ccM3nXtL.s:1321   .text:00000000000007d0 .L0 
     /tmp/ccM3nXtL.s:1323   .text:00000000000007d4 .L0 
     /tmp/ccM3nXtL.s:1325   .text:00000000000007d8 .L0 
GAS LISTING /tmp/ccM3nXtL.s 			page 58


     /tmp/ccM3nXtL.s:1326   .text:00000000000007d8 .L0 
     /tmp/ccM3nXtL.s:1330   .text:00000000000007e4 .L0 
     /tmp/ccM3nXtL.s:1332   .text:00000000000007e8 .L0 
     /tmp/ccM3nXtL.s:1333   .text:00000000000007e8 .L0 
     /tmp/ccM3nXtL.s:1336   .text:00000000000007ec .L0 
     /tmp/ccM3nXtL.s:1338   .text:00000000000007f0 .L0 
     /tmp/ccM3nXtL.s:1339   .text:00000000000007f0 .L0 
     /tmp/ccM3nXtL.s:1344   .text:0000000000000800 .L0 
     /tmp/ccM3nXtL.s:1345   .text:0000000000000800 .L0 
     /tmp/ccM3nXtL.s:1354   .text:0000000000000810 .L0 
     /tmp/ccM3nXtL.s:1355   .text:0000000000000810 .L0 
     /tmp/ccM3nXtL.s:1361   .text:0000000000000824 .L0 
     /tmp/ccM3nXtL.s:1362   .text:0000000000000824 .L0 
     /tmp/ccM3nXtL.s:1368   .text:0000000000000830 .L0 
     /tmp/ccM3nXtL.s:1369   .text:0000000000000830 .L0 
     /tmp/ccM3nXtL.s:1374   .text:0000000000000834 .L0 
     /tmp/ccM3nXtL.s:1379   .text:0000000000000838 .L0 
     /tmp/ccM3nXtL.s:1380   .text:0000000000000838 .L0 
     /tmp/ccM3nXtL.s:1381   .text:0000000000000838 .L0 
  src/../h/riscv.hpp:109    .text:0000000000000838 .L0 
     /tmp/ccM3nXtL.s:1389   .text:0000000000000840 .L0 
     /tmp/ccM3nXtL.s:1390   .text:0000000000000840 .L0 
     /tmp/ccM3nXtL.s:1394   .text:0000000000000844 .L0 
     /tmp/ccM3nXtL.s:1398   .text:0000000000000848 .L0 
     /tmp/ccM3nXtL.s:1399   .text:0000000000000848 .L0 
     /tmp/ccM3nXtL.s:1400   .text:0000000000000848 .L0 
  src/../h/riscv.hpp:185    .text:0000000000000848 .L0 
     /tmp/ccM3nXtL.s:1408   .text:0000000000000850 .L0 
     /tmp/ccM3nXtL.s:1409   .text:0000000000000850 .L0 
     /tmp/ccM3nXtL.s:1413   .text:0000000000000854 .L0 
     /tmp/ccM3nXtL.s:1415   .text:0000000000000858 .L0 
     /tmp/ccM3nXtL.s:1416   .text:0000000000000858 .L0 
     /tmp/ccM3nXtL.s:1419   .text:0000000000000864 .L0 
     /tmp/ccM3nXtL.s:1420   .text:0000000000000864 .L0 
     /tmp/ccM3nXtL.s:1423   .text:000000000000086c .L0 
     /tmp/ccM3nXtL.s:1424   .text:000000000000086c .L0 
     /tmp/ccM3nXtL.s:1429   .text:0000000000000870 .L0 
  src/../h/riscv.hpp:191    .text:0000000000000870 .L0 
     /tmp/ccM3nXtL.s:1439   .text:0000000000000874 .L0 
     /tmp/ccM3nXtL.s:1440   .text:0000000000000874 .L0 
     /tmp/ccM3nXtL.s:1445   .text:0000000000000878 .L0 
  src/../h/riscv.hpp:115    .text:0000000000000878 .L0 
     /tmp/ccM3nXtL.s:1452   .text:000000000000087c .L0 
     /tmp/ccM3nXtL.s:1463   .text:0000000000000880 .L0 
     /tmp/ccM3nXtL.s:1464   .text:0000000000000880 .L0 
     /tmp/ccM3nXtL.s:1467   .text:0000000000000888 .L0 
     /tmp/ccM3nXtL.s:1469   .text:000000000000088c .L0 
     /tmp/ccM3nXtL.s:1470   .text:000000000000088c .L0 
     /tmp/ccM3nXtL.s:1472   .text:0000000000000890 .L0 
     /tmp/ccM3nXtL.s:1476   .text:0000000000000898 .L0 
     /tmp/ccM3nXtL.s:1477   .text:0000000000000898 .L0 
     /tmp/ccM3nXtL.s:1478   .text:0000000000000898 .L0 
     /tmp/ccM3nXtL.s:1482   .text:00000000000008a8 .L0 
     /tmp/ccM3nXtL.s:1485   .text:00000000000008b0 .L0 
     /tmp/ccM3nXtL.s:1486   .text:00000000000008b0 .L0 
     /tmp/ccM3nXtL.s:1489   .text:00000000000008b8 .L0 
     /tmp/ccM3nXtL.s:1492   .text:00000000000008c0 .L0 
GAS LISTING /tmp/ccM3nXtL.s 			page 59


     /tmp/ccM3nXtL.s:1493   .text:00000000000008c0 .L0 
     /tmp/ccM3nXtL.s:1499   .text:00000000000008d8 .L0 
     /tmp/ccM3nXtL.s:1502   .text:00000000000008dc .L0 
     /tmp/ccM3nXtL.s:1503   .text:00000000000008dc .L0 
     /tmp/ccM3nXtL.s:1510   .text:00000000000008ec .L0 
     /tmp/ccM3nXtL.s:1513   .text:00000000000008f8 .L0 
     /tmp/ccM3nXtL.s:1516   .text:0000000000000900 .L0 
     /tmp/ccM3nXtL.s:1519   .text:0000000000000904 .L0 
     /tmp/ccM3nXtL.s:1520   .text:0000000000000904 .L0 
     /tmp/ccM3nXtL.s:1521   .text:0000000000000904 .L0 
     /tmp/ccM3nXtL.s:1525   .text:0000000000000914 .L0 
     /tmp/ccM3nXtL.s:1528   .text:000000000000091c .L0 
     /tmp/ccM3nXtL.s:1529   .text:000000000000091c .L0 
     /tmp/ccM3nXtL.s:1532   .text:0000000000000924 .L0 
     /tmp/ccM3nXtL.s:1535   .text:0000000000000928 .L0 
       src/riscv.cpp:310    .text:0000000000000928 .L0 
     /tmp/ccM3nXtL.s:1541   .text:0000000000000930 .L0 
       src/riscv.cpp:311    .text:0000000000000930 .L0 
     /tmp/ccM3nXtL.s:1546   .text:0000000000000934 .L0 
       src/riscv.cpp:312    .text:0000000000000934 .L0 
     /tmp/ccM3nXtL.s:1555   .text:0000000000000938 .L0 
     /tmp/ccM3nXtL.s:1556   .text:000000000000093c .L0 
     /tmp/ccM3nXtL.s:1569   .text:000000000000093c .L0 
     /tmp/ccM3nXtL.s:98     .rodata.str1.8:0000000000000000 .LC0
     /tmp/ccM3nXtL.s:236    .text:0000000000000100 .L0 
     /tmp/ccM3nXtL.s:304    .rodata:0000000000000000 .L12
     /tmp/ccM3nXtL.s:296    .text:0000000000000150 .L0 
     /tmp/ccM3nXtL.s:381    .text:0000000000000170 .L0 
     /tmp/ccM3nXtL.s:394    .text:0000000000000194 .L0 
     /tmp/ccM3nXtL.s:528    .text:0000000000000240 .L0 
     /tmp/ccM3nXtL.s:539    .text:0000000000000258 .L0 
     /tmp/ccM3nXtL.s:552    .text:0000000000000274 .L0 
     /tmp/ccM3nXtL.s:575    .text:0000000000000294 .L0 
     /tmp/ccM3nXtL.s:605    .text:00000000000002d4 .L0 
     /tmp/ccM3nXtL.s:616    .text:00000000000002ec .L0 
     /tmp/ccM3nXtL.s:636    .text:0000000000000318 .L0 
     /tmp/ccM3nXtL.s:647    .text:0000000000000330 .L0 
     /tmp/ccM3nXtL.s:667    .text:000000000000035c .L0 
     /tmp/ccM3nXtL.s:678    .text:0000000000000374 .L0 
     /tmp/ccM3nXtL.s:698    .text:00000000000003a0 .L0 
     /tmp/ccM3nXtL.s:709    .text:00000000000003b8 .L0 
     /tmp/ccM3nXtL.s:735    .text:00000000000003f0 .L0 
     /tmp/ccM3nXtL.s:746    .text:0000000000000408 .L0 
     /tmp/ccM3nXtL.s:794    .text:0000000000000470 .L0 
     /tmp/ccM3nXtL.s:805    .text:0000000000000488 .L0 
     /tmp/ccM3nXtL.s:866    .text:000000000000050c .L0 
     /tmp/ccM3nXtL.s:877    .text:0000000000000524 .L0 
     /tmp/ccM3nXtL.s:892    .text:000000000000053c .L0 
     /tmp/ccM3nXtL.s:905    .text:0000000000000560 .L0 
     /tmp/ccM3nXtL.s:932    .text:0000000000000584 .L0 
     /tmp/ccM3nXtL.s:988    .text:00000000000005d8 .L0 
     /tmp/ccM3nXtL.s:1015   .text:0000000000000604 .L0 
     /tmp/ccM3nXtL.s:1043   .text:0000000000000634 .L0 
     /tmp/ccM3nXtL.s:1071   .text:000000000000065c .L0 
     /tmp/ccM3nXtL.s:1080   .text:000000000000066c .L0 
     /tmp/ccM3nXtL.s:1091   .text:000000000000067c .L0 
     /tmp/ccM3nXtL.s:1099   .text:000000000000068c .L0 
GAS LISTING /tmp/ccM3nXtL.s 			page 60


     /tmp/ccM3nXtL.s:1154   .text:00000000000006d4 .L0 
     /tmp/ccM3nXtL.s:1165   .text:00000000000006f0 .L0 
     /tmp/ccM3nXtL.s:1189   .text:0000000000000718 .L0 
     /tmp/ccM3nXtL.s:1211   .text:0000000000000740 .L0 
     /tmp/ccM3nXtL.s:1339   .text:00000000000007f0 .L0 
     /tmp/ccM3nXtL.s:1345   .text:0000000000000800 .L0 
     /tmp/ccM3nXtL.s:1355   .text:0000000000000810 .L0 
     /tmp/ccM3nXtL.s:1362   .text:0000000000000824 .L0 
     /tmp/ccM3nXtL.s:1416   .text:0000000000000858 .L0 
     /tmp/ccM3nXtL.s:1478   .text:0000000000000898 .L0 
     /tmp/ccM3nXtL.s:1493   .text:00000000000008c0 .L0 
     /tmp/ccM3nXtL.s:1510   .text:00000000000008ec .L0 
     /tmp/ccM3nXtL.s:1521   .text:0000000000000904 .L0 
     /tmp/ccM3nXtL.s:240    .text:0000000000000114 .L6
     /tmp/ccM3nXtL.s:885    .text:000000000000053c .L7
     /tmp/ccM3nXtL.s:1454   .text:0000000000000880 .L77
     /tmp/ccM3nXtL.s:457    .text:00000000000001d8 .L5
     /tmp/ccM3nXtL.s:1517   .text:0000000000000904 .L70
     /tmp/ccM3nXtL.s:373    .text:0000000000000168 .L9
     /tmp/ccM3nXtL.s:873    .text:0000000000000524 .L10
     /tmp/ccM3nXtL.s:426    .text:00000000000001c8 .L27
     /tmp/ccM3nXtL.s:376    .text:0000000000000170 .L26
     /tmp/ccM3nXtL.s:536    .text:0000000000000258 .L28
     /tmp/ccM3nXtL.s:613    .text:00000000000002ec .L29
     /tmp/ccM3nXtL.s:644    .text:0000000000000330 .L30
     /tmp/ccM3nXtL.s:675    .text:0000000000000374 .L31
     /tmp/ccM3nXtL.s:706    .text:00000000000003b8 .L32
     /tmp/ccM3nXtL.s:743    .text:0000000000000408 .L33
     /tmp/ccM3nXtL.s:770    .text:0000000000000444 .L78
     /tmp/ccM3nXtL.s:757    .text:0000000000000428 .L34
     /tmp/ccM3nXtL.s:802    .text:0000000000000488 .L35
     /tmp/ccM3nXtL.s:829    .text:00000000000004c4 .L79
     /tmp/ccM3nXtL.s:816    .text:00000000000004a8 .L36
     /tmp/ccM3nXtL.s:914    .text:000000000000057c .L38
     /tmp/ccM3nXtL.s:948    .text:00000000000005a0 .L39
     /tmp/ccM3nXtL.s:1095   .text:000000000000068c .L40
     /tmp/ccM3nXtL.s:940    .text:0000000000000598 .L71
     /tmp/ccM3nXtL.s:1055   .text:0000000000000650 .L42
     /tmp/ccM3nXtL.s:1010   .text:0000000000000600 .L80
     /tmp/ccM3nXtL.s:1036   .text:000000000000062c .L81
     /tmp/ccM3nXtL.s:994    .text:00000000000005ec .L43
     /tmp/ccM3nXtL.s:1031   .text:0000000000000624 .L82
     /tmp/ccM3nXtL.s:1019   .text:0000000000000614 .L44
     /tmp/ccM3nXtL.s:1075   .text:000000000000066c .L83
     /tmp/ccM3nXtL.s:1085   .text:000000000000067c .L47
     /tmp/ccM3nXtL.s:945    .text:000000000000059c .L41
     /tmp/ccM3nXtL.s:1048   .text:0000000000000644 .L46
     /tmp/ccM3nXtL.s:1066   .text:0000000000000658 .L48
     /tmp/ccM3nXtL.s:1116   .text:00000000000006a8 .L49
     /tmp/ccM3nXtL.s:1349   .text:0000000000000810 .L50
     /tmp/ccM3nXtL.s:1107   .text:00000000000006a0 .L73
     /tmp/ccM3nXtL.s:1223   .text:000000000000075c .L52
     /tmp/ccM3nXtL.s:1161   .text:00000000000006ec .L84
     /tmp/ccM3nXtL.s:1201   .text:0000000000000730 .L53
     /tmp/ccM3nXtL.s:1181   .text:0000000000000710 .L85
     /tmp/ccM3nXtL.s:1169   .text:0000000000000700 .L54
     /tmp/ccM3nXtL.s:1216   .text:0000000000000750 .L56
GAS LISTING /tmp/ccM3nXtL.s 			page 61


     /tmp/ccM3nXtL.s:1194   .text:0000000000000728 .L55
     /tmp/ccM3nXtL.s:1186   .text:0000000000000718 .L86
     /tmp/ccM3nXtL.s:1281   .text:000000000000079c .L57
     /tmp/ccM3nXtL.s:1297   .text:00000000000007b4 .L87
     /tmp/ccM3nXtL.s:1304   .text:00000000000007c0 .L88
     /tmp/ccM3nXtL.s:1273   .text:0000000000000798 .L63
     /tmp/ccM3nXtL.s:1309   .text:00000000000007c8 .L58
     /tmp/ccM3nXtL.s:1247   .text:0000000000000774 .L89
     /tmp/ccM3nXtL.s:1256   .text:0000000000000780 .L61
     /tmp/ccM3nXtL.s:1261   .text:0000000000000788 .L62
     /tmp/ccM3nXtL.s:1342   .text:0000000000000800 .L64
     /tmp/ccM3nXtL.s:1113   .text:00000000000006a4 .L51
     /tmp/ccM3nXtL.s:1334   .text:00000000000007ec .L65
     /tmp/ccM3nXtL.s:1500   .text:00000000000008dc .L67
     /tmp/ccM3nXtL.s:1474   .text:0000000000000898 .L68
     /tmp/ccM3nXtL.s:1533   .text:0000000000000928 .L69
     /tmp/ccM3nXtL.s:1507   .text:00000000000008ec .L90
     /tmp/ccM3nXtL.s:403    .text:00000000000001b0 .L25
     /tmp/ccM3nXtL.s:488    .text:0000000000000208 .L24
     /tmp/ccM3nXtL.s:514    .text:0000000000000224 .L23
     /tmp/ccM3nXtL.s:548    .text:0000000000000274 .L22
     /tmp/ccM3nXtL.s:571    .text:0000000000000294 .L21
     /tmp/ccM3nXtL.s:592    .text:00000000000002bc .L20
     /tmp/ccM3nXtL.s:625    .text:0000000000000308 .L19
     /tmp/ccM3nXtL.s:656    .text:000000000000034c .L18
     /tmp/ccM3nXtL.s:687    .text:0000000000000390 .L17
     /tmp/ccM3nXtL.s:776    .text:0000000000000450 .L16
     /tmp/ccM3nXtL.s:718    .text:00000000000003d4 .L15
     /tmp/ccM3nXtL.s:583    .text:00000000000002ac .L14
     /tmp/ccM3nXtL.s:856    .text:0000000000000500 .L13
     /tmp/ccM3nXtL.s:835    .text:00000000000004d0 .L11
     /tmp/ccM3nXtL.s:4223   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccM3nXtL.s:6490   .debug_str:0000000000000cbd .LASF260
     /tmp/ccM3nXtL.s:6560   .debug_str:0000000000000f62 .LASF261
     /tmp/ccM3nXtL.s:6448   .debug_str:0000000000000ba8 .LASF262
     /tmp/ccM3nXtL.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccM3nXtL.s:1559   .text:000000000000093c .Letext0
     /tmp/ccM3nXtL.s:6048   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccM3nXtL.s:6238   .debug_str:00000000000005d1 .LASF0
     /tmp/ccM3nXtL.s:6276   .debug_str:0000000000000705 .LASF1
     /tmp/ccM3nXtL.s:6408   .debug_str:0000000000000a90 .LASF2
     /tmp/ccM3nXtL.s:6420   .debug_str:0000000000000ae3 .LASF4
     /tmp/ccM3nXtL.s:6252   .debug_str:000000000000063a .LASF3
     /tmp/ccM3nXtL.s:6068   .debug_str:0000000000000096 .LASF5
     /tmp/ccM3nXtL.s:6378   .debug_str:00000000000009bd .LASF6
     /tmp/ccM3nXtL.s:6366   .debug_str:0000000000000968 .LASF7
     /tmp/ccM3nXtL.s:6264   .debug_str:00000000000006af .LASF8
     /tmp/ccM3nXtL.s:6200   .debug_str:00000000000004a8 .LASF9
     /tmp/ccM3nXtL.s:6210   .debug_str:0000000000000504 .LASF10
     /tmp/ccM3nXtL.s:6118   .debug_str:0000000000000218 .LASF11
     /tmp/ccM3nXtL.s:6184   .debug_str:000000000000044e .LASF12
     /tmp/ccM3nXtL.s:6142   .debug_str:00000000000002d7 .LASF13
     /tmp/ccM3nXtL.s:6116   .debug_str:0000000000000208 .LASF14
     /tmp/ccM3nXtL.s:6462   .debug_str:0000000000000c06 .LASF15
     /tmp/ccM3nXtL.s:6170   .debug_str:00000000000003ac .LASF16
     /tmp/ccM3nXtL.s:6446   .debug_str:0000000000000b92 .LASF17
     /tmp/ccM3nXtL.s:6564   .debug_str:0000000000000f7b .LASF18
GAS LISTING /tmp/ccM3nXtL.s 			page 62


     /tmp/ccM3nXtL.s:6518   .debug_str:0000000000000e5c .LASF31
     /tmp/ccM3nXtL.s:6202   .debug_str:00000000000004b8 .LASF33
     /tmp/ccM3nXtL.s:6558   .debug_str:0000000000000f59 .LASF19
     /tmp/ccM3nXtL.s:6266   .debug_str:00000000000006c2 .LASF21
     /tmp/ccM3nXtL.s:6284   .debug_str:000000000000073c .LASF20
     /tmp/ccM3nXtL.s:6108   .debug_str:00000000000001ac .LASF22
     /tmp/ccM3nXtL.s:6086   .debug_str:0000000000000116 .LASF23
     /tmp/ccM3nXtL.s:6196   .debug_str:0000000000000482 .LASF24
     /tmp/ccM3nXtL.s:6164   .debug_str:0000000000000380 .LASF25
     /tmp/ccM3nXtL.s:6122   .debug_str:000000000000022c .LASF26
     /tmp/ccM3nXtL.s:6464   .debug_str:0000000000000c12 .LASF27
     /tmp/ccM3nXtL.s:6566   .debug_str:0000000000000f81 .LASF28
     /tmp/ccM3nXtL.s:6226   .debug_str:0000000000000574 .LASF29
     /tmp/ccM3nXtL.s:6178   .debug_str:00000000000003ff .LASF30
     /tmp/ccM3nXtL.s:6152   .debug_str:0000000000000320 .LASF32
     /tmp/ccM3nXtL.s:6360   .debug_str:0000000000000938 .LASF34
     /tmp/ccM3nXtL.s:6450   .debug_str:0000000000000bbf .LASF49
     /tmp/ccM3nXtL.s:6584   .debug_str:0000000000001016 .LASF35
     /tmp/ccM3nXtL.s:6292   .debug_str:0000000000000779 .LASF36
     /tmp/ccM3nXtL.s:6056   .debug_str:000000000000001b .LASF39
     /tmp/ccM3nXtL.s:6322   .debug_str:000000000000083e .LASF41
     /tmp/ccM3nXtL.s:6106   .debug_str:000000000000019c .LASF37
     /tmp/ccM3nXtL.s:6282   .debug_str:0000000000000728 .LASF38
     /tmp/ccM3nXtL.s:6444   .debug_str:0000000000000b7f .LASF40
     /tmp/ccM3nXtL.s:6432   .debug_str:0000000000000b20 .LASF42
     /tmp/ccM3nXtL.s:6350   .debug_str:00000000000008f5 .LASF43
     /tmp/ccM3nXtL.s:6376   .debug_str:00000000000009b3 .LASF44
     /tmp/ccM3nXtL.s:6236   .debug_str:00000000000005cb .LASF45
     /tmp/ccM3nXtL.s:6176   .debug_str:00000000000003e7 .LASF46
     /tmp/ccM3nXtL.s:6058   .debug_str:000000000000002b .LASF47
     /tmp/ccM3nXtL.s:6486   .debug_str:0000000000000c96 .LASF48
     /tmp/ccM3nXtL.s:6470   .debug_str:0000000000000c35 .LASF92
     /tmp/ccM3nXtL.s:6160   .debug_str:0000000000000371 .LASF50
     /tmp/ccM3nXtL.s:6472   .debug_str:0000000000000c3d .LASF51
     /tmp/ccM3nXtL.s:6336   .debug_str:0000000000000892 .LASF52
     /tmp/ccM3nXtL.s:6098   .debug_str:000000000000015f .LASF53
     /tmp/ccM3nXtL.s:6516   .debug_str:0000000000000e45 .LASF54
     /tmp/ccM3nXtL.s:6308   .debug_str:00000000000007df .LASF55
     /tmp/ccM3nXtL.s:6530   .debug_str:0000000000000e90 .LASF56
     /tmp/ccM3nXtL.s:6540   .debug_str:0000000000000ed5 .LASF57
     /tmp/ccM3nXtL.s:6578   .debug_str:0000000000000fd1 .LASF58
     /tmp/ccM3nXtL.s:6356   .debug_str:0000000000000927 .LASF263
     /tmp/ccM3nXtL.s:6388   .debug_str:0000000000000a14 .LASF59
     /tmp/ccM3nXtL.s:6302   .debug_str:00000000000007b9 .LASF60
     /tmp/ccM3nXtL.s:6460   .debug_str:0000000000000bf8 .LASF61
     /tmp/ccM3nXtL.s:6154   .debug_str:0000000000000328 .LASF62
     /tmp/ccM3nXtL.s:6280   .debug_str:0000000000000722 .LASF71
     /tmp/ccM3nXtL.s:6496   .debug_str:0000000000000d9e .LASF73
     /tmp/ccM3nXtL.s:6192   .debug_str:000000000000046e .LASF63
     /tmp/ccM3nXtL.s:6468   .debug_str:0000000000000c2c .LASF64
     /tmp/ccM3nXtL.s:6206   .debug_str:00000000000004dc .LASF65
     /tmp/ccM3nXtL.s:6300   .debug_str:00000000000007ac .LASF66
     /tmp/ccM3nXtL.s:6194   .debug_str:0000000000000476 .LASF67
     /tmp/ccM3nXtL.s:6410   .debug_str:0000000000000a9e .LASF68
     /tmp/ccM3nXtL.s:6422   .debug_str:0000000000000aea .LASF69
     /tmp/ccM3nXtL.s:6064   .debug_str:0000000000000075 .LASF70
     /tmp/ccM3nXtL.s:6162   .debug_str:0000000000000377 .LASF72
GAS LISTING /tmp/ccM3nXtL.s 			page 63


     /tmp/ccM3nXtL.s:6130   .debug_str:000000000000026e .LASF74
     /tmp/ccM3nXtL.s:6580   .debug_str:0000000000000fe7 .LASF264
     /tmp/ccM3nXtL.s:6054   .debug_str:0000000000000016 .LASF75
     /tmp/ccM3nXtL.s:6576   .debug_str:0000000000000fcb .LASF76
     /tmp/ccM3nXtL.s:6512   .debug_str:0000000000000e2e .LASF77
     /tmp/ccM3nXtL.s:6500   .debug_str:0000000000000db7 .LASF78
     /tmp/ccM3nXtL.s:6508   .debug_str:0000000000000e11 .LASF79
     /tmp/ccM3nXtL.s:6358   .debug_str:000000000000092c .LASF80
     /tmp/ccM3nXtL.s:6330   .debug_str:000000000000086f .LASF81
     /tmp/ccM3nXtL.s:6542   .debug_str:0000000000000ee0 .LASF82
     /tmp/ccM3nXtL.s:6404   .debug_str:0000000000000a73 .LASF83
     /tmp/ccM3nXtL.s:6382   .debug_str:00000000000009e4 .LASF84
     /tmp/ccM3nXtL.s:6104   .debug_str:000000000000018e .LASF235
     /tmp/ccM3nXtL.s:6286   .debug_str:0000000000000744 .LASF237
     /tmp/ccM3nXtL.s:6150   .debug_str:0000000000000312 .LASF104
     /tmp/ccM3nXtL.s:6062   .debug_str:000000000000004d .LASF106
     /tmp/ccM3nXtL.s:6428   .debug_str:0000000000000b09 .LASF87
     /tmp/ccM3nXtL.s:6416   .debug_str:0000000000000acd .LASF85
     /tmp/ccM3nXtL.s:6562   .debug_str:0000000000000f70 .LASF86
     /tmp/ccM3nXtL.s:6216   .debug_str:0000000000000524 .LASF88
     /tmp/ccM3nXtL.s:6052   .debug_str:000000000000000f .LASF89
     /tmp/ccM3nXtL.s:6140   .debug_str:00000000000002cc .LASF90
     /tmp/ccM3nXtL.s:6096   .debug_str:0000000000000155 .LASF91
     /tmp/ccM3nXtL.s:6438   .debug_str:0000000000000b45 .LASF93
     /tmp/ccM3nXtL.s:6120   .debug_str:0000000000000227 .LASF94
     /tmp/ccM3nXtL.s:6274   .debug_str:0000000000000700 .LASF95
     /tmp/ccM3nXtL.s:6520   .debug_str:0000000000000e67 .LASF96
     /tmp/ccM3nXtL.s:6454   .debug_str:0000000000000bd8 .LASF97
     /tmp/ccM3nXtL.s:6092   .debug_str:000000000000014b .LASF98
     /tmp/ccM3nXtL.s:6080   .debug_str:00000000000000f2 .LASF99
     /tmp/ccM3nXtL.s:6306   .debug_str:00000000000007d7 .LASF100
     /tmp/ccM3nXtL.s:6492   .debug_str:0000000000000d81 .LASF101
     /tmp/ccM3nXtL.s:6084   .debug_str:000000000000010c .LASF102
     /tmp/ccM3nXtL.s:6136   .debug_str:000000000000029a .LASF103
     /tmp/ccM3nXtL.s:6482   .debug_str:0000000000000c8b .LASF105
     /tmp/ccM3nXtL.s:6340   .debug_str:00000000000008b2 .LASF107
     /tmp/ccM3nXtL.s:6198   .debug_str:000000000000049e .LASF108
     /tmp/ccM3nXtL.s:6442   .debug_str:0000000000000b6e .LASF109
     /tmp/ccM3nXtL.s:6574   .debug_str:0000000000000fb7 .LASF265
     /tmp/ccM3nXtL.s:6228   .debug_str:000000000000057a .LASF266
     /tmp/ccM3nXtL.s:6368   .debug_str:000000000000097b .LASF110
     /tmp/ccM3nXtL.s:6526   .debug_str:0000000000000e81 .LASF111
     /tmp/ccM3nXtL.s:6272   .debug_str:00000000000006fb .LASF112
     /tmp/ccM3nXtL.s:6222   .debug_str:000000000000054a .LASF113
     /tmp/ccM3nXtL.s:6090   .debug_str:0000000000000133 .LASF114
     /tmp/ccM3nXtL.s:6548   .debug_str:0000000000000f19 .LASF115
     /tmp/ccM3nXtL.s:6078   .debug_str:00000000000000da .LASF116
     /tmp/ccM3nXtL.s:6110   .debug_str:00000000000001c6 .LASF267
     /tmp/ccM3nXtL.s:6342   .debug_str:00000000000008d8 .LASF117
     /tmp/ccM3nXtL.s:6328   .debug_str:000000000000086a .LASF118
     /tmp/ccM3nXtL.s:6466   .debug_str:0000000000000c19 .LASF119
     /tmp/ccM3nXtL.s:6182   .debug_str:0000000000000437 .LASF120
     /tmp/ccM3nXtL.s:6412   .debug_str:0000000000000aab .LASF268
     /tmp/ccM3nXtL.s:6398   .debug_str:0000000000000a4e .LASF269
     /tmp/ccM3nXtL.s:6402   .debug_str:0000000000000a6a .LASF121
     /tmp/ccM3nXtL.s:6112   .debug_str:00000000000001df .LASF122
     /tmp/ccM3nXtL.s:6294   .debug_str:000000000000078d .LASF123
GAS LISTING /tmp/ccM3nXtL.s 			page 64


     /tmp/ccM3nXtL.s:6172   .debug_str:00000000000003c2 .LASF124
     /tmp/ccM3nXtL.s:6362   .debug_str:0000000000000956 .LASF125
     /tmp/ccM3nXtL.s:6546   .debug_str:0000000000000efb .LASF126
     /tmp/ccM3nXtL.s:6594   .debug_str:0000000000001046 .LASF127
     /tmp/ccM3nXtL.s:6144   .debug_str:00000000000002e7 .LASF128
     /tmp/ccM3nXtL.s:6434   .debug_str:0000000000000b35 .LASF129
     /tmp/ccM3nXtL.s:6262   .debug_str:0000000000000692 .LASF130
     /tmp/ccM3nXtL.s:6394   .debug_str:0000000000000a40 .LASF131
     /tmp/ccM3nXtL.s:6060   .debug_str:0000000000000033 .LASF132
     /tmp/ccM3nXtL.s:6128   .debug_str:0000000000000260 .LASF133
     /tmp/ccM3nXtL.s:6502   .debug_str:0000000000000dc1 .LASF134
     /tmp/ccM3nXtL.s:6256   .debug_str:000000000000065c .LASF135
     /tmp/ccM3nXtL.s:6168   .debug_str:000000000000038b .LASF136
     /tmp/ccM3nXtL.s:6396   .debug_str:0000000000000a49 .LASF137
     /tmp/ccM3nXtL.s:6476   .debug_str:0000000000000c56 .LASF138
     /tmp/ccM3nXtL.s:6484   .debug_str:0000000000000c90 .LASF270
     /tmp/ccM3nXtL.s:6592   .debug_str:000000000000103c .LASF139
     /tmp/ccM3nXtL.s:6212   .debug_str:0000000000000512 .LASF140
     /tmp/ccM3nXtL.s:6474   .debug_str:0000000000000c48 .LASF141
     /tmp/ccM3nXtL.s:6384   .debug_str:00000000000009fa .LASF142
     /tmp/ccM3nXtL.s:6156   .debug_str:000000000000034f .LASF143
     /tmp/ccM3nXtL.s:6498   .debug_str:0000000000000dae .LASF144
     /tmp/ccM3nXtL.s:6132   .debug_str:0000000000000281 .LASF145
     /tmp/ccM3nXtL.s:6338   .debug_str:00000000000008a9 .LASF146
     /tmp/ccM3nXtL.s:6418   .debug_str:0000000000000ad8 .LASF147
     /tmp/ccM3nXtL.s:6316   .debug_str:000000000000081a .LASF148
     /tmp/ccM3nXtL.s:6304   .debug_str:00000000000007cb .LASF149
     /tmp/ccM3nXtL.s:6570   .debug_str:0000000000000fa3 .LASF150
     /tmp/ccM3nXtL.s:6320   .debug_str:0000000000000839 .LASF151
     /tmp/ccM3nXtL.s:6326   .debug_str:0000000000000865 .LASF152
     /tmp/ccM3nXtL.s:6310   .debug_str:00000000000007ec .LASF153
     /tmp/ccM3nXtL.s:6188   .debug_str:0000000000000462 .LASF154
     /tmp/ccM3nXtL.s:6514   .debug_str:0000000000000e36 .LASF155
     /tmp/ccM3nXtL.s:6386   .debug_str:0000000000000a06 .LASF156
     /tmp/ccM3nXtL.s:6278   .debug_str:0000000000000718 .LASF157
     /tmp/ccM3nXtL.s:6528   .debug_str:0000000000000e86 .LASF158
     /tmp/ccM3nXtL.s:6390   .debug_str:0000000000000a1c .LASF159
     /tmp/ccM3nXtL.s:6536   .debug_str:0000000000000ebf .LASF160
     /tmp/ccM3nXtL.s:6218   .debug_str:0000000000000531 .LASF161
     /tmp/ccM3nXtL.s:6318   .debug_str:0000000000000828 .LASF162
     /tmp/ccM3nXtL.s:6204   .debug_str:00000000000004cc .LASF163
     /tmp/ccM3nXtL.s:6146   .debug_str:0000000000000302 .LASF164
     /tmp/ccM3nXtL.s:6254   .debug_str:000000000000064c .LASF165
     /tmp/ccM3nXtL.s:6244   .debug_str:00000000000005f8 .LASF271
     /tmp/ccM3nXtL.s:6324   .debug_str:0000000000000853 .LASF272
     /tmp/ccM3nXtL.s:6522   .debug_str:0000000000000e71 .LASF166
     /tmp/ccM3nXtL.s:6232   .debug_str:000000000000059e .LASF167
     /tmp/ccM3nXtL.s:6572   .debug_str:0000000000000fae .LASF168
     /tmp/ccM3nXtL.s:6248   .debug_str:0000000000000618 .LASF169
     /tmp/ccM3nXtL.s:6074   .debug_str:00000000000000be .LASF170
     /tmp/ccM3nXtL.s:6374   .debug_str:00000000000009a8 .LASF171
     /tmp/ccM3nXtL.s:6102   .debug_str:0000000000000173 .LASF172
     /tmp/ccM3nXtL.s:6510   .debug_str:0000000000000e1a .LASF173
     /tmp/ccM3nXtL.s:6544   .debug_str:0000000000000eee .LASF174
     /tmp/ccM3nXtL.s:6440   .debug_str:0000000000000b51 .LASF176
     /tmp/ccM3nXtL.s:6246   .debug_str:000000000000060a .LASF175
     /tmp/ccM3nXtL.s:6480   .debug_str:0000000000000c6d .LASF177
GAS LISTING /tmp/ccM3nXtL.s 			page 65


     /tmp/ccM3nXtL.s:6076   .debug_str:00000000000000cb .LASF178
     /tmp/ccM3nXtL.s:6180   .debug_str:0000000000000418 .LASF179
     /tmp/ccM3nXtL.s:6332   .debug_str:000000000000087a .LASF180
     /tmp/ccM3nXtL.s:6380   .debug_str:00000000000009c4 .LASF181
     /tmp/ccM3nXtL.s:6364   .debug_str:0000000000000962 .LASF182
     /tmp/ccM3nXtL.s:6506   .debug_str:0000000000000dfc .LASF183
     /tmp/ccM3nXtL.s:6430   .debug_str:0000000000000b1a .LASF184
     /tmp/ccM3nXtL.s:6354   .debug_str:0000000000000912 .LASF185
     /tmp/ccM3nXtL.s:6550   .debug_str:0000000000000f32 .LASF186
     /tmp/ccM3nXtL.s:6270   .debug_str:00000000000006f0 .LASF190
     /tmp/ccM3nXtL.s:6214   .debug_str:000000000000051b .LASF187
     /tmp/ccM3nXtL.s:6174   .debug_str:00000000000003de .LASF188
     /tmp/ccM3nXtL.s:6568   .debug_str:0000000000000f9a .LASF189
     /tmp/ccM3nXtL.s:6532   .debug_str:0000000000000ea9 .LASF191
     /tmp/ccM3nXtL.s:6296   .debug_str:0000000000000795 .LASF192
     /tmp/ccM3nXtL.s:6488   .debug_str:0000000000000cb0 .LASF193
     /tmp/ccM3nXtL.s:6230   .debug_str:0000000000000592 .LASF194
     /tmp/ccM3nXtL.s:6346   .debug_str:00000000000008e4 .LASF195
     /tmp/ccM3nXtL.s:6138   .debug_str:00000000000002b5 .LASF196
     /tmp/ccM3nXtL.s:6224   .debug_str:0000000000000569 .LASF197
     /tmp/ccM3nXtL.s:6234   .debug_str:00000000000005b3 .LASF198
     /tmp/ccM3nXtL.s:6524   .debug_str:0000000000000e78 .LASF199
     /tmp/ccM3nXtL.s:6066   .debug_str:0000000000000081 .LASF200
     /tmp/ccM3nXtL.s:6588   .debug_str:000000000000102b .LASF201
     /tmp/ccM3nXtL.s:6352   .debug_str:00000000000008fd .LASF202
     /tmp/ccM3nXtL.s:6534   .debug_str:0000000000000eb8 .LASF203
     /tmp/ccM3nXtL.s:6088   .debug_str:0000000000000120 .LASF204
     /tmp/ccM3nXtL.s:6344   .debug_str:00000000000008dd .LASF205
     /tmp/ccM3nXtL.s:6268   .debug_str:00000000000006dd .LASF206
     /tmp/ccM3nXtL.s:6334   .debug_str:000000000000088a .LASF207
     /tmp/ccM3nXtL.s:6458   .debug_str:0000000000000be4 .LASF208
     /tmp/ccM3nXtL.s:6260   .debug_str:000000000000068a .LASF209
     /tmp/ccM3nXtL.s:6288   .debug_str:000000000000075d .LASF210
     /tmp/ccM3nXtL.s:6290   .debug_str:0000000000000771 .LASF211
     /tmp/ccM3nXtL.s:6392   .debug_str:0000000000000a2c .LASF212
     /tmp/ccM3nXtL.s:6590   .debug_str:0000000000001034 .LASF213
     /tmp/ccM3nXtL.s:6242   .debug_str:00000000000005e4 .LASF214
     /tmp/ccM3nXtL.s:6456   .debug_str:0000000000000bdd .LASF215
     /tmp/ccM3nXtL.s:6424   .debug_str:0000000000000aef .LASF216
     /tmp/ccM3nXtL.s:6426   .debug_str:0000000000000b02 .LASF217
     /tmp/ccM3nXtL.s:6126   .debug_str:000000000000024d .LASF218
     /tmp/ccM3nXtL.s:6166   .debug_str:0000000000000385 .LASF219
     /tmp/ccM3nXtL.s:6478   .debug_str:0000000000000c5b .LASF220
     /tmp/ccM3nXtL.s:6240   .debug_str:00000000000005de .LASF221
     /tmp/ccM3nXtL.s:6158   .debug_str:000000000000035f .LASF222
     /tmp/ccM3nXtL.s:6186   .debug_str:000000000000045d .LASF223
     /tmp/ccM3nXtL.s:6504   .debug_str:0000000000000deb .LASF224
     /tmp/ccM3nXtL.s:6070   .debug_str:000000000000009d .LASF225
     /tmp/ccM3nXtL.s:6414   .debug_str:0000000000000ab5 .LASF226
     /tmp/ccM3nXtL.s:6406   .debug_str:0000000000000a85 .LASF227
     /tmp/ccM3nXtL.s:6582   .debug_str:0000000000000ffe .LASF228
     /tmp/ccM3nXtL.s:6552   .debug_str:0000000000000f38 .LASF229
     /tmp/ccM3nXtL.s:6250   .debug_str:0000000000000624 .LASF230
     /tmp/ccM3nXtL.s:6124   .debug_str:0000000000000243 .LASF231
     /tmp/ccM3nXtL.s:6312   .debug_str:00000000000007f4 .LASF232
     /tmp/ccM3nXtL.s:6556   .debug_str:0000000000000f4a .LASF233
     /tmp/ccM3nXtL.s:6208   .debug_str:00000000000004e8 .LASF234
GAS LISTING /tmp/ccM3nXtL.s 			page 66


     /tmp/ccM3nXtL.s:6370   .debug_str:0000000000000985 .LASF236
     /tmp/ccM3nXtL.s:6258   .debug_str:0000000000000668 .LASF238
     /tmp/ccM3nXtL.s:6190   .debug_str:0000000000000469 .LASF243
     /tmp/ccM3nXtL.s:6050   .debug_str:0000000000000000 .LASF239
     /tmp/ccM3nXtL.s:6452   .debug_str:0000000000000bd0 .LASF240
     /tmp/ccM3nXtL.s:6220   .debug_str:0000000000000541 .LASF241
     /tmp/ccM3nXtL.s:6094   .debug_str:0000000000000150 .LASF242
     /tmp/ccM3nXtL.s:6314   .debug_str:000000000000080a .LASF244
     /tmp/ccM3nXtL.s:6082   .debug_str:0000000000000107 .LASF245
     /tmp/ccM3nXtL.s:6436   .debug_str:0000000000000b40 .LASF246
     /tmp/ccM3nXtL.s:105    .text:000000000000004c .LFB59
     /tmp/ccM3nXtL.s:1557   .text:000000000000093c .LFE59
     /tmp/ccM3nXtL.s:6348   .debug_str:00000000000008ee .LASF247
     /tmp/ccM3nXtL.s:6148   .debug_str:000000000000030b .LASF248
     /tmp/ccM3nXtL.s:6008   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccM3nXtL.s:6494   .debug_str:0000000000000d99 .LASF249
     /tmp/ccM3nXtL.s:6554   .debug_str:0000000000000f42 .LASF250
     /tmp/ccM3nXtL.s:5653   .debug_loc:0000000000000000 .LLST26
     /tmp/ccM3nXtL.s:6100   .debug_str:000000000000016b .LASF251
     /tmp/ccM3nXtL.s:245    .text:0000000000000114 .LBB164
     /tmp/ccM3nXtL.s:260    .text:0000000000000120 .LBE164
     /tmp/ccM3nXtL.s:266    .text:0000000000000128 .LBB166
     /tmp/ccM3nXtL.s:281    .text:0000000000000134 .LBE166
     /tmp/ccM3nXtL.s:431    .text:00000000000001cc .LBB168
     /tmp/ccM3nXtL.s:442    .text:00000000000001d0 .LBE168
     /tmp/ccM3nXtL.s:5660   .debug_loc:0000000000000023 .LLST27
     /tmp/ccM3nXtL.s:447    .text:00000000000001d4 .LBB170
     /tmp/ccM3nXtL.s:459    .text:00000000000001d8 .LBE170
     /tmp/ccM3nXtL.s:5667   .debug_loc:0000000000000046 .LLST28
     /tmp/ccM3nXtL.s:555    .text:0000000000000280 .LBB172
     /tmp/ccM3nXtL.s:564    .text:0000000000000288 .LBE172
     /tmp/ccM3nXtL.s:5674   .debug_loc:0000000000000069 .LLST29
     /tmp/ccM3nXtL.s:5682   .debug_loc:000000000000008d .LLST30
     /tmp/ccM3nXtL.s:390    .text:0000000000000190 .LVL4
     /tmp/ccM3nXtL.s:398    .text:00000000000001a8 .LVL5
     /tmp/ccM3nXtL.s:411    .text:00000000000001c0 .LVL6
     /tmp/ccM3nXtL.s:497    .text:0000000000000214 .LVL12
     /tmp/ccM3nXtL.s:523    .text:000000000000023c .LVL13
     /tmp/ccM3nXtL.s:568    .text:0000000000000290 .LVL16
     /tmp/ccM3nXtL.s:580    .text:00000000000002a8 .LVL17
     /tmp/ccM3nXtL.s:589    .text:00000000000002b8 .LVL18
     /tmp/ccM3nXtL.s:600    .text:00000000000002d0 .LVL19
     /tmp/ccM3nXtL.s:631    .text:0000000000000314 .LVL20
     /tmp/ccM3nXtL.s:662    .text:0000000000000358 .LVL21
     /tmp/ccM3nXtL.s:693    .text:000000000000039c .LVL22
     /tmp/ccM3nXtL.s:724    .text:00000000000003e0 .LVL23
     /tmp/ccM3nXtL.s:783    .text:0000000000000460 .LVL24
     /tmp/ccM3nXtL.s:842    .text:00000000000004e0 .LVL25
     /tmp/ccM3nXtL.s:854    .text:00000000000004fc .LVL26
     /tmp/ccM3nXtL.s:861    .text:0000000000000508 .LVL27
     /tmp/ccM3nXtL.s:882    .text:0000000000000538 .LVL28
     /tmp/ccM3nXtL.s:888    .text:000000000000053c .LBB113
     /tmp/ccM3nXtL.s:1459   .text:0000000000000880 .LBE113
     /tmp/ccM3nXtL.s:6586   .debug_str:0000000000001023 .LASF252
     /tmp/ccM3nXtL.s:5689   .debug_loc:00000000000000b0 .LLST1
     /tmp/ccM3nXtL.s:5700   .debug_loc:00000000000000e6 .LLST2
     /tmp/ccM3nXtL.s:5729   .debug_loc:000000000000016a .LLST4
GAS LISTING /tmp/ccM3nXtL.s 			page 67


     /tmp/ccM3nXtL.s:982    .text:00000000000005d4 .LBB117
     /tmp/ccM3nXtL.s:5740   .debug_loc:00000000000001a0 .LLST5
     /tmp/ccM3nXtL.s:5751   .debug_loc:00000000000001d6 .LLST6
     /tmp/ccM3nXtL.s:5774   .debug_loc:0000000000000245 .LLST7
     /tmp/ccM3nXtL.s:1049   .text:0000000000000644 .LBB120
     /tmp/ccM3nXtL.s:1057   .text:0000000000000650 .LBE120
     /tmp/ccM3nXtL.s:5798   .debug_loc:00000000000002b5 .LLST8
     /tmp/ccM3nXtL.s:1054   .text:0000000000000650 .LVL47
     /tmp/ccM3nXtL.s:1021   .text:0000000000000614 .LBB122
     /tmp/ccM3nXtL.s:1028   .text:0000000000000620 .LBE122
     /tmp/ccM3nXtL.s:5805   .debug_loc:00000000000002d8 .LLST9
     /tmp/ccM3nXtL.s:1026   .text:0000000000000620 .LVL44
     /tmp/ccM3nXtL.s:980    .text:00000000000005d4 .LVL38
     /tmp/ccM3nXtL.s:5812   .debug_loc:00000000000002fb .LLST10
     /tmp/ccM3nXtL.s:1143   .text:00000000000006cc .LBB131
     /tmp/ccM3nXtL.s:1350   .text:0000000000000810 .LBE131
     /tmp/ccM3nXtL.s:6114   .debug_str:00000000000001fc .LASF253
     /tmp/ccM3nXtL.s:5823   .debug_loc:0000000000000331 .LLST11
     /tmp/ccM3nXtL.s:1149   .text:00000000000006d0 .LBB132
     /tmp/ccM3nXtL.s:1228   .text:000000000000075c .LBE132
     /tmp/ccM3nXtL.s:5830   .debug_loc:0000000000000354 .LLST12
     /tmp/ccM3nXtL.s:5837   .debug_loc:0000000000000377 .LLST13
     /tmp/ccM3nXtL.s:1171   .text:0000000000000700 .LBB134
     /tmp/ccM3nXtL.s:1178   .text:000000000000070c .LBE134
     /tmp/ccM3nXtL.s:5852   .debug_loc:00000000000003c0 .LLST14
     /tmp/ccM3nXtL.s:1176   .text:000000000000070c .LVL59
     /tmp/ccM3nXtL.s:1187   .text:0000000000000718 .LBB136
     /tmp/ccM3nXtL.s:1226   .text:000000000000075c .LBE136
     /tmp/ccM3nXtL.s:5859   .debug_loc:00000000000003e3 .LLST15
     /tmp/ccM3nXtL.s:1217   .text:0000000000000750 .LBB137
     /tmp/ccM3nXtL.s:1225   .text:000000000000075c .LBE137
     /tmp/ccM3nXtL.s:5875   .debug_loc:000000000000042d .LLST16
     /tmp/ccM3nXtL.s:1222   .text:000000000000075c .LVL65
     /tmp/ccM3nXtL.s:1238   .text:0000000000000768 .LBB139
     /tmp/ccM3nXtL.s:1313   .text:00000000000007c8 .LBE139
     /tmp/ccM3nXtL.s:5882   .debug_loc:0000000000000450 .LLST17
     /tmp/ccM3nXtL.s:5889   .debug_loc:0000000000000473 .LLST18
     /tmp/ccM3nXtL.s:5896   .debug_loc:0000000000000496 .LLST19
     /tmp/ccM3nXtL.s:5919   .debug_loc:0000000000000505 .LLST20
     /tmp/ccM3nXtL.s:5939   .debug_loc:0000000000000562 .LLST21
     /tmp/ccM3nXtL.s:1268   .text:0000000000000790 .LBB143
     /tmp/ccM3nXtL.s:1275   .text:0000000000000798 .LBE143
     /tmp/ccM3nXtL.s:5950   .debug_loc:0000000000000598 .LLST22
     /tmp/ccM3nXtL.s:1272   .text:0000000000000798 .LVL71
     /tmp/ccM3nXtL.s:1328   .text:00000000000007e4 .LVL77
     /tmp/ccM3nXtL.s:1375   .text:0000000000000838 .LBB152
     /tmp/ccM3nXtL.s:1457   .text:0000000000000880 .LBE152
     /tmp/ccM3nXtL.s:1377   .text:0000000000000838 .LBB153
     /tmp/ccM3nXtL.s:1392   .text:0000000000000844 .LBE153
     /tmp/ccM3nXtL.s:1396   .text:0000000000000848 .LBB155
     /tmp/ccM3nXtL.s:1411   .text:0000000000000854 .LBE155
     /tmp/ccM3nXtL.s:1426   .text:0000000000000870 .LBB157
     /tmp/ccM3nXtL.s:1437   .text:0000000000000874 .LBE157
     /tmp/ccM3nXtL.s:5957   .debug_loc:00000000000005bb .LLST24
     /tmp/ccM3nXtL.s:1442   .text:0000000000000878 .LBB159
     /tmp/ccM3nXtL.s:1456   .text:0000000000000880 .LBE159
     /tmp/ccM3nXtL.s:5964   .debug_loc:00000000000005de .LLST25
GAS LISTING /tmp/ccM3nXtL.s 			page 68


     /tmp/ccM3nXtL.s:1421   .text:000000000000086c .LVL81
     /tmp/ccM3nXtL.s:917    .text:000000000000057c .LBB114
     /tmp/ccM3nXtL.s:929    .text:0000000000000584 .LBE114
     /tmp/ccM3nXtL.s:5971   .debug_loc:0000000000000601 .LLST3
     /tmp/ccM3nXtL.s:1365   .text:0000000000000830 .LBB150
     /tmp/ccM3nXtL.s:1372   .text:0000000000000834 .LBE150
     /tmp/ccM3nXtL.s:5979   .debug_loc:0000000000000625 .LLST23
     /tmp/ccM3nXtL.s:901    .text:000000000000055c .LVL29
     /tmp/ccM3nXtL.s:909    .text:0000000000000574 .LVL30
     /tmp/ccM3nXtL.s:1461   .text:0000000000000880 .LBB112
     /tmp/ccM3nXtL.s:1508   .text:00000000000008ec .LBE112
     /tmp/ccM3nXtL.s:6400   .debug_str:0000000000000a65 .LASF254
     /tmp/ccM3nXtL.s:1465   .text:0000000000000888 .LVL86
     /tmp/ccM3nXtL.s:1487   .text:00000000000008b8 .LVL87
     /tmp/ccM3nXtL.s:1497   .text:00000000000008d8 .LVL88
     /tmp/ccM3nXtL.s:1505   .text:00000000000008e8 .LVL89
     /tmp/ccM3nXtL.s:174    .text:00000000000000a4 .LBB107
     /tmp/ccM3nXtL.s:189    .text:00000000000000b0 .LBE107
     /tmp/ccM3nXtL.s:238    .text:0000000000000110 .LVL3
     /tmp/ccM3nXtL.s:1514   .text:0000000000000900 .LVL90
     /tmp/ccM3nXtL.s:1530   .text:0000000000000924 .LVL91
     /tmp/ccM3nXtL.s:62     .text:0000000000000028 .LFB58
     /tmp/ccM3nXtL.s:94     .text:000000000000004c .LFE58
     /tmp/ccM3nXtL.s:10     .text:0000000000000000 .LFB57
     /tmp/ccM3nXtL.s:56     .text:0000000000000028 .LFE57
     /tmp/ccM3nXtL.s:22     .text:000000000000000c .LBB49
     /tmp/ccM3nXtL.s:35     .text:0000000000000014 .LBE49
     /tmp/ccM3nXtL.s:5986   .debug_loc:0000000000000648 .LLST0
     /tmp/ccM3nXtL.s:6538   .debug_str:0000000000000ed0 .LASF255
     /tmp/ccM3nXtL.s:6298   .debug_str:00000000000007a1 .LASF256
     /tmp/ccM3nXtL.s:6372   .debug_str:000000000000099a .LASF257
     /tmp/ccM3nXtL.s:6072   .debug_str:00000000000000a8 .LASF258
     /tmp/ccM3nXtL.s:6134   .debug_str:000000000000028b .LASF259
     /tmp/ccM3nXtL.s:424    .text:00000000000001c8 .LVL7
     /tmp/ccM3nXtL.s:430    .text:00000000000001cc .LVL8
     /tmp/ccM3nXtL.s:439    .text:00000000000001d0 .LVL9
     /tmp/ccM3nXtL.s:446    .text:00000000000001d4 .LVL10
     /tmp/ccM3nXtL.s:455    .text:00000000000001d8 .LVL11
     /tmp/ccM3nXtL.s:554    .text:0000000000000280 .LVL14
     /tmp/ccM3nXtL.s:562    .text:0000000000000288 .LVL15
     /tmp/ccM3nXtL.s:934    .text:0000000000000590 .LVL33
     /tmp/ccM3nXtL.s:1101   .text:0000000000000698 .LVL52
     /tmp/ccM3nXtL.s:1453   .text:0000000000000880 .LVL85
     /tmp/ccM3nXtL.s:939    .text:0000000000000598 .LVL34
     /tmp/ccM3nXtL.s:944    .text:000000000000059c .LVL35
     /tmp/ccM3nXtL.s:947    .text:00000000000005a0 .LVL36
     /tmp/ccM3nXtL.s:1106   .text:00000000000006a0 .LVL53
     /tmp/ccM3nXtL.s:1112   .text:00000000000006a4 .LVL54
     /tmp/ccM3nXtL.s:1115   .text:00000000000006a8 .LVL55
     /tmp/ccM3nXtL.s:965    .text:00000000000005b8 .LVL37
     /tmp/ccM3nXtL.s:1094   .text:000000000000068c .LVL51
     /tmp/ccM3nXtL.s:1074   .text:000000000000066c .LVL48
     /tmp/ccM3nXtL.s:1084   .text:000000000000067c .LVL50
     /tmp/ccM3nXtL.s:995    .text:00000000000005ec .LVL39
     /tmp/ccM3nXtL.s:1001   .text:00000000000005f4 .LVL40
     /tmp/ccM3nXtL.s:1007   .text:00000000000005fc .LVL41
     /tmp/ccM3nXtL.s:1009   .text:0000000000000600 .LVL42
GAS LISTING /tmp/ccM3nXtL.s 			page 69


     /tmp/ccM3nXtL.s:1035   .text:000000000000062c .LVL45
     /tmp/ccM3nXtL.s:1047   .text:0000000000000644 .LVL46
     /tmp/ccM3nXtL.s:1081   .text:0000000000000674 .LVL49
     /tmp/ccM3nXtL.s:1020   .text:0000000000000614 .LVL43
     /tmp/ccM3nXtL.s:1134   .text:00000000000006c0 .LVL56
     /tmp/ccM3nXtL.s:1348   .text:0000000000000810 .LVL78
     /tmp/ccM3nXtL.s:1236   .text:0000000000000768 .LVL66
     /tmp/ccM3nXtL.s:1148   .text:00000000000006d0 .LVL57
     /tmp/ccM3nXtL.s:1185   .text:0000000000000718 .LVL60
     /tmp/ccM3nXtL.s:1193   .text:0000000000000728 .LVL62
     /tmp/ccM3nXtL.s:1200   .text:0000000000000730 .LVL63
     /tmp/ccM3nXtL.s:1170   .text:0000000000000700 .LVL58
     /tmp/ccM3nXtL.s:1190   .text:0000000000000720 .LVL61
     /tmp/ccM3nXtL.s:1215   .text:0000000000000750 .LVL64
     /tmp/ccM3nXtL.s:1308   .text:00000000000007c8 .LVL76
     /tmp/ccM3nXtL.s:1242   .text:000000000000076c .LVL67
     /tmp/ccM3nXtL.s:1264   .text:000000000000078c .LVL69
     /tmp/ccM3nXtL.s:1280   .text:000000000000079c .LVL72
     /tmp/ccM3nXtL.s:1292   .text:00000000000007ac .LVL74
     /tmp/ccM3nXtL.s:1296   .text:00000000000007b4 .LVL75
     /tmp/ccM3nXtL.s:1246   .text:0000000000000774 .LVL68
     /tmp/ccM3nXtL.s:1289   .text:00000000000007a8 .LVL73
     /tmp/ccM3nXtL.s:1267   .text:0000000000000790 .LVL70
     /tmp/ccM3nXtL.s:1425   .text:0000000000000870 .LVL82
     /tmp/ccM3nXtL.s:1434   .text:0000000000000874 .LVL83
     /tmp/ccM3nXtL.s:1441   .text:0000000000000878 .LVL84
     /tmp/ccM3nXtL.s:916    .text:000000000000057c .LVL31
     /tmp/ccM3nXtL.s:926    .text:0000000000000584 .LVL32
     /tmp/ccM3nXtL.s:1364   .text:0000000000000830 .LVL79
     /tmp/ccM3nXtL.s:1370   .text:0000000000000834 .LVL80
     /tmp/ccM3nXtL.s:21     .text:000000000000000c .LVL0
     /tmp/ccM3nXtL.s:32     .text:0000000000000014 .LVL1
     /tmp/ccM3nXtL.s:1570   .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccM3nXtL.s:941    .text:0000000000000598 .LBB116
     /tmp/ccM3nXtL.s:949    .text:00000000000005a0 .LBE116
     /tmp/ccM3nXtL.s:953    .text:00000000000005a4 .LBB128
     /tmp/ccM3nXtL.s:1096   .text:000000000000068c .LBE128
     /tmp/ccM3nXtL.s:1060   .text:0000000000000650 .LBE117
     /tmp/ccM3nXtL.s:1076   .text:000000000000066c .LBB127
     /tmp/ccM3nXtL.s:1088   .text:000000000000067c .LBE127
     /tmp/ccM3nXtL.s:996    .text:00000000000005ec .LBB119
     /tmp/ccM3nXtL.s:1011   .text:0000000000000600 .LBE119
     /tmp/ccM3nXtL.s:1037   .text:000000000000062c .LBB124
     /tmp/ccM3nXtL.s:1058   .text:0000000000000650 .LBE124
     /tmp/ccM3nXtL.s:1078   .text:000000000000066c .LBB125
     /tmp/ccM3nXtL.s:1086   .text:000000000000067c .LBE125
     /tmp/ccM3nXtL.s:1108   .text:00000000000006a0 .LBB129
     /tmp/ccM3nXtL.s:1118   .text:00000000000006a8 .LBE129
     /tmp/ccM3nXtL.s:1122   .text:00000000000006ac .LBB148
     /tmp/ccM3nXtL.s:1352   .text:0000000000000810 .LBE148
     /tmp/ccM3nXtL.s:1249   .text:0000000000000774 .LBB142
     /tmp/ccM3nXtL.s:1276   .text:0000000000000798 .LBE142
     /tmp/ccM3nXtL.s:1298   .text:00000000000007b4 .LBB145
     /tmp/ccM3nXtL.s:1310   .text:00000000000007c8 .LBE145
     /tmp/ccM3nXtL.s:243    .text:0000000000000114 .LBB163
     /tmp/ccM3nXtL.s:460    .text:00000000000001d8 .LBE163
     /tmp/ccM3nXtL.s:491    .text:0000000000000208 .LBB174
GAS LISTING /tmp/ccM3nXtL.s 			page 70


     /tmp/ccM3nXtL.s:886    .text:000000000000053c .LBE174

UNDEFINED SYMBOLS
_Z14printStringMojPKc
CONSOLE_STATUS
_ZN8kConsole13getOutputSizeEv
CONSOLE_TX_DATA
_ZN8kConsole15putOutputBufferEv
_ZN9Allocator7_mallocEm
_ZN9Allocator9_mem_freeEPv
_ZN3TCB13thread_createEPPS_PFvPvES2_Pm
_ZN3TCB7runningE
_ZN3TCB8dispatchEv
_ZN3TCB16timeSliceCounterE
_ZN3TCB10putToSleepEm
_ZN10kSemaphore7openSemEPPS_j
_ZN10kSemaphore8closeSemEv
_ZN10kSemaphore4waitEv
_ZN10kSemaphore6signalEv
_ZN10kSemaphore7tryWaitEv
_ZN10kSemaphore9timedWaitEm
_ZN8kConsole5kputcEc
_ZN8kConsole5kgetcEv
_ZN3TCB8sleepingE
_ZN9Scheduler3putEP3TCB
_ZN10kSemaphore16blockedTimedWaitE
plic_claim
_ZN8kConsole12getInputSizeEv
CONSOLE_RX_DATA
_ZN8kConsole14putInputBufferEc
plic_complete
